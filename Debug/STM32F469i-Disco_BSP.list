
STM32F469i-Disco_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005784  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f1c  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  0800985c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
  7 .bss          00000628  20000064  20000064  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2000068c  2000068c  00020064  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033e70  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005eb0  00000000  00000000  00053f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001c9a7  00000000  00000000  00059db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001308  00000000  00000000  00076760  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004660  00000000  00000000  00077a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00035df4  00000000  00000000  0007c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00022c8d  00000000  00000000  000b1ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0012b8d1  00000000  00000000  000d4b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0020041a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000436c  00000000  00000000  00200498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000064 	.word	0x20000064
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08005920 	.word	0x08005920

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000068 	.word	0x20000068
 80001f0:	08005920 	.word	0x08005920

080001f4 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80001f8:	2000      	movs	r0, #0
 80001fa:	4770      	bx	lr

080001fc <ft6x06_ReadID>:
{
 80001fc:	b510      	push	{r4, lr}
 80001fe:	4604      	mov	r4, r0
  TS_IO_Init();
 8000200:	f000 fb4e 	bl	80008a0 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8000204:	b2e0      	uxtb	r0, r4
 8000206:	21a8      	movs	r1, #168	; 0xa8
 8000208:	f000 fb76 	bl	80008f8 <TS_IO_Read>
}
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <ft6x06_TS_DetectTouch>:
{
 8000210:	b510      	push	{r4, lr}
 8000212:	b082      	sub	sp, #8
  volatile uint8_t nbTouch = 0;
 8000214:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000216:	2102      	movs	r1, #2
 8000218:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 800021a:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800021e:	f000 fb6b 	bl	80008f8 <TS_IO_Read>
 8000222:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8000226:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800022a:	f003 030f 	and.w	r3, r3, #15
 800022e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8000232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000236:	2b02      	cmp	r3, #2
    nbTouch = 0;
 8000238:	bf88      	it	hi
 800023a:	f88d 4007 	strbhi.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <ft6x06_TS_DetectTouch+0x44>)
 8000240:	f89d 2007 	ldrb.w	r2, [sp, #7]
  return(nbTouch);
 8000244:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000248:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 800024a:	2200      	movs	r2, #0
 800024c:	709a      	strb	r2, [r3, #2]
}
 800024e:	b002      	add	sp, #8
 8000250:	bd10      	pop	{r4, pc}
 8000252:	bf00      	nop
 8000254:	20000080 	.word	0x20000080

08000258 <ft6x06_TS_GetXY>:
{
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800025a:	4c16      	ldr	r4, [pc, #88]	; (80002b4 <ft6x06_TS_GetXY+0x5c>)
 800025c:	78a3      	ldrb	r3, [r4, #2]
 800025e:	7867      	ldrb	r7, [r4, #1]
 8000260:	429f      	cmp	r7, r3
{
 8000262:	b083      	sub	sp, #12
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000264:	d922      	bls.n	80002ac <ft6x06_TS_GetXY+0x54>
    switch(ft6x06_handle.currActiveTouchIdx)
 8000266:	b31b      	cbz	r3, 80002b0 <ft6x06_TS_GetXY+0x58>
 8000268:	2b01      	cmp	r3, #1
  uint8_t regAddress = 0;
 800026a:	bf0c      	ite	eq
 800026c:	2309      	moveq	r3, #9
 800026e:	2300      	movne	r3, #0
 8000270:	460e      	mov	r6, r1
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000272:	4619      	mov	r1, r3
 8000274:	2304      	movs	r3, #4
 8000276:	4615      	mov	r5, r2
 8000278:	b2c0      	uxtb	r0, r0
 800027a:	eb0d 0203 	add.w	r2, sp, r3
 800027e:	f000 fb61 	bl	8000944 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000282:	f89d 0004 	ldrb.w	r0, [sp, #4]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000286:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800028a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ft6x06_handle.currActiveTouchIdx++;
 800028e:	78a1      	ldrb	r1, [r4, #2]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000290:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8000294:	0200      	lsls	r0, r0, #8
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000296:	021b      	lsls	r3, r3, #8
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000298:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800029c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80002a0:	4313      	orrs	r3, r2
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80002a2:	4338      	orrs	r0, r7
    ft6x06_handle.currActiveTouchIdx++;
 80002a4:	1c4a      	adds	r2, r1, #1
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80002a6:	8030      	strh	r0, [r6, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80002a8:	70a2      	strb	r2, [r4, #2]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80002aa:	802b      	strh	r3, [r5, #0]
}
 80002ac:	b003      	add	sp, #12
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regAddress = FT6206_P1_XH_REG; 
 80002b0:	2303      	movs	r3, #3
 80002b2:	e7dd      	b.n	8000270 <ft6x06_TS_GetXY+0x18>
 80002b4:	20000080 	.word	0x20000080

080002b8 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80002b8:	b2c0      	uxtb	r0, r0
 80002ba:	2201      	movs	r2, #1
 80002bc:	21a4      	movs	r1, #164	; 0xa4
 80002be:	f000 bafb 	b.w	80008b8 <TS_IO_Write>
 80002c2:	bf00      	nop

080002c4 <ft6x06_TS_Start>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80002c4:	b2c0      	uxtb	r0, r0
 80002c6:	2200      	movs	r2, #0
 80002c8:	21a4      	movs	r1, #164	; 0xa4
 80002ca:	f000 baf5 	b.w	80008b8 <TS_IO_Write>
 80002ce:	bf00      	nop

080002d0 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <ft6x06_Init+0x20>)
 80002d2:	791a      	ldrb	r2, [r3, #4]
 80002d4:	4290      	cmp	r0, r2
 80002d6:	d004      	beq.n	80002e2 <ft6x06_Init+0x12>
 80002d8:	7959      	ldrb	r1, [r3, #5]
 80002da:	4288      	cmp	r0, r1
 80002dc:	d001      	beq.n	80002e2 <ft6x06_Init+0x12>
 80002de:	b112      	cbz	r2, 80002e6 <ft6x06_Init+0x16>
 80002e0:	b101      	cbz	r1, 80002e4 <ft6x06_Init+0x14>
}
 80002e2:	4770      	bx	lr
    if(ft6x06[idx] == DeviceAddr)
 80002e4:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 80002e6:	4413      	add	r3, r2
 80002e8:	7118      	strb	r0, [r3, #4]
      TS_IO_Init(); 
 80002ea:	f000 bad9 	b.w	80008a0 <TS_IO_Init>
 80002ee:	bf00      	nop
 80002f0:	20000080 	.word	0x20000080

080002f4 <ft6x06_TS_ClearIT>:
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop

080002f8 <ft6x06_TS_DisableIT>:
 80002f8:	b2c0      	uxtb	r0, r0
 80002fa:	2200      	movs	r2, #0
 80002fc:	21a4      	movs	r1, #164	; 0xa4
 80002fe:	f000 badb 	b.w	80008b8 <TS_IO_Write>
 8000302:	bf00      	nop

08000304 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000304:	b538      	push	{r3, r4, r5, lr}
 8000306:	4604      	mov	r4, r0
 8000308:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800030a:	2000      	movs	r0, #0
 800030c:	49cb      	ldr	r1, [pc, #812]	; (800063c <OTM8009A_Init+0x338>)
 800030e:	f000 fd6b 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000312:	49cb      	ldr	r1, [pc, #812]	; (8000640 <OTM8009A_Init+0x33c>)
 8000314:	2003      	movs	r0, #3
 8000316:	f000 fd67 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800031a:	49ca      	ldr	r1, [pc, #808]	; (8000644 <OTM8009A_Init+0x340>)
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fd63 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000322:	49c9      	ldr	r1, [pc, #804]	; (8000648 <OTM8009A_Init+0x344>)
 8000324:	2002      	movs	r0, #2
 8000326:	f000 fd5f 	bl	8000de8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800032a:	49c6      	ldr	r1, [pc, #792]	; (8000644 <OTM8009A_Init+0x340>)
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fd5b 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000332:	49c6      	ldr	r1, [pc, #792]	; (800064c <OTM8009A_Init+0x348>)
 8000334:	2000      	movs	r0, #0
 8000336:	f000 fd57 	bl	8000de8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800033a:	200a      	movs	r0, #10
 800033c:	f000 fb24 	bl	8000988 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000340:	49c3      	ldr	r1, [pc, #780]	; (8000650 <OTM8009A_Init+0x34c>)
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fd50 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000348:	49c2      	ldr	r1, [pc, #776]	; (8000654 <OTM8009A_Init+0x350>)
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fd4c 	bl	8000de8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000350:	200a      	movs	r0, #10
 8000352:	f000 fb19 	bl	8000988 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000356:	49c0      	ldr	r1, [pc, #768]	; (8000658 <OTM8009A_Init+0x354>)
 8000358:	2000      	movs	r0, #0
 800035a:	f000 fd45 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800035e:	49bf      	ldr	r1, [pc, #764]	; (800065c <OTM8009A_Init+0x358>)
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fd41 	bl	8000de8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000366:	49be      	ldr	r1, [pc, #760]	; (8000660 <OTM8009A_Init+0x35c>)
 8000368:	2000      	movs	r0, #0
 800036a:	f000 fd3d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800036e:	49bd      	ldr	r1, [pc, #756]	; (8000664 <OTM8009A_Init+0x360>)
 8000370:	2000      	movs	r0, #0
 8000372:	f000 fd39 	bl	8000de8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000376:	49bc      	ldr	r1, [pc, #752]	; (8000668 <OTM8009A_Init+0x364>)
 8000378:	2000      	movs	r0, #0
 800037a:	f000 fd35 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800037e:	49bb      	ldr	r1, [pc, #748]	; (800066c <OTM8009A_Init+0x368>)
 8000380:	2000      	movs	r0, #0
 8000382:	f000 fd31 	bl	8000de8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000386:	49ad      	ldr	r1, [pc, #692]	; (800063c <OTM8009A_Init+0x338>)
 8000388:	2000      	movs	r0, #0
 800038a:	f000 fd2d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800038e:	49b8      	ldr	r1, [pc, #736]	; (8000670 <OTM8009A_Init+0x36c>)
 8000390:	2000      	movs	r0, #0
 8000392:	f000 fd29 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000396:	49b7      	ldr	r1, [pc, #732]	; (8000674 <OTM8009A_Init+0x370>)
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fd25 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800039e:	49b6      	ldr	r1, [pc, #728]	; (8000678 <OTM8009A_Init+0x374>)
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fd21 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80003a6:	49b5      	ldr	r1, [pc, #724]	; (800067c <OTM8009A_Init+0x378>)
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 fd1d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80003ae:	49b4      	ldr	r1, [pc, #720]	; (8000680 <OTM8009A_Init+0x37c>)
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fd19 	bl	8000de8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80003b6:	49b3      	ldr	r1, [pc, #716]	; (8000684 <OTM8009A_Init+0x380>)
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fd15 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80003be:	49b2      	ldr	r1, [pc, #712]	; (8000688 <OTM8009A_Init+0x384>)
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 fd11 	bl	8000de8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80003c6:	49b1      	ldr	r1, [pc, #708]	; (800068c <OTM8009A_Init+0x388>)
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 fd0d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80003ce:	49a5      	ldr	r1, [pc, #660]	; (8000664 <OTM8009A_Init+0x360>)
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 fd09 	bl	8000de8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80003d6:	4999      	ldr	r1, [pc, #612]	; (800063c <OTM8009A_Init+0x338>)
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 fd05 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80003de:	49ac      	ldr	r1, [pc, #688]	; (8000690 <OTM8009A_Init+0x38c>)
 80003e0:	2002      	movs	r0, #2
 80003e2:	f000 fd01 	bl	8000de8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80003e6:	49ab      	ldr	r1, [pc, #684]	; (8000694 <OTM8009A_Init+0x390>)
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 fcfd 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80003ee:	49aa      	ldr	r1, [pc, #680]	; (8000698 <OTM8009A_Init+0x394>)
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 fcf9 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80003f6:	49a9      	ldr	r1, [pc, #676]	; (800069c <OTM8009A_Init+0x398>)
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 fcf5 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80003fe:	49a8      	ldr	r1, [pc, #672]	; (80006a0 <OTM8009A_Init+0x39c>)
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fcf1 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000406:	49a7      	ldr	r1, [pc, #668]	; (80006a4 <OTM8009A_Init+0x3a0>)
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fced 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800040e:	49a6      	ldr	r1, [pc, #664]	; (80006a8 <OTM8009A_Init+0x3a4>)
 8000410:	2000      	movs	r0, #0
 8000412:	f000 fce9 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000416:	4997      	ldr	r1, [pc, #604]	; (8000674 <OTM8009A_Init+0x370>)
 8000418:	2000      	movs	r0, #0
 800041a:	f000 fce5 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800041e:	49a3      	ldr	r1, [pc, #652]	; (80006ac <OTM8009A_Init+0x3a8>)
 8000420:	2000      	movs	r0, #0
 8000422:	f000 fce1 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000426:	4995      	ldr	r1, [pc, #596]	; (800067c <OTM8009A_Init+0x378>)
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fcdd 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800042e:	49a0      	ldr	r1, [pc, #640]	; (80006b0 <OTM8009A_Init+0x3ac>)
 8000430:	2000      	movs	r0, #0
 8000432:	f000 fcd9 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000436:	499f      	ldr	r1, [pc, #636]	; (80006b4 <OTM8009A_Init+0x3b0>)
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fcd5 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800043e:	499e      	ldr	r1, [pc, #632]	; (80006b8 <OTM8009A_Init+0x3b4>)
 8000440:	2002      	movs	r0, #2
 8000442:	f000 fcd1 	bl	8000de8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000446:	497f      	ldr	r1, [pc, #508]	; (8000644 <OTM8009A_Init+0x340>)
 8000448:	2000      	movs	r0, #0
 800044a:	f000 fccd 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800044e:	499b      	ldr	r1, [pc, #620]	; (80006bc <OTM8009A_Init+0x3b8>)
 8000450:	2006      	movs	r0, #6
 8000452:	f000 fcc9 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000456:	499a      	ldr	r1, [pc, #616]	; (80006c0 <OTM8009A_Init+0x3bc>)
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fcc5 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800045e:	4999      	ldr	r1, [pc, #612]	; (80006c4 <OTM8009A_Init+0x3c0>)
 8000460:	200e      	movs	r0, #14
 8000462:	f000 fcc1 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000466:	4998      	ldr	r1, [pc, #608]	; (80006c8 <OTM8009A_Init+0x3c4>)
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fcbd 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800046e:	4997      	ldr	r1, [pc, #604]	; (80006cc <OTM8009A_Init+0x3c8>)
 8000470:	200e      	movs	r0, #14
 8000472:	f000 fcb9 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000476:	4996      	ldr	r1, [pc, #600]	; (80006d0 <OTM8009A_Init+0x3cc>)
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fcb5 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800047e:	4995      	ldr	r1, [pc, #596]	; (80006d4 <OTM8009A_Init+0x3d0>)
 8000480:	200a      	movs	r0, #10
 8000482:	f000 fcb1 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000486:	4994      	ldr	r1, [pc, #592]	; (80006d8 <OTM8009A_Init+0x3d4>)
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fcad 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800048e:	4993      	ldr	r1, [pc, #588]	; (80006dc <OTM8009A_Init+0x3d8>)
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fca9 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000496:	496b      	ldr	r1, [pc, #428]	; (8000644 <OTM8009A_Init+0x340>)
 8000498:	2000      	movs	r0, #0
 800049a:	f000 fca5 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800049e:	4990      	ldr	r1, [pc, #576]	; (80006e0 <OTM8009A_Init+0x3dc>)
 80004a0:	200a      	movs	r0, #10
 80004a2:	f000 fca1 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80004a6:	498f      	ldr	r1, [pc, #572]	; (80006e4 <OTM8009A_Init+0x3e0>)
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 fc9d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80004ae:	498e      	ldr	r1, [pc, #568]	; (80006e8 <OTM8009A_Init+0x3e4>)
 80004b0:	200f      	movs	r0, #15
 80004b2:	f000 fc99 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80004b6:	4982      	ldr	r1, [pc, #520]	; (80006c0 <OTM8009A_Init+0x3bc>)
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fc95 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80004be:	498b      	ldr	r1, [pc, #556]	; (80006ec <OTM8009A_Init+0x3e8>)
 80004c0:	200f      	movs	r0, #15
 80004c2:	f000 fc91 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80004c6:	4980      	ldr	r1, [pc, #512]	; (80006c8 <OTM8009A_Init+0x3c4>)
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 fc8d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80004ce:	4988      	ldr	r1, [pc, #544]	; (80006f0 <OTM8009A_Init+0x3ec>)
 80004d0:	200a      	movs	r0, #10
 80004d2:	f000 fc89 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80004d6:	497e      	ldr	r1, [pc, #504]	; (80006d0 <OTM8009A_Init+0x3cc>)
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fc85 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80004de:	4985      	ldr	r1, [pc, #532]	; (80006f4 <OTM8009A_Init+0x3f0>)
 80004e0:	200f      	movs	r0, #15
 80004e2:	f000 fc81 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80004e6:	497c      	ldr	r1, [pc, #496]	; (80006d8 <OTM8009A_Init+0x3d4>)
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fc7d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80004ee:	4982      	ldr	r1, [pc, #520]	; (80006f8 <OTM8009A_Init+0x3f4>)
 80004f0:	200f      	movs	r0, #15
 80004f2:	f000 fc79 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80004f6:	4981      	ldr	r1, [pc, #516]	; (80006fc <OTM8009A_Init+0x3f8>)
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fc75 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80004fe:	4980      	ldr	r1, [pc, #512]	; (8000700 <OTM8009A_Init+0x3fc>)
 8000500:	200a      	movs	r0, #10
 8000502:	f000 fc71 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000506:	497f      	ldr	r1, [pc, #508]	; (8000704 <OTM8009A_Init+0x400>)
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fc6d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800050e:	497e      	ldr	r1, [pc, #504]	; (8000708 <OTM8009A_Init+0x404>)
 8000510:	200a      	movs	r0, #10
 8000512:	f000 fc69 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000516:	494b      	ldr	r1, [pc, #300]	; (8000644 <OTM8009A_Init+0x340>)
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fc65 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800051e:	497b      	ldr	r1, [pc, #492]	; (800070c <OTM8009A_Init+0x408>)
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fc61 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000526:	496f      	ldr	r1, [pc, #444]	; (80006e4 <OTM8009A_Init+0x3e0>)
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fc5d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800052e:	4978      	ldr	r1, [pc, #480]	; (8000710 <OTM8009A_Init+0x40c>)
 8000530:	200f      	movs	r0, #15
 8000532:	f000 fc59 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000536:	4962      	ldr	r1, [pc, #392]	; (80006c0 <OTM8009A_Init+0x3bc>)
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fc55 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800053e:	4975      	ldr	r1, [pc, #468]	; (8000714 <OTM8009A_Init+0x410>)
 8000540:	200f      	movs	r0, #15
 8000542:	f000 fc51 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000546:	4960      	ldr	r1, [pc, #384]	; (80006c8 <OTM8009A_Init+0x3c4>)
 8000548:	2000      	movs	r0, #0
 800054a:	f000 fc4d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800054e:	4972      	ldr	r1, [pc, #456]	; (8000718 <OTM8009A_Init+0x414>)
 8000550:	200a      	movs	r0, #10
 8000552:	f000 fc49 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000556:	495e      	ldr	r1, [pc, #376]	; (80006d0 <OTM8009A_Init+0x3cc>)
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fc45 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800055e:	496f      	ldr	r1, [pc, #444]	; (800071c <OTM8009A_Init+0x418>)
 8000560:	200f      	movs	r0, #15
 8000562:	f000 fc41 	bl	8000de8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000566:	495c      	ldr	r1, [pc, #368]	; (80006d8 <OTM8009A_Init+0x3d4>)
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fc3d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800056e:	496c      	ldr	r1, [pc, #432]	; (8000720 <OTM8009A_Init+0x41c>)
 8000570:	200f      	movs	r0, #15
 8000572:	f000 fc39 	bl	8000de8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000576:	493f      	ldr	r1, [pc, #252]	; (8000674 <OTM8009A_Init+0x370>)
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fc35 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800057e:	4969      	ldr	r1, [pc, #420]	; (8000724 <OTM8009A_Init+0x420>)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fc31 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000586:	4968      	ldr	r1, [pc, #416]	; (8000728 <OTM8009A_Init+0x424>)
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fc2d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800058e:	4967      	ldr	r1, [pc, #412]	; (800072c <OTM8009A_Init+0x428>)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 fc29 	bl	8000de8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000596:	4966      	ldr	r1, [pc, #408]	; (8000730 <OTM8009A_Init+0x42c>)
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fc25 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800059e:	4965      	ldr	r1, [pc, #404]	; (8000734 <OTM8009A_Init+0x430>)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 fc21 	bl	8000de8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005a6:	4925      	ldr	r1, [pc, #148]	; (800063c <OTM8009A_Init+0x338>)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fc1d 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80005ae:	4962      	ldr	r1, [pc, #392]	; (8000738 <OTM8009A_Init+0x434>)
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 fc19 	bl	8000de8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005b6:	4921      	ldr	r1, [pc, #132]	; (800063c <OTM8009A_Init+0x338>)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fc15 	bl	8000de8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005be:	491f      	ldr	r1, [pc, #124]	; (800063c <OTM8009A_Init+0x338>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fc11 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80005c6:	495d      	ldr	r1, [pc, #372]	; (800073c <OTM8009A_Init+0x438>)
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 fc0d 	bl	8000de8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <OTM8009A_Init+0x338>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fc09 	bl	8000de8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80005d6:	495a      	ldr	r1, [pc, #360]	; (8000740 <OTM8009A_Init+0x43c>)
 80005d8:	2010      	movs	r0, #16
 80005da:	f000 fc05 	bl	8000de8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80005de:	2000      	movs	r0, #0
 80005e0:	4958      	ldr	r1, [pc, #352]	; (8000744 <OTM8009A_Init+0x440>)
 80005e2:	f000 fc01 	bl	8000de8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80005e6:	2078      	movs	r0, #120	; 0x78
 80005e8:	f000 f9ce 	bl	8000988 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	f000 80cb 	beq.w	8000788 <OTM8009A_Init+0x484>
 80005f2:	2c02      	cmp	r4, #2
 80005f4:	f000 80b4 	beq.w	8000760 <OTM8009A_Init+0x45c>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80005f8:	2d01      	cmp	r5, #1
 80005fa:	f000 80b8 	beq.w	800076e <OTM8009A_Init+0x46a>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80005fe:	4952      	ldr	r1, [pc, #328]	; (8000748 <OTM8009A_Init+0x444>)
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fbf1 	bl	8000de8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000606:	4951      	ldr	r1, [pc, #324]	; (800074c <OTM8009A_Init+0x448>)
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fbed 	bl	8000de8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800060e:	4950      	ldr	r1, [pc, #320]	; (8000750 <OTM8009A_Init+0x44c>)
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fbe9 	bl	8000de8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000616:	494f      	ldr	r1, [pc, #316]	; (8000754 <OTM8009A_Init+0x450>)
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fbe5 	bl	8000de8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800061e:	494e      	ldr	r1, [pc, #312]	; (8000758 <OTM8009A_Init+0x454>)
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fbe1 	bl	8000de8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000626:	4905      	ldr	r1, [pc, #20]	; (800063c <OTM8009A_Init+0x338>)
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fbdd 	bl	8000de8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800062e:	494b      	ldr	r1, [pc, #300]	; (800075c <OTM8009A_Init+0x458>)
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fbd9 	bl	8000de8 <DSI_IO_WriteCmd>

  return 0;
}
 8000636:	2000      	movs	r0, #0
 8000638:	bd38      	pop	{r3, r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	08005938 	.word	0x08005938
 8000640:	0800593c 	.word	0x0800593c
 8000644:	08005940 	.word	0x08005940
 8000648:	08005944 	.word	0x08005944
 800064c:	08005948 	.word	0x08005948
 8000650:	0800594c 	.word	0x0800594c
 8000654:	08005950 	.word	0x08005950
 8000658:	08005954 	.word	0x08005954
 800065c:	08005958 	.word	0x08005958
 8000660:	0800595c 	.word	0x0800595c
 8000664:	08005960 	.word	0x08005960
 8000668:	08005964 	.word	0x08005964
 800066c:	08005968 	.word	0x08005968
 8000670:	0800596c 	.word	0x0800596c
 8000674:	08005970 	.word	0x08005970
 8000678:	08005974 	.word	0x08005974
 800067c:	08005978 	.word	0x08005978
 8000680:	0800597c 	.word	0x0800597c
 8000684:	08005980 	.word	0x08005980
 8000688:	08005984 	.word	0x08005984
 800068c:	08005988 	.word	0x08005988
 8000690:	0800598c 	.word	0x0800598c
 8000694:	08005990 	.word	0x08005990
 8000698:	08005994 	.word	0x08005994
 800069c:	08005998 	.word	0x08005998
 80006a0:	0800599c 	.word	0x0800599c
 80006a4:	080059a0 	.word	0x080059a0
 80006a8:	080059a4 	.word	0x080059a4
 80006ac:	080059a8 	.word	0x080059a8
 80006b0:	080059ac 	.word	0x080059ac
 80006b4:	080059b0 	.word	0x080059b0
 80006b8:	080059b4 	.word	0x080059b4
 80006bc:	080059b8 	.word	0x080059b8
 80006c0:	080059c0 	.word	0x080059c0
 80006c4:	080059c4 	.word	0x080059c4
 80006c8:	080059d4 	.word	0x080059d4
 80006cc:	080059d8 	.word	0x080059d8
 80006d0:	080059e8 	.word	0x080059e8
 80006d4:	080059ec 	.word	0x080059ec
 80006d8:	080059f8 	.word	0x080059f8
 80006dc:	080059fc 	.word	0x080059fc
 80006e0:	08005a00 	.word	0x08005a00
 80006e4:	08005a0c 	.word	0x08005a0c
 80006e8:	08005a10 	.word	0x08005a10
 80006ec:	08005a20 	.word	0x08005a20
 80006f0:	08005a30 	.word	0x08005a30
 80006f4:	08005a3c 	.word	0x08005a3c
 80006f8:	08005a4c 	.word	0x08005a4c
 80006fc:	08005a5c 	.word	0x08005a5c
 8000700:	08005a60 	.word	0x08005a60
 8000704:	08005a6c 	.word	0x08005a6c
 8000708:	08005a70 	.word	0x08005a70
 800070c:	08005a7c 	.word	0x08005a7c
 8000710:	08005a88 	.word	0x08005a88
 8000714:	08005a98 	.word	0x08005a98
 8000718:	08005aa8 	.word	0x08005aa8
 800071c:	08005ab4 	.word	0x08005ab4
 8000720:	08005ac4 	.word	0x08005ac4
 8000724:	08005ad4 	.word	0x08005ad4
 8000728:	08005ad8 	.word	0x08005ad8
 800072c:	08005adc 	.word	0x08005adc
 8000730:	08005ae0 	.word	0x08005ae0
 8000734:	08005ae4 	.word	0x08005ae4
 8000738:	08005ae8 	.word	0x08005ae8
 800073c:	08005aec 	.word	0x08005aec
 8000740:	08005b00 	.word	0x08005b00
 8000744:	08005b14 	.word	0x08005b14
 8000748:	08005b34 	.word	0x08005b34
 800074c:	08005b38 	.word	0x08005b38
 8000750:	08005b3c 	.word	0x08005b3c
 8000754:	08005b40 	.word	0x08005b40
 8000758:	08005b44 	.word	0x08005b44
 800075c:	08005b48 	.word	0x08005b48
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <OTM8009A_Init+0x490>)
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fb40 	bl	8000de8 <DSI_IO_WriteCmd>
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000768:	2d01      	cmp	r5, #1
 800076a:	f47f af48 	bne.w	80005fe <OTM8009A_Init+0x2fa>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 800076e:	490a      	ldr	r1, [pc, #40]	; (8000798 <OTM8009A_Init+0x494>)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fb39 	bl	8000de8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000776:	4909      	ldr	r1, [pc, #36]	; (800079c <OTM8009A_Init+0x498>)
 8000778:	2004      	movs	r0, #4
 800077a:	f000 fb35 	bl	8000de8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <OTM8009A_Init+0x49c>)
 8000780:	2004      	movs	r0, #4
 8000782:	f000 fb31 	bl	8000de8 <DSI_IO_WriteCmd>
 8000786:	e73a      	b.n	80005fe <OTM8009A_Init+0x2fa>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000788:	4620      	mov	r0, r4
 800078a:	4906      	ldr	r1, [pc, #24]	; (80007a4 <OTM8009A_Init+0x4a0>)
 800078c:	f000 fb2c 	bl	8000de8 <DSI_IO_WriteCmd>
    break;
 8000790:	e732      	b.n	80005f8 <OTM8009A_Init+0x2f4>
 8000792:	bf00      	nop
 8000794:	08005b18 	.word	0x08005b18
 8000798:	08005b20 	.word	0x08005b20
 800079c:	08005b24 	.word	0x08005b24
 80007a0:	08005b2c 	.word	0x08005b2c
 80007a4:	08005b1c 	.word	0x08005b1c

080007a8 <I2C1_Init.part.1>:
}

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	b089      	sub	sp, #36	; 0x24
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 80007ac:	4e2c      	ldr	r6, [pc, #176]	; (8000860 <I2C1_Init.part.1+0xb8>)
{
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
  {
    heval_I2c1.Instance = I2C1;
 80007ae:	4d2d      	ldr	r5, [pc, #180]	; (8000864 <I2C1_Init.part.1+0xbc>)
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007b0:	4f2d      	ldr	r7, [pc, #180]	; (8000868 <I2C1_Init.part.1+0xc0>)
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <I2C1_Init.part.1+0xc4>)
    heval_I2c1.Instance = I2C1;
 80007b4:	492e      	ldr	r1, [pc, #184]	; (8000870 <I2C1_Init.part.1+0xc8>)
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80007b6:	2400      	movs	r4, #0
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 80007b8:	9401      	str	r4, [sp, #4]
 80007ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80007bc:	65ec      	str	r4, [r5, #92]	; 0x5c
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	6333      	str	r3, [r6, #48]	; 0x30
 80007c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 80007c6:	65aa      	str	r2, [r5, #88]	; 0x58
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	9301      	str	r3, [sp, #4]
    heval_I2c1.Init.OwnAddress1     = 0;
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d2:	666b      	str	r3, [r5, #100]	; 0x64
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 80007d4:	f44f 7280 	mov.w	r2, #256	; 0x100
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80007d8:	2312      	movs	r3, #18
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007da:	4638      	mov	r0, r7
    heval_I2c1.Instance = I2C1;
 80007dc:	6569      	str	r1, [r5, #84]	; 0x54
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 80007de:	9203      	str	r2, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007e0:	a903      	add	r1, sp, #12
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80007e2:	2202      	movs	r2, #2
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80007e4:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 80007e6:	2304      	movs	r3, #4
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 80007e8:	f8dd c004 	ldr.w	ip, [sp, #4]
    heval_I2c1.Init.OwnAddress1     = 0;
 80007ec:	662c      	str	r4, [r5, #96]	; 0x60
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 80007ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80007f2:	9405      	str	r4, [sp, #20]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    heval_I2c1.Init.OwnAddress2     = 0;
 80007f4:	e9c5 441a 	strd	r4, r4, [r5, #104]	; 0x68
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80007f8:	e9c5 441c 	strd	r4, r4, [r5, #112]	; 0x70
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007fc:	f001 fea0 	bl	8002540 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000800:	a903      	add	r1, sp, #12
 8000802:	4638      	mov	r0, r7
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800080a:	f001 fe99 	bl	8002540 <HAL_GPIO_Init>
  DISCO_I2C1_CLK_ENABLE();
 800080e:	9402      	str	r4, [sp, #8]
 8000810:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000816:	6433      	str	r3, [r6, #64]	; 0x40
 8000818:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800081a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081e:	9302      	str	r3, [sp, #8]
 8000820:	9b02      	ldr	r3, [sp, #8]
  DISCO_I2C1_FORCE_RESET();
 8000822:	6a33      	ldr	r3, [r6, #32]
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	6233      	str	r3, [r6, #32]
  DISCO_I2C1_RELEASE_RESET();
 800082a:	6a33      	ldr	r3, [r6, #32]
 800082c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000830:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 8000832:	4622      	mov	r2, r4
 8000834:	2105      	movs	r1, #5
 8000836:	201f      	movs	r0, #31
 8000838:	f001 f8a2 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 800083c:	201f      	movs	r0, #31
 800083e:	f001 f8d5 	bl	80019ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 8000842:	4622      	mov	r2, r4
 8000844:	2105      	movs	r1, #5
 8000846:	2020      	movs	r0, #32
 8000848:	f001 f89a 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 800084c:	2020      	movs	r0, #32
 800084e:	f001 f8cd 	bl	80019ec <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2C1_MspInit();
    HAL_I2C_Init(&heval_I2c1);
 8000852:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8000856:	f002 f9b1 	bl	8002bbc <HAL_I2C_Init>
  }
}
 800085a:	b009      	add	sp, #36	; 0x24
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	20000088 	.word	0x20000088
 8000868:	40020400 	.word	0x40020400
 800086c:	00061a80 	.word	0x00061a80
 8000870:	40005400 	.word	0x40005400

08000874 <EEPROM_IO_Init>:

/**
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  */
void EEPROM_IO_Init(void)
{
 8000874:	b508      	push	{r3, lr}
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <EEPROM_IO_Init+0x14>)
 8000878:	f002 fd94 	bl	80033a4 <HAL_I2C_GetState>
 800087c:	b100      	cbz	r0, 8000880 <EEPROM_IO_Init+0xc>
  I2C1_Init();
}
 800087e:	bd08      	pop	{r3, pc}
 8000880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000884:	f7ff bf90 	b.w	80007a8 <I2C1_Init.part.1>
 8000888:	200000dc 	.word	0x200000dc

0800088c <EEPROM_IO_IsDeviceReady>:
  return (HAL_I2C_IsDeviceReady(&heval_I2c1, DevAddress, Trials, 1000));
 800088c:	460a      	mov	r2, r1
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	4601      	mov	r1, r0
 8000894:	4801      	ldr	r0, [pc, #4]	; (800089c <EEPROM_IO_IsDeviceReady+0x10>)
 8000896:	f002 bc91 	b.w	80031bc <HAL_I2C_IsDeviceReady>
 800089a:	bf00      	nop
 800089c:	200000dc 	.word	0x200000dc

080008a0 <TS_IO_Init>:
 80008a0:	b508      	push	{r3, lr}
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <TS_IO_Init+0x14>)
 80008a4:	f002 fd7e 	bl	80033a4 <HAL_I2C_GetState>
 80008a8:	b100      	cbz	r0, 80008ac <TS_IO_Init+0xc>
 80008aa:	bd08      	pop	{r3, pc}
 80008ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80008b0:	f7ff bf7a 	b.w	80007a8 <I2C1_Init.part.1>
 80008b4:	200000dc 	.word	0x200000dc

080008b8 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	b087      	sub	sp, #28
 80008bc:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 80008be:	2564      	movs	r5, #100	; 0x64
 80008c0:	f804 2d01 	strb.w	r2, [r4, #-1]!
 80008c4:	2301      	movs	r3, #1
 80008c6:	460a      	mov	r2, r1
 80008c8:	9400      	str	r4, [sp, #0]
 80008ca:	4601      	mov	r1, r0
 80008cc:	9502      	str	r5, [sp, #8]
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <TS_IO_Write+0x3c>)
 80008d2:	f002 fa05 	bl	8002ce0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80008d6:	b908      	cbnz	r0, 80008dc <TS_IO_Write+0x24>
  I2C1_Write(Addr, Reg, Value);
}
 80008d8:	b007      	add	sp, #28
 80008da:	bd30      	pop	{r4, r5, pc}
  HAL_I2C_DeInit(&heval_I2c1);
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <TS_IO_Write+0x3c>)
 80008de:	f002 f9e5 	bl	8002cac <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <TS_IO_Write+0x3c>)
 80008e4:	f002 fd5e 	bl	80033a4 <HAL_I2C_GetState>
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d1f5      	bne.n	80008d8 <TS_IO_Write+0x20>
 80008ec:	f7ff ff5c 	bl	80007a8 <I2C1_Init.part.1>
}
 80008f0:	b007      	add	sp, #28
 80008f2:	bd30      	pop	{r4, r5, pc}
 80008f4:	200000dc 	.word	0x200000dc

080008f8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80008f8:	b530      	push	{r4, r5, lr}
 80008fa:	b087      	sub	sp, #28
  uint8_t Value = 0;
 80008fc:	ac06      	add	r4, sp, #24
 80008fe:	2300      	movs	r3, #0
 8000900:	f804 3d01 	strb.w	r3, [r4, #-1]!
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8000904:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000908:	2301      	movs	r3, #1
 800090a:	460a      	mov	r2, r1
 800090c:	9400      	str	r4, [sp, #0]
 800090e:	4601      	mov	r1, r0
 8000910:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <TS_IO_Read+0x48>)
 8000916:	f002 facd 	bl	8002eb4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800091a:	b918      	cbnz	r0, 8000924 <TS_IO_Read+0x2c>
  return I2C1_Read(Addr, Reg);
}
 800091c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000920:	b007      	add	sp, #28
 8000922:	bd30      	pop	{r4, r5, pc}
  HAL_I2C_DeInit(&heval_I2c1);
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <TS_IO_Read+0x48>)
 8000926:	f002 f9c1 	bl	8002cac <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <TS_IO_Read+0x48>)
 800092c:	f002 fd3a 	bl	80033a4 <HAL_I2C_GetState>
 8000930:	2800      	cmp	r0, #0
 8000932:	d1f3      	bne.n	800091c <TS_IO_Read+0x24>
 8000934:	f7ff ff38 	bl	80007a8 <I2C1_Init.part.1>
}
 8000938:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800093c:	b007      	add	sp, #28
 800093e:	bd30      	pop	{r4, r5, pc}
 8000940:	200000dc 	.word	0x200000dc

08000944 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000944:	b510      	push	{r4, lr}
 8000946:	b084      	sub	sp, #16
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8000948:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800094c:	e9cd 2300 	strd	r2, r3, [sp]
 8000950:	9402      	str	r4, [sp, #8]
 8000952:	460a      	mov	r2, r1
 8000954:	2301      	movs	r3, #1
 8000956:	4601      	mov	r1, r0
 8000958:	480a      	ldr	r0, [pc, #40]	; (8000984 <TS_IO_ReadMultiple+0x40>)
 800095a:	f002 faab 	bl	8002eb4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800095e:	4604      	mov	r4, r0
 8000960:	b910      	cbnz	r0, 8000968 <TS_IO_ReadMultiple+0x24>
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8000962:	4620      	mov	r0, r4
 8000964:	b004      	add	sp, #16
 8000966:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(&heval_I2c1);
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <TS_IO_ReadMultiple+0x40>)
 800096a:	f002 f99f 	bl	8002cac <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <TS_IO_ReadMultiple+0x40>)
 8000970:	f002 fd18 	bl	80033a4 <HAL_I2C_GetState>
 8000974:	2800      	cmp	r0, #0
 8000976:	d1f4      	bne.n	8000962 <TS_IO_ReadMultiple+0x1e>
 8000978:	f7ff ff16 	bl	80007a8 <I2C1_Init.part.1>
}
 800097c:	4620      	mov	r0, r4
 800097e:	b004      	add	sp, #16
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	200000dc 	.word	0x200000dc

08000988 <OTM8009A_IO_Delay>:
 8000988:	f000 bfd6 	b.w	8001938 <HAL_Delay>

0800098c <BSP_EEPROM_Init>:
  *             and if problem, check the 2nd one (EEPROM_I2C_ADDRESS_A02)
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0)
  */
uint32_t BSP_EEPROM_Init(void)
{ 
 800098c:	b510      	push	{r4, lr}
  /* I2C Initialization */
  EEPROM_IO_Init();
  
  /* Select the EEPROM address for A01 and check if OK */
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 800098e:	4c0b      	ldr	r4, [pc, #44]	; (80009bc <BSP_EEPROM_Init+0x30>)
  EEPROM_IO_Init();
 8000990:	f7ff ff70 	bl	8000874 <EEPROM_IO_Init>
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 8000994:	23a0      	movs	r3, #160	; 0xa0
 8000996:	8023      	strh	r3, [r4, #0]
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 8000998:	8820      	ldrh	r0, [r4, #0]
 800099a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800099e:	f7ff ff75 	bl	800088c <EEPROM_IO_IsDeviceReady>
 80009a2:	b900      	cbnz	r0, 80009a6 <BSP_EEPROM_Init+0x1a>
    {
      return EEPROM_FAIL;
    }
  }
  return EEPROM_OK;
}
 80009a4:	bd10      	pop	{r4, pc}
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 80009a6:	23a6      	movs	r3, #166	; 0xa6
 80009a8:	8023      	strh	r3, [r4, #0]
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 80009aa:	8820      	ldrh	r0, [r4, #0]
 80009ac:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80009b0:	f7ff ff6c 	bl	800088c <EEPROM_IO_IsDeviceReady>
 80009b4:	3000      	adds	r0, #0
 80009b6:	bf18      	it	ne
 80009b8:	2001      	movne	r0, #1
}
 80009ba:	bd10      	pop	{r4, pc}
 80009bc:	20000130 	.word	0x20000130

080009c0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80009c0:	b570      	push	{r4, r5, r6, lr}
  return (lcd_x_size);
 80009c2:	4c17      	ldr	r4, [pc, #92]	; (8000a20 <BSP_LCD_LayerDefaultInit+0x60>)
{
 80009c4:	b08e      	sub	sp, #56	; 0x38
 80009c6:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
  Layercfg.WindowY0 = 0;
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  Layercfg.FBStartAdress = FB_Address;
 80009c8:	910a      	str	r1, [sp, #40]	; 0x28
  return (lcd_y_size);
 80009ca:	e9d4 3100 	ldrd	r3, r1, [r4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80009ce:	9302      	str	r3, [sp, #8]
  Layercfg.Backcolor.Blue = 0;
  Layercfg.Backcolor.Green = 0;
  Layercfg.Backcolor.Red = 0;
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80009d0:	930b      	str	r3, [sp, #44]	; 0x2c
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80009d2:	9104      	str	r1, [sp, #16]
  Layercfg.WindowX0 = 0;
 80009d4:	2300      	movs	r3, #0
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80009d6:	910c      	str	r1, [sp, #48]	; 0x30
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80009dc:	462a      	mov	r2, r5
  Layercfg.WindowX0 = 0;
 80009de:	9301      	str	r3, [sp, #4]
  Layercfg.WindowY0 = 0;
 80009e0:	9303      	str	r3, [sp, #12]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009e2:	9305      	str	r3, [sp, #20]
  Layercfg.Alpha0 = 0;
 80009e4:	9307      	str	r3, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 80009e6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 80009ea:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ee:	9108      	str	r1, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f0:	2307      	movs	r3, #7
  Layercfg.Alpha = 255;
 80009f2:	26ff      	movs	r6, #255	; 0xff
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80009f4:	a901      	add	r1, sp, #4
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <BSP_LCD_LayerDefaultInit+0x64>)
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f8:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.Alpha = 255;
 80009fa:	9606      	str	r6, [sp, #24]
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80009fc:	f002 fd48 	bl	8003490 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <BSP_LCD_LayerDefaultInit+0x68>)
 8000a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a06:	eb00 0085 	add.w	r0, r0, r5, lsl #2
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a0a:	3408      	adds	r4, #8
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a10:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a14:	e9c0 2402 	strd	r2, r4, [r0, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a18:	6043      	str	r3, [r0, #4]
}
 8000a1a:	b00e      	add	sp, #56	; 0x38
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000028 	.word	0x20000028
 8000a24:	200004b4 	.word	0x200004b4
 8000a28:	20000134 	.word	0x20000134

08000a2c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 8000a2c:	4b01      	ldr	r3, [pc, #4]	; (8000a34 <BSP_LCD_SelectLayer+0x8>)
 8000a2e:	6018      	str	r0, [r3, #0]
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000134 	.word	0x20000134

08000a38 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <BSP_LCD_SetTextColor+0x10>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a44:	6058      	str	r0, [r3, #4]
}
 8000a46:	4770      	bx	lr
 8000a48:	20000134 	.word	0x20000134

08000a4c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[ActiveLayer].BackColor = Color;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <BSP_LCD_SetBackColor+0x10>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a58:	6098      	str	r0, [r3, #8]
}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000134 	.word	0x20000134

08000a60 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <BSP_LCD_SetFont+0x10>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a6c:	60d8      	str	r0, [r3, #12]
}
 8000a6e:	4770      	bx	lr
 8000a70:	20000134 	.word	0x20000134

08000a74 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <BSP_LCD_Clear+0x6c>)
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8000a7a:	4c1a      	ldr	r4, [pc, #104]	; (8000ae4 <BSP_LCD_Clear+0x70>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a7c:	491a      	ldr	r1, [pc, #104]	; (8000ae8 <BSP_LCD_Clear+0x74>)
 8000a7e:	681e      	ldr	r6, [r3, #0]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
  hdma2d_eval.Init.OutputOffset = OffLine;

  hdma2d_eval.Instance = DMA2D;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <BSP_LCD_Clear+0x78>)
 8000a82:	6023      	str	r3, [r4, #0]
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a84:	2334      	movs	r3, #52	; 0x34
 8000a86:	fb03 1306 	mla	r3, r3, r6, r1
  return (lcd_x_size);
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <BSP_LCD_Clear+0x7c>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a8c:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8000a90:	2500      	movs	r5, #0
{
 8000a92:	b083      	sub	sp, #12
 8000a94:	4607      	mov	r7, r0
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8000a96:	f44f 3140 	mov.w	r1, #196608	; 0x30000

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000a9a:	4620      	mov	r0, r4
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8000a9c:	e9c4 1501 	strd	r1, r5, [r4, #4]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8000aa0:	60e5      	str	r5, [r4, #12]
  return (lcd_y_size);
 8000aa2:	e9d2 5900 	ldrd	r5, r9, [r2]
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000aa6:	f001 f8f9 	bl	8001c9c <HAL_DMA2D_Init>
 8000aaa:	b110      	cbz	r0, 8000ab2 <BSP_LCD_Clear+0x3e>
}
 8000aac:	b003      	add	sp, #12
 8000aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8000ab2:	4631      	mov	r1, r6
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f001 fa13 	bl	8001ee0 <HAL_DMA2D_ConfigLayer>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d1f6      	bne.n	8000aac <BSP_LCD_Clear+0x38>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000abe:	f8cd 9000 	str.w	r9, [sp]
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	4639      	mov	r1, r7
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f001 f915 	bl	8001cf8 <HAL_DMA2D_Start>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d1ec      	bne.n	8000aac <BSP_LCD_Clear+0x38>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	210a      	movs	r1, #10
}
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000adc:	f001 b96a 	b.w	8001db4 <HAL_DMA2D_PollForTransfer>
 8000ae0:	20000134 	.word	0x20000134
 8000ae4:	20000578 	.word	0x20000578
 8000ae8:	200004b4 	.word	0x200004b4
 8000aec:	4002b000 	.word	0x4002b000
 8000af0:	20000028 	.word	0x20000028

08000af4 <BSP_LCD_DisplayChar>:
{
 8000af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000af8:	4c37      	ldr	r4, [pc, #220]	; (8000bd8 <BSP_LCD_DisplayChar+0xe4>)
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8000b00:	eb04 0888 	add.w	r8, r4, r8, lsl #2
{
 8000b04:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b06:	f8d8 400c 	ldr.w	r4, [r8, #12]
{
 8000b0a:	9104      	str	r1, [sp, #16]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b0c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8000b10:	88e6      	ldrh	r6, [r4, #6]
 8000b12:	9603      	str	r6, [sp, #12]
 8000b14:	f10e 0507 	add.w	r5, lr, #7
 8000b18:	10ef      	asrs	r7, r5, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b1a:	3a20      	subs	r2, #32
  offset =  8 *((width + 7)/8) -  width ;
 8000b1c:	ebce 05c7 	rsb	r5, lr, r7, lsl #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b20:	fb06 f202 	mul.w	r2, r6, r2
  offset =  8 *((width + 7)/8) -  width ;
 8000b24:	b2e9      	uxtb	r1, r5
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b26:	6824      	ldr	r4, [r4, #0]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b28:	9702      	str	r7, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 8000b2a:	9105      	str	r1, [sp, #20]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b2c:	fb07 f202 	mul.w	r2, r7, r2
  for(i = 0; i < height; i++)
 8000b30:	2e00      	cmp	r6, #0
 8000b32:	d046      	beq.n	8000bc2 <BSP_LCD_DisplayChar+0xce>
 8000b34:	4929      	ldr	r1, [pc, #164]	; (8000bdc <BSP_LCD_DisplayChar+0xe8>)
 8000b36:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8000be0 <BSP_LCD_DisplayChar+0xec>
 8000b3a:	f04f 0a34 	mov.w	sl, #52	; 0x34
 8000b3e:	18a2      	adds	r2, r4, r2
 8000b40:	fb0a 1a03 	mla	sl, sl, r3, r1
 8000b44:	2300      	movs	r3, #0
 8000b46:	4681      	mov	r9, r0
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	4670      	mov	r0, lr
 8000b4e:	9b04      	ldr	r3, [sp, #16]
 8000b50:	9a01      	ldr	r2, [sp, #4]
 8000b52:	189f      	adds	r7, r3, r2
 8000b54:	9b00      	ldr	r3, [sp, #0]
 8000b56:	781e      	ldrb	r6, [r3, #0]
    switch(((width + 7)/8))
 8000b58:	9b02      	ldr	r3, [sp, #8]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	b2bf      	uxth	r7, r7
 8000b5e:	d005      	beq.n	8000b6c <BSP_LCD_DisplayChar+0x78>
 8000b60:	2b02      	cmp	r3, #2
      line =  (pchar[0]<< 8) | pchar[1];
 8000b62:	9b00      	ldr	r3, [sp, #0]
    switch(((width + 7)/8))
 8000b64:	d130      	bne.n	8000bc8 <BSP_LCD_DisplayChar+0xd4>
      line =  (pchar[0]<< 8) | pchar[1];
 8000b66:	881e      	ldrh	r6, [r3, #0]
 8000b68:	ba76      	rev16	r6, r6
 8000b6a:	b2b6      	uxth	r6, r6
    for (j = 0; j < width; j++)
 8000b6c:	b1f8      	cbz	r0, 8000bae <BSP_LCD_DisplayChar+0xba>
 8000b6e:	9b05      	ldr	r3, [sp, #20]
 8000b70:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b74:	449c      	add	ip, r3
 8000b76:	2100      	movs	r1, #0
      if(line & (1 << (width- j + offset- 1)))
 8000b78:	f04f 0e01 	mov.w	lr, #1
 8000b7c:	eb09 0501 	add.w	r5, r9, r1
 8000b80:	f8db 2000 	ldr.w	r2, [fp]
 8000b84:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 8000b88:	ebac 0401 	sub.w	r4, ip, r1
 8000b8c:	fa0e f404 	lsl.w	r4, lr, r4
 8000b90:	b2ad      	uxth	r5, r5
 8000b92:	4234      	tst	r4, r6
 8000b94:	fb02 5207 	mla	r2, r2, r7, r5
    for (j = 0; j < width; j++)
 8000b98:	f101 0101 	add.w	r1, r1, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000b9c:	bf14      	ite	ne
 8000b9e:	f8d8 4004 	ldrne.w	r4, [r8, #4]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000ba2:	f8d8 4008 	ldreq.w	r4, [r8, #8]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    for (j = 0; j < width; j++)
 8000baa:	4288      	cmp	r0, r1
 8000bac:	d1e6      	bne.n	8000b7c <BSP_LCD_DisplayChar+0x88>
 8000bae:	9a00      	ldr	r2, [sp, #0]
 8000bb0:	9902      	ldr	r1, [sp, #8]
  for(i = 0; i < height; i++)
 8000bb2:	9b01      	ldr	r3, [sp, #4]
 8000bb4:	440a      	add	r2, r1
 8000bb6:	9200      	str	r2, [sp, #0]
 8000bb8:	9a03      	ldr	r2, [sp, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	d1c5      	bne.n	8000b4e <BSP_LCD_DisplayChar+0x5a>
}
 8000bc2:	b007      	add	sp, #28
 8000bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000bc8:	785a      	ldrb	r2, [r3, #1]
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	0436      	lsls	r6, r6, #16
 8000bce:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8000bd2:	431e      	orrs	r6, r3
 8000bd4:	e7ca      	b.n	8000b6c <BSP_LCD_DisplayChar+0x78>
 8000bd6:	bf00      	nop
 8000bd8:	20000134 	.word	0x20000134
 8000bdc:	200004b4 	.word	0x200004b4
 8000be0:	20000028 	.word	0x20000028

08000be4 <BSP_LCD_DisplayStringAt>:
{
 8000be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be8:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 8000bea:	7812      	ldrb	r2, [r2, #0]
{
 8000bec:	4604      	mov	r4, r0
 8000bee:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d044      	beq.n	8000c7e <BSP_LCD_DisplayStringAt+0x9a>
 8000bf4:	1c71      	adds	r1, r6, #1
 8000bf6:	1b8d      	subs	r5, r1, r6
 8000bf8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d1fa      	bne.n	8000bf6 <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c00:	4920      	ldr	r1, [pc, #128]	; (8000c84 <BSP_LCD_DisplayStringAt+0xa0>)
  return (lcd_x_size);
 8000c02:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000c88 <BSP_LCD_DisplayStringAt+0xa4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c06:	680f      	ldr	r7, [r1, #0]
  return (lcd_x_size);
 8000c08:	f8d9 0000 	ldr.w	r0, [r9]
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8000c10:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  switch (Mode)
 8000c14:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c16:	68cf      	ldr	r7, [r1, #12]
 8000c18:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 8000c1c:	fbb0 f1fc 	udiv	r1, r0, ip
  switch (Mode)
 8000c20:	d026      	beq.n	8000c70 <BSP_LCD_DisplayStringAt+0x8c>
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d01e      	beq.n	8000c64 <BSP_LCD_DisplayStringAt+0x80>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000c26:	b223      	sxth	r3, r4
    refcolumn = 1;
 8000c28:	2b00      	cmp	r3, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c2a:	b280      	uxth	r0, r0
    refcolumn = 1;
 8000c2c:	bfd8      	it	le
 8000c2e:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c30:	4584      	cmp	ip, r0
 8000c32:	d815      	bhi.n	8000c60 <BSP_LCD_DisplayStringAt+0x7c>
 8000c34:	b1a2      	cbz	r2, 8000c60 <BSP_LCD_DisplayStringAt+0x7c>
 8000c36:	4635      	mov	r5, r6
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4641      	mov	r1, r8
 8000c3c:	f7ff ff5a 	bl	8000af4 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c40:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c44:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c46:	f8d9 1000 	ldr.w	r1, [r9]
 8000c4a:	1bab      	subs	r3, r5, r6
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	fb00 1313 	mls	r3, r0, r3, r1
 8000c52:	b29b      	uxth	r3, r3
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c54:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c56:	4283      	cmp	r3, r0
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c58:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c5a:	d301      	bcc.n	8000c60 <BSP_LCD_DisplayStringAt+0x7c>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d1eb      	bne.n	8000c38 <BSP_LCD_DisplayStringAt+0x54>
}
 8000c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000c64:	1b49      	subs	r1, r1, r5
 8000c66:	fb11 f10c 	smulbb	r1, r1, ip
 8000c6a:	1b0c      	subs	r4, r1, r4
 8000c6c:	b2a4      	uxth	r4, r4
      break;
 8000c6e:	e7da      	b.n	8000c26 <BSP_LCD_DisplayStringAt+0x42>
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000c70:	1b49      	subs	r1, r1, r5
 8000c72:	fb0c f101 	mul.w	r1, ip, r1
 8000c76:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8000c7a:	b2a4      	uxth	r4, r4
      break;
 8000c7c:	e7d3      	b.n	8000c26 <BSP_LCD_DisplayStringAt+0x42>
  uint32_t size = 0, xsize = 0;
 8000c7e:	4615      	mov	r5, r2
 8000c80:	e7be      	b.n	8000c00 <BSP_LCD_DisplayStringAt+0x1c>
 8000c82:	bf00      	nop
 8000c84:	20000134 	.word	0x20000134
 8000c88:	20000028 	.word	0x20000028

08000c8c <BSP_LCD_DrawCircle>:
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000c8c:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <BSP_LCD_DrawCircle+0x12c>)
 8000c8e:	f8df c130 	ldr.w	ip, [pc, #304]	; 8000dc0 <BSP_LCD_DrawCircle+0x134>
{
 8000c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000c96:	681e      	ldr	r6, [r3, #0]
 8000c98:	4f48      	ldr	r7, [pc, #288]	; (8000dbc <BSP_LCD_DrawCircle+0x130>)
 8000c9a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8000c9e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
{
 8000ca2:	b087      	sub	sp, #28
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000ca4:	f8d3 e004 	ldr.w	lr, [r3, #4]
  CurX = 0;
 8000ca8:	9101      	str	r1, [sp, #4]
  D = 3 - (Radius << 1);
 8000caa:	0053      	lsls	r3, r2, #1
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cac:	2534      	movs	r5, #52	; 0x34
  D = 3 - (Radius << 1);
 8000cae:	f1c3 0303 	rsb	r3, r3, #3
{
 8000cb2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8000cb6:	fa1f fb82 	uxth.w	fp, r2
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cba:	fb05 7606 	mla	r6, r5, r6, r7
  D = 3 - (Radius << 1);
 8000cbe:	9302      	str	r3, [sp, #8]
  CurX = 0;
 8000cc0:	f04f 0900 	mov.w	r9, #0
 8000cc4:	4672      	mov	r2, lr
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cc6:	9f05      	ldr	r7, [sp, #20]
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000cc8:	9c01      	ldr	r4, [sp, #4]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cca:	f8dc 1000 	ldr.w	r1, [ip]
 8000cce:	6df5      	ldr	r5, [r6, #92]	; 0x5c
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000cd0:	9703      	str	r7, [sp, #12]
 8000cd2:	fa1f f389 	uxth.w	r3, r9
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cd6:	eb07 0803 	add.w	r8, r7, r3
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000cda:	eba4 0e0b 	sub.w	lr, r4, fp
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000cde:	fa1f fe8e 	uxth.w	lr, lr
 8000ce2:	fa1f f888 	uxth.w	r8, r8
 8000ce6:	fb01 810e 	mla	r1, r1, lr, r8
 8000cea:	1af8      	subs	r0, r7, r3
 8000cec:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 8000cf0:	f8dc 5000 	ldr.w	r5, [ip]
 8000cf4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8000cf6:	b280      	uxth	r0, r0
 8000cf8:	fb05 050e 	mla	r5, r5, lr, r0
 8000cfc:	eba4 0a03 	sub.w	sl, r4, r3
 8000d00:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000d04:	4639      	mov	r1, r7
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d06:	f8dc 5000 	ldr.w	r5, [ip]
 8000d0a:	6df7      	ldr	r7, [r6, #92]	; 0x5c
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000d0c:	4459      	add	r1, fp
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d0e:	fa1f fa8a 	uxth.w	sl, sl
 8000d12:	b289      	uxth	r1, r1
 8000d14:	fb05 150a 	mla	r5, r5, sl, r1
 8000d18:	4423      	add	r3, r4
 8000d1a:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000d1e:	9f03      	ldr	r7, [sp, #12]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d20:	6df5      	ldr	r5, [r6, #92]	; 0x5c
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000d22:	eba7 0e0b 	sub.w	lr, r7, fp
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d26:	f8dc 7000 	ldr.w	r7, [ip]
 8000d2a:	fa1f fe8e 	uxth.w	lr, lr
 8000d2e:	fb07 e70a 	mla	r7, r7, sl, lr
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	f845 2027 	str.w	r2, [r5, r7, lsl #2]
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8000d38:	eb04 070b 	add.w	r7, r4, fp
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d3c:	f8dc 5000 	ldr.w	r5, [ip]
 8000d40:	6df4      	ldr	r4, [r6, #92]	; 0x5c
 8000d42:	b2bf      	uxth	r7, r7
 8000d44:	fb05 8807 	mla	r8, r5, r7, r8
      D += ((CurX - CurY) << 2) + 10;
 8000d48:	9d04      	ldr	r5, [sp, #16]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d4a:	f844 2028 	str.w	r2, [r4, r8, lsl #2]
 8000d4e:	f8dc 4000 	ldr.w	r4, [ip]
 8000d52:	fb04 0007 	mla	r0, r4, r7, r0
 8000d56:	6df4      	ldr	r4, [r6, #92]	; 0x5c
      D += ((CurX - CurY) << 2) + 10;
 8000d58:	9f02      	ldr	r7, [sp, #8]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d5a:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 8000d5e:	f8dc 4000 	ldr.w	r4, [ip]
 8000d62:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8000d64:	fb04 1103 	mla	r1, r4, r3, r1
      D += ((CurX - CurY) << 2) + 10;
 8000d68:	eba9 0505 	sub.w	r5, r9, r5
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d6c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 8000d70:	f8dc 0000 	ldr.w	r0, [ip]
 8000d74:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8000d76:	fb00 e303 	mla	r3, r0, r3, lr
      D += ((CurX - CurY) << 2) + 10;
 8000d7a:	370a      	adds	r7, #10
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if (D < 0)
 8000d80:	9b02      	ldr	r3, [sp, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0c      	blt.n	8000da0 <BSP_LCD_DrawCircle+0x114>
      CurY--;
 8000d86:	9b04      	ldr	r3, [sp, #16]
    CurX++;
 8000d88:	f109 0901 	add.w	r9, r9, #1
      CurY--;
 8000d8c:	3b01      	subs	r3, #1
      D += ((CurX - CurY) << 2) + 10;
 8000d8e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
  while (CurX <= CurY)
 8000d92:	4599      	cmp	r9, r3
      CurY--;
 8000d94:	9304      	str	r3, [sp, #16]
      D += ((CurX - CurY) << 2) + 10;
 8000d96:	9102      	str	r1, [sp, #8]
  while (CurX <= CurY)
 8000d98:	d80b      	bhi.n	8000db2 <BSP_LCD_DrawCircle+0x126>
 8000d9a:	fa1f fb83 	uxth.w	fp, r3
 8000d9e:	e792      	b.n	8000cc6 <BSP_LCD_DrawCircle+0x3a>
      D += (CurX << 2) + 6;
 8000da0:	3306      	adds	r3, #6
 8000da2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8000da6:	9302      	str	r3, [sp, #8]
  while (CurX <= CurY)
 8000da8:	9b04      	ldr	r3, [sp, #16]
    CurX++;
 8000daa:	f109 0901 	add.w	r9, r9, #1
  while (CurX <= CurY)
 8000dae:	454b      	cmp	r3, r9
 8000db0:	d289      	bcs.n	8000cc6 <BSP_LCD_DrawCircle+0x3a>
}
 8000db2:	b007      	add	sp, #28
 8000db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000db8:	20000134 	.word	0x20000134
 8000dbc:	200004b4 	.word	0x200004b4
 8000dc0:	20000028 	.word	0x20000028

08000dc4 <BSP_LCD_DisplayOn>:
{
 8000dc4:	b500      	push	{lr}
  HAL_DSI_ShortWrite(&(hdsi_eval),
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <BSP_LCD_DisplayOn+0x1c>)
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <BSP_LCD_DisplayOn+0x20>)
 8000dca:	69d9      	ldr	r1, [r3, #28]
{
 8000dcc:	b083      	sub	sp, #12
  HAL_DSI_ShortWrite(&(hdsi_eval),
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2215      	movs	r2, #21
 8000dd4:	2329      	movs	r3, #41	; 0x29
 8000dd6:	f001 fb1b 	bl	8002410 <HAL_DSI_ShortWrite>
}
 8000dda:	b003      	add	sp, #12
 8000ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000de0:	20000134 	.word	0x20000134
 8000de4:	2000055c 	.word	0x2000055c

08000de8 <DSI_IO_WriteCmd>:
{
 8000de8:	b500      	push	{lr}
  if(NbrParams <= 1)
 8000dea:	2801      	cmp	r0, #1
{
 8000dec:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8000dee:	d90b      	bls.n	8000e08 <DSI_IO_WriteCmd+0x20>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000df0:	5c0b      	ldrb	r3, [r1, r0]
 8000df2:	2239      	movs	r2, #57	; 0x39
 8000df4:	e9cd 3100 	strd	r3, r1, [sp]
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <DSI_IO_WriteCmd+0x38>)
 8000dfe:	f001 fb35 	bl	800246c <HAL_DSI_LongWrite>
}
 8000e02:	b003      	add	sp, #12
 8000e04:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000e08:	784a      	ldrb	r2, [r1, #1]
 8000e0a:	780b      	ldrb	r3, [r1, #0]
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <DSI_IO_WriteCmd+0x38>)
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	2100      	movs	r1, #0
 8000e12:	2215      	movs	r2, #21
 8000e14:	f001 fafc 	bl	8002410 <HAL_DSI_ShortWrite>
}
 8000e18:	b003      	add	sp, #12
 8000e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e1e:	bf00      	nop
 8000e20:	2000055c 	.word	0x2000055c

08000e24 <BSP_LCD_MspInit>:
{
 8000e24:	b510      	push	{r4, lr}
 8000e26:	b084      	sub	sp, #16
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <BSP_LCD_MspInit+0xac>)
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	9401      	str	r4, [sp, #4]
 8000e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e30:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
 8000e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e38:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000e3c:	9201      	str	r2, [sp, #4]
 8000e3e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e50:	9402      	str	r4, [sp, #8]
 8000e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000e60:	9202      	str	r2, [sp, #8]
 8000e62:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e6a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000e72:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000e74:	9403      	str	r4, [sp, #12]
 8000e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e78:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
 8000e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e80:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000e84:	9203      	str	r2, [sp, #12]
 8000e86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e92:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000e98:	2103      	movs	r1, #3
 8000e9a:	4622      	mov	r2, r4
 8000e9c:	2058      	movs	r0, #88	; 0x58
 8000e9e:	f000 fd6f 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ea2:	2058      	movs	r0, #88	; 0x58
 8000ea4:	f000 fda2 	bl	80019ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	2103      	movs	r1, #3
 8000eac:	205a      	movs	r0, #90	; 0x5a
 8000eae:	f000 fd67 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eb2:	205a      	movs	r0, #90	; 0x5a
 8000eb4:	f000 fd9a 	bl	80019ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000eb8:	4622      	mov	r2, r4
 8000eba:	2103      	movs	r1, #3
 8000ebc:	205c      	movs	r0, #92	; 0x5c
 8000ebe:	f000 fd5f 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000ec2:	205c      	movs	r0, #92	; 0x5c
}
 8000ec4:	b004      	add	sp, #16
 8000ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000eca:	f000 bd8f 	b.w	80019ec <HAL_NVIC_EnableIRQ>
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <BSP_LCD_InitEx>:
{
 8000ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	2500      	movs	r5, #0
 8000edc:	4b73      	ldr	r3, [pc, #460]	; (80010ac <BSP_LCD_InitEx+0x1d8>)
 8000ede:	9502      	str	r5, [sp, #8]
 8000ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hdsi_eval.Instance = DSI;
 8000ee2:	4f73      	ldr	r7, [pc, #460]	; (80010b0 <BSP_LCD_InitEx+0x1dc>)
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000ee4:	4c73      	ldr	r4, [pc, #460]	; (80010b4 <BSP_LCD_InitEx+0x1e0>)
 8000ee6:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80010c8 <BSP_LCD_InitEx+0x1f4>
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8000eea:	4e73      	ldr	r6, [pc, #460]	; (80010b8 <BSP_LCD_InitEx+0x1e4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ef4:	9508      	str	r5, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
{
 8000efa:	4681      	mov	r9, r0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efc:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8000efe:	f04f 0a80 	mov.w	sl, #128	; 0x80
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000f02:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000f04:	a906      	add	r1, sp, #24
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8000f06:	2211      	movs	r2, #17
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000f08:	486c      	ldr	r0, [pc, #432]	; (80010bc <BSP_LCD_InitEx+0x1e8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	f8dd c008 	ldr.w	ip, [sp, #8]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000f0e:	9309      	str	r3, [sp, #36]	; 0x24
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8000f10:	e9cd a206 	strd	sl, r2, [sp, #24]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000f14:	f001 fb14 	bl	8002540 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f18:	462a      	mov	r2, r5
 8000f1a:	4651      	mov	r1, sl
 8000f1c:	4867      	ldr	r0, [pc, #412]	; (80010bc <BSP_LCD_InitEx+0x1e8>)
 8000f1e:	f001 fc53 	bl	80027c8 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000f22:	2014      	movs	r0, #20
 8000f24:	f000 fd08 	bl	8001938 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8000f28:	4651      	mov	r1, sl
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4863      	ldr	r0, [pc, #396]	; (80010bc <BSP_LCD_InitEx+0x1e8>)
 8000f2e:	f001 fc4b 	bl	80027c8 <HAL_GPIO_WritePin>
    HAL_Delay(10);    
 8000f32:	200a      	movs	r0, #10
 8000f34:	f000 fd00 	bl	8001938 <HAL_Delay>
  BSP_LCD_MspInit();
 8000f38:	f7ff ff74 	bl	8000e24 <BSP_LCD_MspInit>
  hdsi_eval.Instance = DSI;
 8000f3c:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <BSP_LCD_InitEx+0x1ec>)
 8000f3e:	603b      	str	r3, [r7, #0]
  HAL_DSI_DeInit(&(hdsi_eval));
 8000f40:	4638      	mov	r0, r7
 8000f42:	f001 f8d9 	bl	80020f8 <HAL_DSI_DeInit>
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000f46:	f04f 0b01 	mov.w	fp, #1
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8000f4a:	2202      	movs	r2, #2
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000f4c:	f04f 0a04 	mov.w	sl, #4
  dsiPllInit.PLLNDIV  = 125;
 8000f50:	237d      	movs	r3, #125	; 0x7d
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000f52:	a903      	add	r1, sp, #12
 8000f54:	4638      	mov	r0, r7
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000f56:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  dsiPllInit.PLLNDIV  = 125;
 8000f5a:	9303      	str	r3, [sp, #12]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8000f5c:	9204      	str	r2, [sp, #16]
 8000f5e:	9201      	str	r2, [sp, #4]
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8000f60:	9505      	str	r5, [sp, #20]
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000f62:	f001 f825 	bl	8001fb0 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000f66:	45a9      	cmp	r9, r5
 8000f68:	f240 73be 	movw	r3, #1982	; 0x7be
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000f6c:	9a01      	ldr	r2, [sp, #4]
 8000f6e:	62a2      	str	r2, [r4, #40]	; 0x28
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000f70:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8000f74:	bf18      	it	ne
 8000f76:	4619      	movne	r1, r3
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000f78:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8000f7a:	f04f 004d 	mov.w	r0, #77	; 0x4d
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000f7e:	f640 71ff 	movw	r1, #4095	; 0xfff
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000f82:	f04f 020f 	mov.w	r2, #15
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000f86:	6361      	str	r1, [r4, #52]	; 0x34
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8000f88:	64a0      	str	r0, [r4, #72]	; 0x48
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000f8a:	6562      	str	r2, [r4, #84]	; 0x54
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000f90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000f98:	6621      	str	r1, [r4, #96]	; 0x60
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000f9a:	66e0      	str	r0, [r4, #108]	; 0x6c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000f9c:	6722      	str	r2, [r4, #112]	; 0x70
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000f9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000faa:	f104 031c 	add.w	r3, r4, #28
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000fae:	67a0      	str	r0, [r4, #120]	; 0x78
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000fb0:	67e2      	str	r2, [r4, #124]	; 0x7c
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000fb2:	bf0b      	itete	eq
 8000fb4:	f44f 7048 	moveq.w	r0, #800	; 0x320
 8000fb8:	f44f 70f0 	movne.w	r0, #480	; 0x1e0
 8000fbc:	f44f 72f0 	moveq.w	r2, #480	; 0x1e0
 8000fc0:	f44f 7248 	movne.w	r2, #800	; 0x320
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000fc4:	6761      	str	r1, [r4, #116]	; 0x74
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000fca:	f04f 0c05 	mov.w	ip, #5
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000fce:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000fd2:	65e0      	str	r0, [r4, #92]	; 0x5c
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f8c8 0004 	str.w	r0, [r8, #4]
 8000fda:	f8c8 2000 	str.w	r2, [r8]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000fde:	62e2      	str	r2, [r4, #44]	; 0x2c
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000fe0:	4638      	mov	r0, r7
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000fe2:	2210      	movs	r2, #16
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000fe4:	f8c4 c020 	str.w	ip, [r4, #32]
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000fe8:	9301      	str	r3, [sp, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000fea:	61e5      	str	r5, [r4, #28]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000fec:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000ff0:	6425      	str	r5, [r4, #64]	; 0x40
  hdsivideo_handle.NumberOfChunks = 0;
 8000ff2:	6325      	str	r5, [r4, #48]	; 0x30
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8000ff4:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000ff8:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000ffc:	f04f 0a23 	mov.w	sl, #35	; 0x23
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001000:	66a5      	str	r5, [r4, #104]	; 0x68
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001002:	65a2      	str	r2, [r4, #88]	; 0x58
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001004:	6662      	str	r2, [r4, #100]	; 0x64
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8001006:	f001 f8a3 	bl	8002150 <HAL_DSI_ConfigVideoMode>
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800100a:	a906      	add	r1, sp, #24
  PhyTimings.StopWaitTime = 10;
 800100c:	220a      	movs	r2, #10
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800100e:	4638      	mov	r0, r7
  PhyTimings.StopWaitTime = 10;
 8001010:	920b      	str	r2, [sp, #44]	; 0x2c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001012:	950a      	str	r5, [sp, #40]	; 0x28
  PhyTimings.ClockLaneLP2HSTime = 35;
 8001014:	e9cd aa06 	strd	sl, sl, [sp, #24]
  PhyTimings.DataLaneLP2HSTime = 35;
 8001018:	e9cd aa08 	strd	sl, sl, [sp, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800101c:	f001 f9a2 	bl	8002364 <HAL_DSI_ConfigPhyTimer>
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001020:	f8d8 1000 	ldr.w	r1, [r8]
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8001024:	f8d8 3004 	ldr.w	r3, [r8, #4]
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8001028:	6631      	str	r1, [r6, #96]	; 0x60
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800102a:	f101 0045 	add.w	r0, r1, #69	; 0x45
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800102e:	eb01 0e0a 	add.w	lr, r1, sl
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001032:	f04f 0c08 	mov.w	ip, #8
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001036:	f44f 72c0 	mov.w	r2, #384	; 0x180
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800103a:	2107      	movs	r1, #7
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800103c:	62f0      	str	r0, [r6, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800103e:	f104 0088 	add.w	r0, r4, #136	; 0x88
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001042:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001046:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800104a:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800104e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8001052:	6673      	str	r3, [r6, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001054:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8001058:	f8c6 b014 	str.w	fp, [r6, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 800105c:	f8c6 a01c 	str.w	sl, [r6, #28]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001060:	f002 ffcc 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8001064:	9b01      	ldr	r3, [sp, #4]
  hltdc_eval.Init.Backcolor.Blue = 0;
 8001066:	86b5      	strh	r5, [r6, #52]	; 0x34
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8001068:	4619      	mov	r1, r3
 800106a:	4630      	mov	r0, r6
  hltdc_eval.Instance = LTDC;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <BSP_LCD_InitEx+0x1f0>)
 800106e:	6033      	str	r3, [r6, #0]
  hltdc_eval.Init.Backcolor.Green = 0;
 8001070:	f886 5036 	strb.w	r5, [r6, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001074:	6135      	str	r5, [r6, #16]
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8001076:	f002 fad1 	bl	800361c <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_eval);
 800107a:	4630      	mov	r0, r6
 800107c:	f002 f998 	bl	80033b0 <HAL_LTDC_Init>
  HAL_DSI_Start(&(hdsi_eval));
 8001080:	4638      	mov	r0, r7
 8001082:	f001 f9ad 	bl	80023e0 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8001086:	f000 fb63 	bl	8001750 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001090:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001094:	f108 0308 	add.w	r3, r8, #8
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001098:	4649      	mov	r1, r9
 800109a:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].pFont = fonts;
 800109c:	60e3      	str	r3, [r4, #12]
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800109e:	f7ff f931 	bl	8000304 <OTM8009A_Init>
}
 80010a2:	4628      	mov	r0, r5
 80010a4:	b00d      	add	sp, #52	; 0x34
 80010a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	2000055c 	.word	0x2000055c
 80010b4:	20000134 	.word	0x20000134
 80010b8:	200004b4 	.word	0x200004b4
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40016c00 	.word	0x40016c00
 80010c4:	40016800 	.word	0x40016800
 80010c8:	20000028 	.word	0x20000028

080010cc <BSP_LCD_Init>:
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff bf01 	b.w	8000ed4 <BSP_LCD_InitEx>
 80010d2:	bf00      	nop

080010d4 <BSP_QSPI_MspInit>:
  *           - Peripheral's clock enable
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <BSP_QSPI_MspInit+0xb8>)

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80010da:	4d2d      	ldr	r5, [pc, #180]	; (8001190 <BSP_QSPI_MspInit+0xbc>)
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80010dc:	482d      	ldr	r0, [pc, #180]	; (8001194 <BSP_QSPI_MspInit+0xc0>)
  QSPI_CLK_ENABLE();
 80010de:	2400      	movs	r4, #0
 80010e0:	9400      	str	r4, [sp, #0]
 80010e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010e4:	f042 0202 	orr.w	r2, r2, #2
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
 80010ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ec:	f002 0202 	and.w	r2, r2, #2
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	f042 0202 	orr.w	r2, r2, #2
 80010fa:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80010fc:	699a      	ldr	r2, [r3, #24]
 80010fe:	f022 0202 	bic.w	r2, r2, #2
 8001102:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8001104:	9401      	str	r4, [sp, #4]
 8001106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001108:	f042 0202 	orr.w	r2, r2, #2
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
 800110e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001110:	f002 0202 	and.w	r2, r2, #2
 8001114:	9201      	str	r2, [sp, #4]
 8001116:	9a01      	ldr	r2, [sp, #4]
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 8001118:	9402      	str	r4, [sp, #8]
 800111a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 800112a:	2340      	movs	r3, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800112c:	2201      	movs	r2, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800112e:	a903      	add	r1, sp, #12
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 8001130:	9f02      	ldr	r7, [sp, #8]
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8001132:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8001134:	270a      	movs	r7, #10
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001136:	2303      	movs	r3, #3
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001138:	2602      	movs	r6, #2
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800113a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800113e:	9604      	str	r6, [sp, #16]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8001140:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8001142:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001144:	f001 f9fc 	bl	8002540 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001148:	a903      	add	r1, sp, #12
 800114a:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800114c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001150:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001152:	9405      	str	r4, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8001154:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001156:	f001 f9f3 	bl	8002540 <HAL_GPIO_Init>

  /* QSPI D0 and D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 800115a:	a903      	add	r1, sp, #12
 800115c:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8001164:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8001166:	f001 f9eb 	bl	8002540 <HAL_GPIO_Init>

  /* QSPI D2 and D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 800116a:	23c0      	movs	r3, #192	; 0xc0
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 800116c:	a903      	add	r1, sp, #12
 800116e:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 8001170:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8001172:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8001174:	f001 f9e4 	bl	8002540 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001178:	4622      	mov	r2, r4
 800117a:	210f      	movs	r1, #15
 800117c:	205b      	movs	r0, #91	; 0x5b
 800117e:	f000 fbff 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001182:	205b      	movs	r0, #91	; 0x5b
 8001184:	f000 fc32 	bl	80019ec <HAL_NVIC_EnableIRQ>

}
 8001188:	b009      	add	sp, #36	; 0x24
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40021400 	.word	0x40021400
 8001194:	40020400 	.word	0x40020400

08001198 <BSP_QSPI_Init>:
{
 8001198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  QSPIHandle.Instance = QUADSPI;
 800119c:	4c6a      	ldr	r4, [pc, #424]	; (8001348 <BSP_QSPI_Init+0x1b0>)
 800119e:	4b6b      	ldr	r3, [pc, #428]	; (800134c <BSP_QSPI_Init+0x1b4>)
 80011a0:	6023      	str	r3, [r4, #0]
{
 80011a2:	b0a4      	sub	sp, #144	; 0x90
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80011a4:	4620      	mov	r0, r4
 80011a6:	f002 fbdd 	bl	8003964 <HAL_QSPI_DeInit>
 80011aa:	b118      	cbz	r0, 80011b4 <BSP_QSPI_Init+0x1c>
    return QSPI_ERROR;
 80011ac:	2001      	movs	r0, #1
}
 80011ae:	b024      	add	sp, #144	; 0x90
 80011b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80011b4:	4601      	mov	r1, r0
 80011b6:	4605      	mov	r5, r0
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI Freq= 180 MHz / (1+1) = 90 MHz */
 80011b8:	2601      	movs	r6, #1
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80011ba:	4620      	mov	r0, r4
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80011bc:	f04f 0810 	mov.w	r8, #16
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80011c0:	f7ff ff88 	bl	80010d4 <BSP_QSPI_MspInit>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  QSPIHandle.Init.FifoThreshold      = 1;
 80011c8:	e9c4 6601 	strd	r6, r6, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80011cc:	f8c4 800c 	str.w	r8, [r4, #12]
 80011d0:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	3b01      	subs	r3, #1
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80011da:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80011de:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80011e0:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80011e2:	e9c4 5506 	strd	r5, r5, [r4, #24]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80011e6:	6225      	str	r5, [r4, #32]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80011e8:	6162      	str	r2, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80011ea:	f002 fb4d 	bl	8003888 <HAL_QSPI_Init>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d1dc      	bne.n	80011ac <BSP_QSPI_Init+0x14>
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011f2:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 80011f6:	2366      	movs	r3, #102	; 0x66
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011f8:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  s_command.DataMode          = QSPI_DATA_NONE;
 80011fc:	9011      	str	r0, [sp, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80011fe:	900d      	str	r0, [sp, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001200:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001204:	9015      	str	r0, [sp, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001206:	a908      	add	r1, sp, #32
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800120e:	950e      	str	r5, [sp, #56]	; 0x38
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001210:	9308      	str	r3, [sp, #32]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001212:	f002 fbc5 	bl	80039a0 <HAL_QSPI_Command>
 8001216:	b118      	cbz	r0, 8001220 <BSP_QSPI_Init+0x88>
    return QSPI_NOT_SUPPORTED;
 8001218:	2004      	movs	r0, #4
}
 800121a:	b024      	add	sp, #144	; 0x90
 800121c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    return QSPI_ERROR;
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8001220:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	a908      	add	r1, sp, #32
 8001228:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 800122a:	9308      	str	r3, [sp, #32]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800122c:	f002 fbb8 	bl	80039a0 <HAL_QSPI_Command>
 8001230:	4684      	mov	ip, r0
 8001232:	2800      	cmp	r0, #0
 8001234:	d1f0      	bne.n	8001218 <BSP_QSPI_Init+0x80>
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001236:	f04f 0905 	mov.w	r9, #5
  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800123a:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800123e:	aa02      	add	r2, sp, #8
 8001240:	a916      	add	r1, sp, #88	; 0x58
 8001242:	f241 3388 	movw	r3, #5000	; 0x1388
 8001246:	4620      	mov	r0, r4
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001248:	e9cd 5c1c 	strd	r5, ip, [sp, #112]	; 0x70
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800124c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
  s_command.DummyCycles       = 0;
 8001250:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001254:	e9cd cc21 	strd	ip, ip, [sp, #132]	; 0x84
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001258:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  s_config.Mask            = N25Q128A_SR_WIP;
 800125c:	e9cd c602 	strd	ip, r6, [sp, #8]
  s_config.StatusBytesSize = 1;
 8001260:	e9cd 6c05 	strd	r6, ip, [sp, #20]
  s_config.Interval        = 0x10;
 8001264:	f8cd 8010 	str.w	r8, [sp, #16]
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001268:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800126c:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8001270:	f002 fbf8 	bl	8003a64 <HAL_QSPI_AutoPolling>
 8001274:	2800      	cmp	r0, #0
 8001276:	d1cf      	bne.n	8001218 <BSP_QSPI_Init+0x80>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8001278:	2385      	movs	r3, #133	; 0x85
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800127a:	e9cd 500e 	strd	r5, r0, [sp, #56]	; 0x38
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800127e:	e9cd 0710 	strd	r0, r7, [sp, #64]	; 0x40
  s_command.DummyCycles       = 0;
 8001282:	900d      	str	r0, [sp, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001284:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001288:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	a908      	add	r1, sp, #32
 8001292:	4620      	mov	r0, r4
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8001294:	9308      	str	r3, [sp, #32]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001296:	f002 fb83 	bl	80039a0 <HAL_QSPI_Command>
 800129a:	2800      	cmp	r0, #0
 800129c:	d1bc      	bne.n	8001218 <BSP_QSPI_Init+0x80>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800129e:	f10d 0107 	add.w	r1, sp, #7
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4620      	mov	r0, r4
 80012a8:	f002 fd18 	bl	8003cdc <HAL_QSPI_Receive>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d1b3      	bne.n	8001218 <BSP_QSPI_Init+0x80>
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80012b0:	2306      	movs	r3, #6
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012b2:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DataMode          = QSPI_DATA_NONE;
 80012b6:	901f      	str	r0, [sp, #124]	; 0x7c
  s_command.DummyCycles       = 0;
 80012b8:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012ba:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012be:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c4:	a916      	add	r1, sp, #88	; 0x58
 80012c6:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012c8:	951c      	str	r5, [sp, #112]	; 0x70
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80012ca:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012cc:	f002 fb68 	bl	80039a0 <HAL_QSPI_Command>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d1a1      	bne.n	8001218 <BSP_QSPI_Init+0x80>
  s_config.Match           = N25Q128A_SR_WREN;
 80012d4:	2502      	movs	r5, #2
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80012d6:	9006      	str	r0, [sp, #24]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012d8:	aa02      	add	r2, sp, #8
 80012da:	a916      	add	r1, sp, #88	; 0x58
 80012dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e0:	4620      	mov	r0, r4
  s_config.StatusBytesSize = 1;
 80012e2:	9605      	str	r6, [sp, #20]
  s_config.Interval        = 0x10;
 80012e4:	f8cd 8010 	str.w	r8, [sp, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80012e8:	f8cd a01c 	str.w	sl, [sp, #28]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80012ec:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80012f0:	971f      	str	r7, [sp, #124]	; 0x7c
  s_config.Mask            = N25Q128A_SR_WREN;
 80012f2:	e9cd 5502 	strd	r5, r5, [sp, #8]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012f6:	f002 fbb5 	bl	8003a64 <HAL_QSPI_AutoPolling>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d18c      	bne.n	8001218 <BSP_QSPI_Init+0x80>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80012fe:	2381      	movs	r3, #129	; 0x81
 8001300:	9308      	str	r3, [sp, #32]
 8001302:	22f0      	movs	r2, #240	; 0xf0
 8001304:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001308:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800130c:	210a      	movs	r1, #10
 800130e:	fab2 f282 	clz	r2, r2
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800131c:	a908      	add	r1, sp, #32
 800131e:	4620      	mov	r0, r4
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001324:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001328:	f002 fb3a 	bl	80039a0 <HAL_QSPI_Command>
 800132c:	2800      	cmp	r0, #0
 800132e:	f47f af73 	bne.w	8001218 <BSP_QSPI_Init+0x80>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001332:	f10d 0107 	add.w	r1, sp, #7
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <BSP_QSPI_Init+0x1b0>)
 800133c:	f002 fc54 	bl	8003be8 <HAL_QSPI_Transmit>
 8001340:	2800      	cmp	r0, #0
 8001342:	f43f af34 	beq.w	80011ae <BSP_QSPI_Init+0x16>
 8001346:	e767      	b.n	8001218 <BSP_QSPI_Init+0x80>
 8001348:	200005b8 	.word	0x200005b8
 800134c:	a0001000 	.word	0xa0001000

08001350 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8001350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001354:	b08f      	sub	sp, #60	; 0x3c
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <BSP_SD_MspInit+0x16c>)
  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);

  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8001358:	4c59      	ldr	r4, [pc, #356]	; (80014c0 <BSP_SD_MspInit+0x170>)
  __HAL_RCC_SDIO_CLK_ENABLE();
 800135a:	2500      	movs	r5, #0
 800135c:	9505      	str	r5, [sp, #20]
 800135e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
 8001366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001368:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800136c:	9205      	str	r2, [sp, #20]
 800136e:	9a05      	ldr	r2, [sp, #20]
  __DMAx_TxRx_CLK_ENABLE();
 8001370:	9506      	str	r5, [sp, #24]
 8001372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001374:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
 800137a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001380:	9206      	str	r2, [sp, #24]
 8001382:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	9507      	str	r5, [sp, #28]
 8001386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001388:	f042 0204 	orr.w	r2, r2, #4
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	f002 0204 	and.w	r2, r2, #4
 8001394:	9207      	str	r2, [sp, #28]
 8001396:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	9508      	str	r5, [sp, #32]
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139c:	f042 0208 	orr.w	r2, r2, #8
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80013a2:	ae0e      	add	r6, sp, #56	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80013a6:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80013aa:	f846 2d14 	str.w	r2, [r6, #-20]!
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80013b2:	f04f 0c02 	mov.w	ip, #2
{
 80013b6:	4607      	mov	r7, r0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80013ba:	2201      	movs	r2, #1
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 80013bc:	230c      	movs	r3, #12
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80013be:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80013c2:	4631      	mov	r1, r6
 80013c4:	483f      	ldr	r0, [pc, #252]	; (80014c4 <BSP_SD_MspInit+0x174>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	f8dd e020 	ldr.w	lr, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80013ca:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 80013ce:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin = GPIO_PIN_2;
 80013d2:	f04f 0904 	mov.w	r9, #4
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80013d6:	f001 f8b3 	bl	8002540 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80013da:	4631      	mov	r1, r6
 80013dc:	483a      	ldr	r0, [pc, #232]	; (80014c8 <BSP_SD_MspInit+0x178>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 80013de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80013e2:	f001 f8ad 	bl	8002540 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0);
 80013e6:	462a      	mov	r2, r5
 80013e8:	210e      	movs	r1, #14
 80013ea:	2031      	movs	r0, #49	; 0x31
 80013ec:	f000 fac8 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80013f0:	2031      	movs	r0, #49	; 0x31
 80013f2:	f000 fafb 	bl	80019ec <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;

  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80013f6:	4e35      	ldr	r6, [pc, #212]	; (80014cc <BSP_SD_MspInit+0x17c>)

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80013f8:	63fc      	str	r4, [r7, #60]	; 0x3c
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80013fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001402:	6163      	str	r3, [r4, #20]
 8001404:	9301      	str	r3, [sp, #4]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001406:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800140e:	e9c4 6100 	strd	r6, r1, [r4]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001412:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8001416:	f04f 0a20 	mov.w	sl, #32
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800141a:	9103      	str	r1, [sp, #12]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800141c:	6223      	str	r3, [r4, #32]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800141e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001422:	f44f 1300 	mov.w	r3, #2097152	; 0x200000

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8001426:	4620      	mov	r0, r4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001428:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;

  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800142c:	4626      	mov	r6, r4
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800142e:	6122      	str	r2, [r4, #16]
 8001430:	9202      	str	r2, [sp, #8]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001432:	60a5      	str	r5, [r4, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001434:	60e5      	str	r5, [r4, #12]
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001436:	e9c4 9809 	strd	r9, r8, [r4, #36]	; 0x24
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 800143a:	63a7      	str	r7, [r4, #56]	; 0x38
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800143c:	e9c4 ba06 	strd	fp, sl, [r4, #24]
  HAL_DMA_DeInit(&dma_rx_handle);
 8001440:	f000 fba6 	bl	8001b90 <HAL_DMA_DeInit>
  HAL_DMA_Init(&dma_rx_handle);
 8001444:	4620      	mov	r0, r4
 8001446:	f000 fb09 	bl	8001a5c <HAL_DMA_Init>
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144a:	9b01      	ldr	r3, [sp, #4]
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800144c:	4820      	ldr	r0, [pc, #128]	; (80014d0 <BSP_SD_MspInit+0x180>)
 800144e:	f846 0f60 	str.w	r0, [r6, #96]!
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001452:	e9c4 3b1d 	strd	r3, fp, [r4, #116]	; 0x74
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001456:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800145a:	f04f 0c40 	mov.w	ip, #64	; 0x40
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800145e:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8001462:	9903      	ldr	r1, [sp, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001464:	9a02      	ldr	r2, [sp, #8]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8001466:	643e      	str	r6, [r7, #64]	; 0x40
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8001468:	e9c4 3920 	strd	r3, r9, [r4, #128]	; 0x80

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800146c:	4630      	mov	r0, r6
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800146e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001472:	e9c4 e323 	strd	lr, r3, [r4, #140]	; 0x8c
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001476:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800147a:	6661      	str	r1, [r4, #100]	; 0x64
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800147c:	6722      	str	r2, [r4, #112]	; 0x70
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800147e:	66e5      	str	r5, [r4, #108]	; 0x6c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8001480:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001484:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8001488:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
  HAL_DMA_DeInit(&dma_tx_handle);
 800148c:	f000 fb80 	bl	8001b90 <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle);
 8001490:	4630      	mov	r0, r6
 8001492:	f000 fae3 	bl	8001a5c <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8001496:	462a      	mov	r2, r5
 8001498:	210f      	movs	r1, #15
 800149a:	203b      	movs	r0, #59	; 0x3b
 800149c:	f000 fa70 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80014a0:	203b      	movs	r0, #59	; 0x3b
 80014a2:	f000 faa3 	bl	80019ec <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 80014a6:	462a      	mov	r2, r5
 80014a8:	210f      	movs	r1, #15
 80014aa:	2045      	movs	r0, #69	; 0x45
 80014ac:	f000 fa68 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 80014b0:	2045      	movs	r0, #69	; 0x45
 80014b2:	f000 fa9b 	bl	80019ec <HAL_NVIC_EnableIRQ>
}
 80014b6:	b00f      	add	sp, #60	; 0x3c
 80014b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	200001f8 	.word	0x200001f8
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40026458 	.word	0x40026458
 80014d0:	400264a0 	.word	0x400264a0

080014d4 <BSP_SD_Detect_MspInit>:
  * @brief  Initializes the SD Detect pin MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80014d4:	b530      	push	{r4, r5, lr}
 80014d6:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 80014d8:	2100      	movs	r1, #0
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <BSP_SD_Detect_MspInit+0x38>)
 80014dc:	9100      	str	r1, [sp, #0]
 80014de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 80014e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80014ea:	9102      	str	r1, [sp, #8]
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80014ec:	2404      	movs	r4, #4
  SD_DETECT_GPIO_CLK_ENABLE();
 80014ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f2:	9300      	str	r3, [sp, #0]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80014f4:	2201      	movs	r2, #1
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80014f6:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80014f8:	eb0d 0104 	add.w	r1, sp, r4
  SD_DETECT_GPIO_CLK_ENABLE();
 80014fc:	9d00      	ldr	r5, [sp, #0]
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80014fe:	9401      	str	r4, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001500:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8001504:	f001 f81c 	bl	8002540 <HAL_GPIO_Init>
}
 8001508:	b007      	add	sp, #28
 800150a:	bd30      	pop	{r4, r5, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40021800 	.word	0x40021800

08001514 <BSP_SD_Init>:
{
 8001514:	b510      	push	{r4, lr}
  uSdHandle.Instance = SDIO;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <BSP_SD_Init+0x74>)
 8001518:	4a1c      	ldr	r2, [pc, #112]	; (800158c <BSP_SD_Init+0x78>)
 800151a:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800151c:	2400      	movs	r4, #0
{
 800151e:	b082      	sub	sp, #8
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8001520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8001524:	4618      	mov	r0, r3
 8001526:	4621      	mov	r1, r4
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8001528:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800152a:	e9c3 4401 	strd	r4, r4, [r3, #4]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 800152e:	e9c3 4403 	strd	r4, r4, [r3, #12]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 8001532:	619c      	str	r4, [r3, #24]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8001534:	f7ff ffce 	bl	80014d4 <BSP_SD_Detect_MspInit>
  __IO uint8_t  status = SD_PRESENT;
 8001538:	2301      	movs	r3, #1
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800153a:	2104      	movs	r1, #4
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <BSP_SD_Init+0x7c>)
  __IO uint8_t  status = SD_PRESENT;
 800153e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8001542:	f001 f93b 	bl	80027bc <HAL_GPIO_ReadPin>
 8001546:	2801      	cmp	r0, #1
    status = SD_NOT_PRESENT;
 8001548:	bf08      	it	eq
 800154a:	f88d 4007 	strbeq.w	r4, [sp, #7]
    return status;
 800154e:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8001552:	b2e4      	uxtb	r4, r4
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8001554:	2c01      	cmp	r4, #1
 8001556:	d002      	beq.n	800155e <BSP_SD_Init+0x4a>
    return MSD_ERROR_SD_NOT_PRESENT;
 8001558:	2002      	movs	r0, #2
}
 800155a:	b002      	add	sp, #8
 800155c:	bd10      	pop	{r4, pc}
  BSP_SD_MspInit(&uSdHandle, NULL);
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <BSP_SD_Init+0x74>)
 8001560:	2100      	movs	r1, #0
 8001562:	f7ff fef5 	bl	8001350 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <BSP_SD_Init+0x74>)
 8001568:	f003 fb62 	bl	8004c30 <HAL_SD_Init>
 800156c:	b110      	cbz	r0, 8001574 <BSP_SD_Init+0x60>
    sd_state = MSD_ERROR;
 800156e:	4620      	mov	r0, r4
}
 8001570:	b002      	add	sp, #8
 8001572:	bd10      	pop	{r4, pc}
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <BSP_SD_Init+0x74>)
 800157a:	f003 fb75 	bl	8004c68 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800157e:	3000      	adds	r0, #0
 8001580:	bf18      	it	ne
 8001582:	2001      	movne	r0, #1
}
 8001584:	b002      	add	sp, #8
 8001586:	bd10      	pop	{r4, pc}
 8001588:	20000604 	.word	0x20000604
 800158c:	40012c00 	.word	0x40012c00
 8001590:	40021800 	.word	0x40021800

08001594 <BSP_SDRAM_MspInit>:
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001594:	2800      	cmp	r0, #0
 8001596:	f000 80c6 	beq.w	8001726 <BSP_SDRAM_MspInit+0x192>
{
 800159a:	b570      	push	{r4, r5, r6, lr}
 800159c:	b08e      	sub	sp, #56	; 0x38
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800159e:	4b62      	ldr	r3, [pc, #392]	; (8001728 <BSP_SDRAM_MspInit+0x194>)
 80015a0:	2400      	movs	r4, #0
 80015a2:	9400      	str	r4, [sp, #0]
 80015a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
 80015ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ae:	f002 0201 	and.w	r2, r2, #1
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	9a00      	ldr	r2, [sp, #0]

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80015b6:	9401      	str	r4, [sp, #4]
 80015b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
 80015c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	9a01      	ldr	r2, [sp, #4]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	9402      	str	r4, [sp, #8]
 80015cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ce:	f042 0204 	orr.w	r2, r2, #4
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
 80015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d6:	f002 0204 	and.w	r2, r2, #4
 80015da:	9202      	str	r2, [sp, #8]
 80015dc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	9403      	str	r4, [sp, #12]
 80015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e2:	f042 0208 	orr.w	r2, r2, #8
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
 80015e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ea:	f002 0208 	and.w	r2, r2, #8
 80015ee:	9203      	str	r2, [sp, #12]
 80015f0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f2:	9404      	str	r4, [sp, #16]
 80015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f6:	f042 0210 	orr.w	r2, r2, #16
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fe:	f002 0210 	and.w	r2, r2, #16
 8001602:	9204      	str	r2, [sp, #16]
 8001604:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001606:	9405      	str	r4, [sp, #20]
 8001608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
 8001610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001612:	f002 0220 	and.w	r2, r2, #32
 8001616:	9205      	str	r2, [sp, #20]
 8001618:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800161a:	9406      	str	r4, [sp, #24]
 800161c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800162a:	9206      	str	r2, [sp, #24]
 800162c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	9407      	str	r4, [sp, #28]
 8001630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
 8001638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800163e:	9207      	str	r2, [sp, #28]
 8001640:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001642:	9408      	str	r4, [sp, #32]
 8001644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = GPIO_AF12_FMC;

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800164e:	ad0e      	add	r5, sp, #56	; 0x38
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8001650:	2201      	movs	r2, #1
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8001656:	f845 2d14 	str.w	r2, [r5, #-20]!
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800165a:	9308      	str	r3, [sp, #32]
 800165c:	9b08      	ldr	r3, [sp, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800165e:	920b      	str	r2, [sp, #44]	; 0x2c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001664:	4629      	mov	r1, r5
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001666:	930a      	str	r3, [sp, #40]	; 0x28
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001668:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800166a:	4830      	ldr	r0, [pc, #192]	; (800172c <BSP_SDRAM_MspInit+0x198>)
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800166c:	230c      	movs	r3, #12
 800166e:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001670:	f000 ff66 	bl	8002540 <HAL_GPIO_Init>
    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001674:	4629      	mov	r1, r5
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001676:	f24c 7303 	movw	r3, #50947	; 0xc703
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800167a:	482d      	ldr	r0, [pc, #180]	; (8001730 <BSP_SDRAM_MspInit+0x19c>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800167c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800167e:	f000 ff5f 	bl	8002540 <HAL_GPIO_Init>
    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001682:	4629      	mov	r1, r5
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001684:	f64f 7383 	movw	r3, #65411	; 0xff83
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001688:	482a      	ldr	r0, [pc, #168]	; (8001734 <BSP_SDRAM_MspInit+0x1a0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800168a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800168c:	f000 ff58 	bl	8002540 <HAL_GPIO_Init>
    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001690:	4629      	mov	r1, r5
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001692:	f64f 033f 	movw	r3, #63551	; 0xf83f
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001696:	4828      	ldr	r0, [pc, #160]	; (8001738 <BSP_SDRAM_MspInit+0x1a4>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001698:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800169a:	f000 ff51 	bl	8002540 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800169e:	4629      	mov	r1, r5
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80016a0:	f248 1333 	movw	r3, #33075	; 0x8133
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016a4:	4825      	ldr	r0, [pc, #148]	; (800173c <BSP_SDRAM_MspInit+0x1a8>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80016a6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016a8:	f000 ff4a 	bl	8002540 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80016ac:	4629      	mov	r1, r5
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80016ae:	f64f 730c 	movw	r3, #65292	; 0xff0c
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80016b2:	4823      	ldr	r0, [pc, #140]	; (8001740 <BSP_SDRAM_MspInit+0x1ac>)
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80016b4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80016b6:	f000 ff43 	bl	8002540 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80016ba:	4629      	mov	r1, r5
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80016bc:	f240 63ff 	movw	r3, #1791	; 0x6ff
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80016c0:	4820      	ldr	r0, [pc, #128]	; (8001744 <BSP_SDRAM_MspInit+0x1b0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80016c2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80016c4:	f000 ff3c 	bl	8002540 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <BSP_SDRAM_MspInit+0x1b4>)
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80016ca:	4920      	ldr	r1, [pc, #128]	; (800174c <BSP_SDRAM_MspInit+0x1b8>)
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80016cc:	675c      	str	r4, [r3, #116]	; 0x74
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80016ce:	461d      	mov	r5, r3
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80016d0:	2280      	movs	r2, #128	; 0x80
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80016d2:	f845 1f44 	str.w	r1, [r5, #68]!
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80016d6:	64da      	str	r2, [r3, #76]	; 0x4c
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80016d8:	f44f 7100 	mov.w	r1, #512	; 0x200
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80016dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80016e0:	6519      	str	r1, [r3, #80]	; 0x50
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80016e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ec:	6599      	str	r1, [r3, #88]	; 0x58
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80016ee:	65da      	str	r2, [r3, #92]	; 0x5c
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80016f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80016f4:	2203      	movs	r2, #3

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80016f6:	6335      	str	r5, [r6, #48]	; 0x30

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 80016f8:	4628      	mov	r0, r5
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80016fa:	6659      	str	r1, [r3, #100]	; 0x64
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80016fc:	66da      	str	r2, [r3, #108]	; 0x6c
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80016fe:	649c      	str	r4, [r3, #72]	; 0x48
    dma_handle.Init.Mode                = DMA_NORMAL;
 8001700:	661c      	str	r4, [r3, #96]	; 0x60
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001702:	669c      	str	r4, [r3, #104]	; 0x68
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001704:	671c      	str	r4, [r3, #112]	; 0x70
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001706:	67de      	str	r6, [r3, #124]	; 0x7c
    HAL_DMA_DeInit(&dma_handle);
 8001708:	f000 fa42 	bl	8001b90 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 800170c:	4628      	mov	r0, r5
 800170e:	f000 f9a5 	bl	8001a5c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8001712:	4622      	mov	r2, r4
 8001714:	2105      	movs	r1, #5
 8001716:	2038      	movs	r0, #56	; 0x38
 8001718:	f000 f932 	bl	8001980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800171c:	2038      	movs	r0, #56	; 0x38
 800171e:	f000 f965 	bl	80019ec <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001722:	b00e      	add	sp, #56	; 0x38
 8001724:	bd70      	pop	{r4, r5, r6, pc}
 8001726:	4770      	bx	lr
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40022000 	.word	0x40022000
 8001748:	20000378 	.word	0x20000378
 800174c:	40026410 	.word	0x40026410

08001750 <BSP_SDRAM_Init>:
{
 8001750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001754:	4c3e      	ldr	r4, [pc, #248]	; (8001850 <BSP_SDRAM_Init+0x100>)
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <BSP_SDRAM_Init+0x104>)
 8001758:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800175a:	2500      	movs	r5, #0
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 800175c:	f104 0610 	add.w	r6, r4, #16
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001760:	2120      	movs	r1, #32
{
 8001762:	b083      	sub	sp, #12
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001764:	f04f 0e40 	mov.w	lr, #64	; 0x40
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001768:	f44f 7cc0 	mov.w	ip, #384	; 0x180
  Timing.LoadToActiveDelay    = 2;
 800176c:	f04f 0802 	mov.w	r8, #2
  Timing.ExitSelfRefreshDelay = 7;
 8001770:	2307      	movs	r3, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.SelfRefreshTime      = 4;
 8001776:	f04f 0a04 	mov.w	sl, #4
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 800177a:	4630      	mov	r0, r6
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800177c:	6221      	str	r1, [r4, #32]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800177e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8001782:	4629      	mov	r1, r5
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001784:	e9c4 ec09 	strd	lr, ip, [r4, #36]	; 0x24
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001788:	e9c4 720c 	strd	r7, r2, [r4, #48]	; 0x30
  Timing.ExitSelfRefreshDelay = 7;
 800178c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 8001790:	e9c4 a32b 	strd	sl, r3, [r4, #172]	; 0xac
  Timing.LoadToActiveDelay    = 2;
 8001794:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8001798:	e9c4 882d 	strd	r8, r8, [r4, #180]	; 0xb4
  Timing.RCDDelay             = 2;
 800179c:	f8c4 80bc 	str.w	r8, [r4, #188]	; 0xbc
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80017a0:	f8c4 a01c 	str.w	sl, [r4, #28]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017a8:	62e5      	str	r5, [r4, #44]	; 0x2c
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80017aa:	63a5      	str	r5, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 80017ac:	f7ff fef2 	bl	8001594 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80017b0:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80017b4:	4630      	mov	r0, r6
 80017b6:	f003 fae3 	bl	8004d80 <HAL_SDRAM_Init>
 80017ba:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8001858 <BSP_SDRAM_Init+0x108>
  __IO uint32_t tmpmrd = 0;
 80017be:	9501      	str	r5, [sp, #4]
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80017c0:	1b43      	subs	r3, r0, r5
 80017c2:	bf18      	it	ne
 80017c4:	2301      	movne	r3, #1
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80017c6:	2701      	movs	r7, #1
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80017c8:	f04f 0910 	mov.w	r9, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80017cc:	4621      	mov	r1, r4
 80017ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d2:	4630      	mov	r0, r6
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80017d4:	f88b 3000 	strb.w	r3, [fp]
  Command.ModeRegisterDefinition = 0;
 80017d8:	60e5      	str	r5, [r4, #12]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80017da:	6027      	str	r7, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80017dc:	e9c4 9701 	strd	r9, r7, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80017e0:	f003 faf0 	bl	8004dc4 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 80017e4:	4638      	mov	r0, r7
 80017e6:	f000 f8a7 	bl	8001938 <HAL_Delay>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80017ea:	4621      	mov	r1, r4
 80017ec:	4630      	mov	r0, r6
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80017f2:	e9c4 8900 	strd	r8, r9, [r4]
  Command.ModeRegisterDefinition = 0;
 80017f6:	e9c4 7502 	strd	r7, r5, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80017fa:	f003 fae3 	bl	8004dc4 <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80017fe:	f04f 0c03 	mov.w	ip, #3
  Command.AutoRefreshNumber      = 8;
 8001802:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001804:	4621      	mov	r1, r4
 8001806:	4630      	mov	r0, r6
 8001808:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800180c:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 8001810:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001812:	f8c4 9004 	str.w	r9, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8001816:	60e5      	str	r5, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001818:	f003 fad4 	bl	8004dc4 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800181c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001820:	9301      	str	r3, [sp, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001826:	4621      	mov	r1, r4
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	4630      	mov	r0, r6
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800182e:	f8c4 a000 	str.w	sl, [r4]
  Command.AutoRefreshNumber      = 1;
 8001832:	e9c4 9701 	strd	r9, r7, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001836:	f003 fac5 	bl	8004dc4 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800183a:	4630      	mov	r0, r6
 800183c:	f240 5169 	movw	r1, #1385	; 0x569
 8001840:	f003 fada 	bl	8004df8 <HAL_SDRAM_ProgramRefreshRate>
}
 8001844:	f89b 0000 	ldrb.w	r0, [fp]
 8001848:	b003      	add	sp, #12
 800184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800184e:	bf00      	nop
 8001850:	20000378 	.word	0x20000378
 8001854:	a0000140 	.word	0xa0000140
 8001858:	20000058 	.word	0x20000058

0800185c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800185e:	4d15      	ldr	r5, [pc, #84]	; (80018b4 <BSP_TS_Init+0x58>)
 8001860:	4c15      	ldr	r4, [pc, #84]	; (80018b8 <BSP_TS_Init+0x5c>)
 8001862:	682b      	ldr	r3, [r5, #0]
{
 8001864:	4606      	mov	r6, r0
  ft6x06_ts_drv.Init(I2C_Address);
 8001866:	7820      	ldrb	r0, [r4, #0]
{
 8001868:	460f      	mov	r7, r1
  ft6x06_ts_drv.Init(I2C_Address);
 800186a:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800186c:	686b      	ldr	r3, [r5, #4]
 800186e:	2054      	movs	r0, #84	; 0x54
 8001870:	4798      	blx	r3
  if(ts_id1 != FT6206_ID_VALUE)
 8001872:	b2c0      	uxtb	r0, r0
 8001874:	2811      	cmp	r0, #17
 8001876:	d018      	beq.n	80018aa <BSP_TS_Init+0x4e>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8001878:	686b      	ldr	r3, [r5, #4]
 800187a:	2070      	movs	r0, #112	; 0x70
 800187c:	4798      	blx	r3
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800187e:	b2c0      	uxtb	r0, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001880:	2370      	movs	r3, #112	; 0x70
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001882:	2811      	cmp	r0, #17
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001884:	7023      	strb	r3, [r4, #0]
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001886:	d10e      	bne.n	80018a6 <BSP_TS_Init+0x4a>
 8001888:	4618      	mov	r0, r3
    }

    if(ts_status == TS_OK)
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800188a:	68ab      	ldr	r3, [r5, #8]
    ts_driver = &ft6x06_ts_drv;
 800188c:	6065      	str	r5, [r4, #4]
      ts_orientation = TS_SWAP_NONE;                
 800188e:	42be      	cmp	r6, r7
 8001890:	bf2c      	ite	cs
 8001892:	260c      	movcs	r6, #12
 8001894:	2601      	movcc	r6, #1
 8001896:	7226      	strb	r6, [r4, #8]
      ts_driver->Reset(I2C_Address);
 8001898:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	7820      	ldrb	r0, [r4, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 80018a2:	2000      	movs	r0, #0
  {
    ts_status = TS_DEVICE_NOT_FOUND;
  }

  return (ts_status);
}
 80018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ts_status = TS_DEVICE_NOT_FOUND;
 80018a6:	2003      	movs	r0, #3
}
 80018a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 80018aa:	2354      	movs	r3, #84	; 0x54
 80018ac:	7023      	strb	r3, [r4, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	e7eb      	b.n	800188a <BSP_TS_Init+0x2e>
 80018b2:	bf00      	nop
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000498 	.word	0x20000498

080018bc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_InitTick+0x24>)
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_InitTick+0x28>)
 80018c0:	681b      	ldr	r3, [r3, #0]
{
 80018c2:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
{
 80018c8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80018ca:	0998      	lsrs	r0, r3, #6
 80018cc:	f000 f89a 	bl	8001a04 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	4621      	mov	r1, r4
 80018d2:	2200      	movs	r2, #0
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f852 	bl	8001980 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80018dc:	2000      	movs	r0, #0
 80018de:	bd10      	pop	{r4, pc}
 80018e0:	20000060 	.word	0x20000060
 80018e4:	10624dd3 	.word	0x10624dd3

080018e8 <HAL_Init>:
{
 80018e8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x30>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001902:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f829 	bl	800195c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ffd6 	bl	80018bc <HAL_InitTick>
  HAL_MspInit();
 8001910:	f003 ff54 	bl	80057bc <HAL_MspInit>
}
 8001914:	2000      	movs	r0, #0
 8001916:	bd08      	pop	{r3, pc}
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800191c:	4a02      	ldr	r2, [pc, #8]	; (8001928 <HAL_IncTick+0xc>)
 800191e:	6813      	ldr	r3, [r2, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000688 	.word	0x20000688

0800192c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800192c:	4b01      	ldr	r3, [pc, #4]	; (8001934 <HAL_GetTick+0x8>)
 800192e:	6818      	ldr	r0, [r3, #0]
}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000688 	.word	0x20000688

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001938:	b530      	push	{r4, r5, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800193e:	f7ff fff5 	bl	800192c <HAL_GetTick>
  uint32_t wait = Delay;
 8001942:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001944:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001946:	4605      	mov	r5, r0
  {
     wait++;
 8001948:	bf18      	it	ne
 800194a:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	1b40      	subs	r0, r0, r5
 8001952:	42a0      	cmp	r0, r4
 8001954:	d3fa      	bcc.n	800194c <HAL_Delay+0x14>
  {
  }
}
 8001956:	b003      	add	sp, #12
 8001958:	bd30      	pop	{r4, r5, pc}
 800195a:	bf00      	nop

0800195c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800195e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001960:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001964:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001966:	0200      	lsls	r0, r0, #8
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001974:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001976:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_NVIC_SetPriority+0x64>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001988:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198a:	f1c3 0507 	rsb	r5, r3, #7
 800198e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001990:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	bf28      	it	cs
 8001996:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001998:	2c06      	cmp	r4, #6
 800199a:	d919      	bls.n	80019d0 <HAL_NVIC_SetPriority+0x50>
 800199c:	3b03      	subs	r3, #3
 800199e:	f04f 34ff 	mov.w	r4, #4294967295
 80019a2:	409c      	lsls	r4, r3
 80019a4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	40aa      	lsls	r2, r5
 80019ae:	ea21 0102 	bic.w	r1, r1, r2
 80019b2:	fa01 f203 	lsl.w	r2, r1, r3
 80019b6:	4322      	orrs	r2, r4
 80019b8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 80019ba:	2800      	cmp	r0, #0
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	db0a      	blt.n	80019d6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019c8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019cc:	bc30      	pop	{r4, r5}
 80019ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d0:	2400      	movs	r4, #0
 80019d2:	4623      	mov	r3, r4
 80019d4:	e7e8      	b.n	80019a8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_NVIC_SetPriority+0x68>)
 80019d8:	f000 000f 	and.w	r0, r0, #15
 80019dc:	4403      	add	r3, r0
 80019de:	761a      	strb	r2, [r3, #24]
 80019e0:	bc30      	pop	{r4, r5}
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	e000ecfc 	.word	0xe000ecfc

080019ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019ec:	f000 011f 	and.w	r1, r0, #31
 80019f0:	2301      	movs	r3, #1
 80019f2:	0940      	lsrs	r0, r0, #5
 80019f4:	4a02      	ldr	r2, [pc, #8]	; (8001a00 <HAL_NVIC_EnableIRQ+0x14>)
 80019f6:	408b      	lsls	r3, r1
 80019f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	3801      	subs	r0, #1
 8001a06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a0a:	d20e      	bcs.n	8001a2a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	4c08      	ldr	r4, [pc, #32]	; (8001a34 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	20f0      	movs	r0, #240	; 0xf0
 8001a16:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a28:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a3a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a3c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a3e:	bf0c      	ite	eq
 8001a40:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a44:	f023 0304 	bicne.w	r3, r3, #4
 8001a48:	6013      	str	r3, [r2, #0]
  }
}
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <HAL_SYSTICK_IRQHandler>:
{
 8001a54:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a56:	f7ff fffb 	bl	8001a50 <HAL_SYSTICK_Callback>
}
 8001a5a:	bd08      	pop	{r3, pc}

08001a5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ff64 	bl	800192c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a64:	2c00      	cmp	r4, #0
 8001a66:	d054      	beq.n	8001b12 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a68:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a6a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a6c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001a70:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001a72:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8001a74:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8001a78:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8001a7c:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8001a7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	e005      	b.n	8001a8e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff ff53 	bl	800192c <HAL_GetTick>
 8001a86:	1b40      	subs	r0, r0, r5
 8001a88:	2805      	cmp	r0, #5
 8001a8a:	d83b      	bhi.n	8001b04 <HAL_DMA_Init+0xa8>
 8001a8c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	07d1      	lsls	r1, r2, #31
 8001a92:	d4f6      	bmi.n	8001a82 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a94:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a98:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9e:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8001aa0:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa2:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa4:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aac:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aae:	4835      	ldr	r0, [pc, #212]	; (8001b84 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	4332      	orrs	r2, r6
 8001ab2:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab8:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aba:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001abc:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	d029      	beq.n	8001b16 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ac6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aca:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	482e      	ldr	r0, [pc, #184]	; (8001b88 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001ad0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ad2:	3a10      	subs	r2, #16
 8001ad4:	fba0 1202 	umull	r1, r2, r0, r2
 8001ad8:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ada:	492c      	ldr	r1, [pc, #176]	; (8001b8c <HAL_DMA_Init+0x130>)
 8001adc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ae0:	5c89      	ldrb	r1, [r1, r2]
 8001ae2:	65e1      	str	r1, [r4, #92]	; 0x5c
 8001ae4:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8001ae8:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aea:	bf88      	it	hi
 8001aec:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aee:	223f      	movs	r2, #63	; 0x3f
 8001af0:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8001af2:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af4:	2100      	movs	r1, #0
 8001af6:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8001af8:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afa:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afc:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001afe:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b06:	2220      	movs	r2, #32
 8001b08:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b0a:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
}
 8001b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b16:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 8001b1a:	4301      	orrs	r1, r0
 8001b1c:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001b1e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8001b20:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001b22:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001b24:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b28:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001b2c:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d0cc      	beq.n	8001acc <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b32:	b17e      	cbz	r6, 8001b54 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b34:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001b38:	d016      	beq.n	8001b68 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b3a:	2d02      	cmp	r5, #2
 8001b3c:	d903      	bls.n	8001b46 <HAL_DMA_Init+0xea>
 8001b3e:	2d03      	cmp	r5, #3
 8001b40:	d1c4      	bne.n	8001acc <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b42:	01c2      	lsls	r2, r0, #7
 8001b44:	d5c2      	bpl.n	8001acc <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001b46:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8001b4c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001b54:	2d01      	cmp	r5, #1
 8001b56:	d003      	beq.n	8001b60 <HAL_DMA_Init+0x104>
 8001b58:	d3f3      	bcc.n	8001b42 <HAL_DMA_Init+0xe6>
 8001b5a:	2d02      	cmp	r5, #2
 8001b5c:	d1b6      	bne.n	8001acc <HAL_DMA_Init+0x70>
 8001b5e:	e7f0      	b.n	8001b42 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b60:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001b64:	d1b2      	bne.n	8001acc <HAL_DMA_Init+0x70>
 8001b66:	e7ee      	b.n	8001b46 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001b68:	2d03      	cmp	r5, #3
 8001b6a:	d8af      	bhi.n	8001acc <HAL_DMA_Init+0x70>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <HAL_DMA_Init+0x118>)
 8001b6e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b47 	.word	0x08001b47
 8001b78:	08001b43 	.word	0x08001b43
 8001b7c:	08001b47 	.word	0x08001b47
 8001b80:	08001b61 	.word	0x08001b61
 8001b84:	f010803f 	.word	0xf010803f
 8001b88:	aaaaaaab 	.word	0xaaaaaaab
 8001b8c:	08009828 	.word	0x08009828

08001b90 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d031      	beq.n	8001bf8 <HAL_DMA_DeInit+0x68>
 8001b94:	4602      	mov	r2, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b96:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8001b9a:	b2c0      	uxtb	r0, r0
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d02d      	beq.n	8001bfc <HAL_DMA_DeInit+0x6c>
  __HAL_DMA_DISABLE(hdma);
 8001ba0:	6813      	ldr	r3, [r2, #0]
{
 8001ba2:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba4:	b2d9      	uxtb	r1, r3
 8001ba6:	4d16      	ldr	r5, [pc, #88]	; (8001c00 <HAL_DMA_DeInit+0x70>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba8:	4c16      	ldr	r4, [pc, #88]	; (8001c04 <HAL_DMA_DeInit+0x74>)
  __HAL_DMA_DISABLE(hdma);
 8001baa:	6818      	ldr	r0, [r3, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bac:	3910      	subs	r1, #16
 8001bae:	fba5 5101 	umull	r5, r1, r5, r1
 8001bb2:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8001bb4:	f020 0001 	bic.w	r0, r0, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bb8:	5c65      	ldrb	r5, [r4, r1]
  __HAL_DMA_DISABLE(hdma);
 8001bba:	6018      	str	r0, [r3, #0]
 8001bbc:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 8001bc0:	f024 0403 	bic.w	r4, r4, #3
  if (stream_number > 3U)
 8001bc4:	2903      	cmp	r1, #3
  hdma->Instance->CR   = 0U;
 8001bc6:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bca:	bf88      	it	hi
 8001bcc:	3404      	addhi	r4, #4
  hdma->Instance->FCR  = 0x00000021U;
 8001bce:	2621      	movs	r6, #33	; 0x21
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	213f      	movs	r1, #63	; 0x3f
  hdma->Instance->CR   = 0U;
 8001bd2:	6018      	str	r0, [r3, #0]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd4:	40a9      	lsls	r1, r5
  hdma->Instance->NDTR = 0U;
 8001bd6:	6058      	str	r0, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001bd8:	6098      	str	r0, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001bda:	60d8      	str	r0, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001bdc:	6118      	str	r0, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001bde:	615e      	str	r6, [r3, #20]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be0:	2300      	movs	r3, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001be2:	65d5      	str	r5, [r2, #92]	; 0x5c
 8001be4:	6594      	str	r4, [r2, #88]	; 0x58
  return HAL_OK;
 8001be6:	4618      	mov	r0, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be8:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001bec:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001bf0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
}
 8001bf4:	bc70      	pop	{r4, r5, r6}
 8001bf6:	4770      	bx	lr
    return HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	4770      	bx	lr
}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	aaaaaaab 	.word	0xaaaaaaab
 8001c04:	08009828 	.word	0x08009828

08001c08 <HAL_DMA_Abort>:
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001c0e:	f7ff fe8d 	bl	800192c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c12:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d006      	beq.n	8001c28 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8001c1c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001c20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
}
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c28:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f022 0216 	bic.w	r2, r2, #22
 8001c32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3a:	4605      	mov	r5, r0
 8001c3c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3e:	b331      	cbz	r1, 8001c8e <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f022 0208 	bic.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c52:	f7ff fe6b 	bl	800192c <HAL_GetTick>
 8001c56:	1b40      	subs	r0, r0, r5
 8001c58:	2805      	cmp	r0, #5
 8001c5a:	d80f      	bhi.n	8001c7c <HAL_DMA_Abort+0x74>
 8001c5c:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f013 0301 	ands.w	r3, r3, #1
 8001c64:	d1f5      	bne.n	8001c52 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001c68:	223f      	movs	r2, #63	; 0x3f
 8001c6a:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 8001c70:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 8001c72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001c76:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c7c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8001c7e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c80:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c82:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001c84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c88:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001c8c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d1d5      	bne.n	8001c40 <HAL_DMA_Abort+0x38>
 8001c94:	e7d8      	b.n	8001c48 <HAL_DMA_Abort+0x40>
 8001c96:	bf00      	nop

08001c98 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001c9c:	b350      	cbz	r0, 8001cf4 <HAL_DMA2D_Init+0x58>
{
 8001c9e:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ca0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001caa:	b1f3      	cbz	r3, 8001cea <HAL_DMA2D_Init+0x4e>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cac:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cae:	68e5      	ldr	r5, [r4, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cb6:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cb8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cbc:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
 8001cc0:	4308      	orrs	r0, r1
 8001cc2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cc4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cc6:	f021 0107 	bic.w	r1, r1, #7
 8001cca:	4319      	orrs	r1, r3
 8001ccc:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd8:	432b      	orrs	r3, r5
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001cda:	2100      	movs	r1, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001cdc:	2501      	movs	r5, #1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
  return HAL_OK;
 8001ce0:	4608      	mov	r0, r1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ce2:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ce4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
}
 8001ce8:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001cea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001cee:	f7ff ffd3 	bl	8001c98 <HAL_DMA2D_MspInit>
 8001cf2:	e7db      	b.n	8001cac <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001cf8:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cfa:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001cfe:	2c01      	cmp	r4, #1
 8001d00:	d03c      	beq.n	8001d7c <HAL_DMA2D_Start+0x84>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d02:	2402      	movs	r4, #2
  uint32_t tmp2 = 0U;
  uint32_t tmp3 = 0U;
  uint32_t tmp4 = 0U;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8001d04:	6805      	ldr	r5, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d06:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8001d0a:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8001d0c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 8001d0e:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
 8001d12:	4e27      	ldr	r6, [pc, #156]	; (8001db0 <HAL_DMA2D_Start+0xb8>)
 8001d14:	fa96 f6a6 	rbit	r6, r6
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8001d18:	fab6 f686 	clz	r6, r6
 8001d1c:	fa03 f606 	lsl.w	r6, r3, r6
 8001d20:	9b03      	ldr	r3, [sp, #12]
 8001d22:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001d26:	4323      	orrs	r3, r4

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d28:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8001d2a:	4333      	orrs	r3, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d2c:	f5b4 3f40 	cmp.w	r4, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8001d30:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001d32:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA2D_Start+0x4e>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001d36:	60e9      	str	r1, [r5, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	602b      	str	r3, [r5, #0]
  return HAL_OK;
 8001d40:	2000      	movs	r0, #0
}
 8001d42:	bc70      	pop	{r4, r5, r6}
 8001d44:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001d46:	6882      	ldr	r2, [r0, #8]
 8001d48:	b1b2      	cbz	r2, 8001d78 <HAL_DMA2D_Start+0x80>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001d4a:	2a01      	cmp	r2, #1
 8001d4c:	d024      	beq.n	8001d98 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001d4e:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001d50:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001d54:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001d58:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001d5a:	d020      	beq.n	8001d9e <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001d5c:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001d5e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001d62:	d00e      	beq.n	8001d82 <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 8001d64:	0d1b      	lsrs	r3, r3, #20
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001d66:	021b      	lsls	r3, r3, #8
      tmp3 = (tmp3 >> 12U);
 8001d68:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001d6a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001d6e:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8001d72:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001d74:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001d78:	63a9      	str	r1, [r5, #56]	; 0x38
 8001d7a:	e7dd      	b.n	8001d38 <HAL_DMA2D_Start+0x40>
  __HAL_LOCK(hdma2d);
 8001d7c:	2002      	movs	r0, #2
}
 8001d7e:	bc70      	pop	{r4, r5, r6}
 8001d80:	4770      	bx	lr
      tmp2 = (tmp2 >> 19U);
 8001d82:	0cda      	lsrs	r2, r3, #19
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001d84:	0292      	lsls	r2, r2, #10
      tmp3 = (tmp3 >> 11U);
 8001d86:	0ae3      	lsrs	r3, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001d88:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 8001d8c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8001d90:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001d92:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001d96:	e7ef      	b.n	8001d78 <HAL_DMA2D_Start+0x80>
      tmp = (tmp3 | tmp2 | tmp4);
 8001d98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001d9c:	e7ec      	b.n	8001d78 <HAL_DMA2D_Start+0x80>
      tmp2 = (tmp2 >> 19U);
 8001d9e:	0cd9      	lsrs	r1, r3, #19
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001da0:	02c9      	lsls	r1, r1, #11
      tmp3 = (tmp3 >> 10U);
 8001da2:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001da4:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8001da8:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8001dac:	e7e4      	b.n	8001d78 <HAL_DMA2D_Start+0x80>
 8001dae:	bf00      	nop
 8001db0:	3fff0000 	.word	0x3fff0000

08001db4 <HAL_DMA2D_PollForTransfer>:
{
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	b082      	sub	sp, #8
  __IO uint32_t isrflags = 0x0U;
 8001db8:	2200      	movs	r2, #0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001dba:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t isrflags = 0x0U;
 8001dbc:	9201      	str	r2, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	07d2      	lsls	r2, r2, #31
{
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001dc6:	d420      	bmi.n	8001e0a <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	0690      	lsls	r0, r2, #26
 8001dcc:	d402      	bmi.n	8001dd4 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8001dd0:	0691      	lsls	r1, r2, #26
 8001dd2:	d50f      	bpl.n	8001df4 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 8001dd4:	f7ff fdaa 	bl	800192c <HAL_GetTick>
 8001dd8:	4606      	mov	r6, r0
 8001dda:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	d006      	beq.n	8001dee <HAL_DMA2D_PollForTransfer+0x3a>
 8001de0:	e032      	b.n	8001e48 <HAL_DMA2D_PollForTransfer+0x94>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001de6:	9a01      	ldr	r2, [sp, #4]
 8001de8:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001dec:	d147      	bne.n	8001e7e <HAL_DMA2D_PollForTransfer+0xca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	06d1      	lsls	r1, r2, #27
 8001df2:	d5f6      	bpl.n	8001de2 <HAL_DMA2D_PollForTransfer+0x2e>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001df4:	2012      	movs	r0, #18
  __HAL_UNLOCK(hdma2d);
 8001df6:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001df8:	2101      	movs	r1, #1
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001dfa:	6098      	str	r0, [r3, #8]
  return HAL_OK;
 8001dfc:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dfe:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001e02:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 8001e06:	b002      	add	sp, #8
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001e0a:	f7ff fd8f 	bl	800192c <HAL_GetTick>
 8001e0e:	4606      	mov	r6, r0
 8001e10:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	d153      	bne.n	8001ebe <HAL_DMA2D_PollForTransfer+0x10a>
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	0791      	lsls	r1, r2, #30
 8001e1a:	d4d5      	bmi.n	8001dc8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001e20:	9a01      	ldr	r2, [sp, #4]
 8001e22:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001e26:	d0f6      	beq.n	8001e16 <HAL_DMA2D_PollForTransfer+0x62>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001e28:	9a01      	ldr	r2, [sp, #4]
 8001e2a:	0696      	lsls	r6, r2, #26
 8001e2c:	d503      	bpl.n	8001e36 <HAL_DMA2D_PollForTransfer+0x82>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e30:	f042 0202 	orr.w	r2, r2, #2
 8001e34:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001e36:	9a01      	ldr	r2, [sp, #4]
 8001e38:	07d5      	lsls	r5, r2, #31
 8001e3a:	d503      	bpl.n	8001e44 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e44:	2021      	movs	r0, #33	; 0x21
 8001e46:	e030      	b.n	8001eaa <HAL_DMA2D_PollForTransfer+0xf6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	d4d2      	bmi.n	8001df4 <HAL_DMA2D_PollForTransfer+0x40>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001e52:	9a01      	ldr	r2, [sp, #4]
 8001e54:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001e58:	d111      	bne.n	8001e7e <HAL_DMA2D_PollForTransfer+0xca>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e5a:	b125      	cbz	r5, 8001e66 <HAL_DMA2D_PollForTransfer+0xb2>
 8001e5c:	f7ff fd66 	bl	800192c <HAL_GetTick>
 8001e60:	1b80      	subs	r0, r0, r6
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d9b9      	bls.n	8001dda <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001e68:	2203      	movs	r2, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
          __HAL_UNLOCK(hdma2d);
 8001e6e:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e70:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001e72:	4610      	mov	r0, r2
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001e74:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001e78:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001e7c:	e7c3      	b.n	8001e06 <HAL_DMA2D_PollForTransfer+0x52>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001e7e:	9a01      	ldr	r2, [sp, #4]
 8001e80:	0712      	lsls	r2, r2, #28
 8001e82:	d503      	bpl.n	8001e8c <HAL_DMA2D_PollForTransfer+0xd8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e86:	f042 0204 	orr.w	r2, r2, #4
 8001e8a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001e8c:	9a01      	ldr	r2, [sp, #4]
 8001e8e:	0696      	lsls	r6, r2, #26
 8001e90:	d503      	bpl.n	8001e9a <HAL_DMA2D_PollForTransfer+0xe6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e94:	f042 0202 	orr.w	r2, r2, #2
 8001e98:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001e9a:	9a01      	ldr	r2, [sp, #4]
 8001e9c:	07d5      	lsls	r5, r2, #31
 8001e9e:	d503      	bpl.n	8001ea8 <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ea0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ea8:	2029      	movs	r0, #41	; 0x29
 8001eaa:	6098      	str	r0, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001eac:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8001eae:	2200      	movs	r2, #0
        return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001eb2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001eb6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	0792      	lsls	r2, r2, #30
 8001ec2:	d481      	bmi.n	8001dc8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001ec8:	9a01      	ldr	r2, [sp, #4]
 8001eca:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001ece:	d1ab      	bne.n	8001e28 <HAL_DMA2D_PollForTransfer+0x74>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	d0c8      	beq.n	8001e66 <HAL_DMA2D_PollForTransfer+0xb2>
 8001ed4:	f7ff fd2a 	bl	800192c <HAL_GetTick>
 8001ed8:	1b80      	subs	r0, r0, r6
 8001eda:	42a8      	cmp	r0, r5
 8001edc:	d998      	bls.n	8001e10 <HAL_DMA2D_PollForTransfer+0x5c>
 8001ede:	e7c2      	b.n	8001e66 <HAL_DMA2D_PollForTransfer+0xb2>

08001ee0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001ee0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d05d      	beq.n	8001fa4 <HAL_DMA2D_ConfigLayer+0xc4>
{
 8001ee8:	b4f0      	push	{r4, r5, r6, r7}
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eea:	eb00 1401 	add.w	r4, r0, r1, lsl #4
 8001eee:	e9d4 7307 	ldrd	r7, r3, [r4, #28]
  __HAL_LOCK(hdma2d);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8001ef8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001efc:	f1a7 0209 	sub.w	r2, r7, #9
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f00:	2502      	movs	r5, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f02:	2a01      	cmp	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f04:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8001f08:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001f0c:	6805      	ldr	r5, [r0, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f0e:	d927      	bls.n	8001f60 <HAL_DMA2D_ConfigLayer+0x80>
 8001f10:	fa96 f6a6 	rbit	r6, r6
 8001f14:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8001f18:	fab6 f686 	clz	r6, r6
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	fa0c f202 	lsl.w	r2, ip, r2
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	433b      	orrs	r3, r7
  if(LayerIdx == 0)
 8001f2e:	b179      	cbz	r1, 8001f50 <HAL_DMA2D_ConfigLayer+0x70>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f30:	69ee      	ldr	r6, [r5, #28]
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_DMA2D_ConfigLayer+0xc8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f34:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f36:	4032      	ands	r2, r6
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61eb      	str	r3, [r5, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f3c:	6129      	str	r1, [r5, #16]
  __HAL_UNLOCK(hdma2d);
 8001f3e:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f40:	2201      	movs	r2, #1
 8001f42:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001f46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 8001f4a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001f4c:	4618      	mov	r0, r3
}
 8001f4e:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f50:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <HAL_DMA2D_ConfigLayer+0xc8>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f54:	6981      	ldr	r1, [r0, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f56:	4022      	ands	r2, r4
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	626b      	str	r3, [r5, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f5c:	61a9      	str	r1, [r5, #24]
 8001f5e:	e7ee      	b.n	8001f3e <HAL_DMA2D_ConfigLayer+0x5e>
 8001f60:	fa96 f6a6 	rbit	r6, r6
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f64:	fab6 f686 	clz	r6, r6
 8001f68:	f00c 427f 	and.w	r2, ip, #4278190080	; 0xff000000
 8001f6c:	fa03 f606 	lsl.w	r6, r3, r6
 8001f70:	4317      	orrs	r7, r2
 8001f72:	4337      	orrs	r7, r6
  if(LayerIdx == 0)
 8001f74:	b151      	cbz	r1, 8001f8c <HAL_DMA2D_ConfigLayer+0xac>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f76:	69ea      	ldr	r2, [r5, #28]
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_DMA2D_ConfigLayer+0xc8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f7a:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	431f      	orrs	r7, r3
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001f80:	f02c 427f 	bic.w	r2, ip, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f84:	61ef      	str	r7, [r5, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f86:	6129      	str	r1, [r5, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001f88:	622a      	str	r2, [r5, #32]
 8001f8a:	e7d8      	b.n	8001f3e <HAL_DMA2D_ConfigLayer+0x5e>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f8c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_DMA2D_ConfigLayer+0xc8>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001f90:	6a42      	ldr	r2, [r0, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f92:	400b      	ands	r3, r1
 8001f94:	431f      	orrs	r7, r3
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001f96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f9a:	6983      	ldr	r3, [r0, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001f9c:	626f      	str	r7, [r5, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f9e:	61ab      	str	r3, [r5, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001fa0:	62aa      	str	r2, [r5, #40]	; 0x28
 8001fa2:	e7cc      	b.n	8001f3e <HAL_DMA2D_ConfigLayer+0x5e>
  __HAL_LOCK(hdma2d);
 8001fa4:	2002      	movs	r0, #2
}
 8001fa6:	4770      	bx	lr
 8001fa8:	00fcfff0 	.word	0x00fcfff0

08001fac <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */ 
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <HAL_DSI_Init>:
  if(hdsi == NULL)
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	f000 809a 	beq.w	80020ea <HAL_DSI_Init+0x13a>
{
 8001fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdsi->State == HAL_DSI_STATE_RESET)
 8001fb8:	7c43      	ldrb	r3, [r0, #17]
 8001fba:	4604      	mov	r4, r0
 8001fbc:	460e      	mov	r6, r1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8090 	beq.w	80020e4 <HAL_DSI_Init+0x134>
    __HAL_DSI_REG_ENABLE(hdsi);
 8001fc4:	6822      	ldr	r2, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	7463      	strb	r3, [r4, #17]
    __HAL_DSI_REG_ENABLE(hdsi);
 8001fca:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
    tickstart = HAL_GetTick();
 8001fd6:	f7ff fca9 	bl	800192c <HAL_GetTick>
 8001fda:	4605      	mov	r5, r0
	while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == RESET)
 8001fdc:	e005      	b.n	8001fea <HAL_DSI_Init+0x3a>
      if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8001fde:	f7ff fca5 	bl	800192c <HAL_GetTick>
 8001fe2:	1b40      	subs	r0, r0, r5
 8001fe4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fe8:	d87a      	bhi.n	80020e0 <HAL_DSI_Init+0x130>
	while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == RESET)
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ff0:	04d1      	lsls	r1, r2, #19
 8001ff2:	d5f4      	bpl.n	8001fde <HAL_DSI_Init+0x2e>
    hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8001ff4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV)<<2U) | ((PLLInit->PLLIDF)<<11U) | ((PLLInit->PLLODF)<<16U));
 8001ff8:	68b0      	ldr	r0, [r6, #8]
 8001ffa:	e9d6 5200 	ldrd	r5, r2, [r6]
    hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8001ffe:	f421 315e 	bic.w	r1, r1, #227328	; 0x37800
 8002002:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
 8002006:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
    hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV)<<2U) | ((PLLInit->PLLIDF)<<11U) | ((PLLInit->PLLODF)<<16U));
 800200a:	02d2      	lsls	r2, r2, #11
 800200c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002010:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002014:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002018:	430a      	orrs	r2, r1
 800201a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    __HAL_DSI_PLL_ENABLE(hdsi);
 800201e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    tickstart = HAL_GetTick();
 800202a:	f7ff fc7f 	bl	800192c <HAL_GetTick>
 800202e:	4605      	mov	r5, r0
    while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == RESET)
 8002030:	e005      	b.n	800203e <HAL_DSI_Init+0x8e>
      if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002032:	f7ff fc7b 	bl	800192c <HAL_GetTick>
 8002036:	1b40      	subs	r0, r0, r5
 8002038:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800203c:	d850      	bhi.n	80020e0 <HAL_DSI_Init+0x130>
    while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == RESET)
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002044:	05d2      	lsls	r2, r2, #23
 8002046:	d5f4      	bpl.n	8002032 <HAL_DSI_Init+0x82>
    hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002048:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
    hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800204c:	68e5      	ldr	r5, [r4, #12]
    hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800204e:	6862      	ldr	r2, [r4, #4]
    hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002050:	68a7      	ldr	r7, [r4, #8]
    hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002052:	f041 0106 	orr.w	r1, r1, #6
 8002056:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800205a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800205e:	f021 0103 	bic.w	r1, r1, #3
 8002062:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002066:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002074:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 8002078:	f020 0003 	bic.w	r0, r0, #3
 800207c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
    hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002080:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002084:	432a      	orrs	r2, r5
 8002086:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800208a:	6898      	ldr	r0, [r3, #8]
    tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800208c:	6875      	ldr	r5, [r6, #4]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_DSI_Init+0x140>)
    hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002090:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002094:	6098      	str	r0, [r3, #8]
    hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	4339      	orrs	r1, r7
 800209a:	6099      	str	r1, [r3, #8]
    tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800209c:	b10d      	cbz	r5, 80020a2 <HAL_DSI_Init+0xf2>
 800209e:	fb02 f205 	mul.w	r2, r2, r5
    hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80020a2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    unitIntervalx4 = (4000000U * tempIDF * (1U << PLLInit->PLLODF)) / ((HSE_VALUE/1000U) * PLLInit->PLLNDIV);
 80020a6:	68b7      	ldr	r7, [r6, #8]
 80020a8:	6836      	ldr	r6, [r6, #0]
    hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80020aa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80020ae:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
    hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80020b2:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    unitIntervalx4 = (4000000U * tempIDF * (1U << PLLInit->PLLODF)) / ((HSE_VALUE/1000U) * PLLInit->PLLNDIV);
 80020b6:	f246 15a8 	movw	r5, #25000	; 0x61a8
    hdsi->Instance->IER[0U] = 0U;
 80020ba:	2100      	movs	r1, #0
    unitIntervalx4 = (4000000U * tempIDF * (1U << PLLInit->PLLODF)) / ((HSE_VALUE/1000U) * PLLInit->PLLNDIV);
 80020bc:	fb05 f506 	mul.w	r5, r5, r6
 80020c0:	40ba      	lsls	r2, r7
 80020c2:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->State = HAL_DSI_STATE_READY;
 80020c6:	2501      	movs	r5, #1
    hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80020c8:	4302      	orrs	r2, r0
 80020ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  return HAL_OK;
 80020ce:	4608      	mov	r0, r1
    hdsi->Instance->IER[0U] = 0U;
 80020d0:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    hdsi->Instance->IER[1U] = 0U;
 80020d4:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80020d8:	6161      	str	r1, [r4, #20]
    hdsi->ErrorMsk = 0U;
 80020da:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80020dc:	7465      	strb	r5, [r4, #17]
}
 80020de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80020e0:	2003      	movs	r0, #3
}
 80020e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 80020e4:	f7ff ff62 	bl	8001fac <HAL_DSI_MspInit>
 80020e8:	e76c      	b.n	8001fc4 <HAL_DSI_Init+0x14>
    return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	003d0900 	.word	0x003d0900

080020f4 <HAL_DSI_MspDeInit>:
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <HAL_DSI_DeInit>:
  if(hdsi == NULL)
 80020f8:	b338      	cbz	r0, 800214a <HAL_DSI_DeInit+0x52>
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80020fa:	6803      	ldr	r3, [r0, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 80020fc:	2203      	movs	r2, #3
{
 80020fe:	b510      	push	{r4, lr}
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002100:	7442      	strb	r2, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002102:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  __HAL_DSI_DISABLE(hdsi);
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	605a      	str	r2, [r3, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002116:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800211a:	f022 0206 	bic.w	r2, r2, #6
 800211e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002122:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_REG_DISABLE(hdsi);
 800212e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002132:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002136:	4604      	mov	r4, r0
 8002138:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  HAL_DSI_MspDeInit(hdsi); 
 800213c:	f7ff ffda 	bl	80020f4 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002140:	2000      	movs	r0, #0
 8002142:	6160      	str	r0, [r4, #20]
  __HAL_UNLOCK(hdsi);
 8002144:	7420      	strb	r0, [r4, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 8002146:	7460      	strb	r0, [r4, #17]
}
 8002148:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800214a:	2001      	movs	r0, #1
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002150:	7c03      	ldrb	r3, [r0, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	f000 80fd 	beq.w	8002352 <HAL_DSI_ConfigVideoMode+0x202>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }
  
  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002158:	6803      	ldr	r3, [r0, #0]
  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
  
  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800215a:	f8df c204 	ldr.w	ip, [pc, #516]	; 8002360 <HAL_DSI_ConfigVideoMode+0x210>
{
 800215e:	b5f0      	push	{r4, r5, r6, r7, lr}
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002160:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if(VidCfg->ColorCoding == DSI_RGB666)
 8002162:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002164:	f025 0501 	bic.w	r5, r5, #1
  __HAL_LOCK(hdsi);
 8002168:	2201      	movs	r2, #1
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800216a:	e9d1 e703 	ldrd	lr, r7, [r1, #12]
  __HAL_LOCK(hdsi);
 800216e:	7402      	strb	r2, [r0, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002170:	635d      	str	r5, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002172:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8002176:	f026 0601 	bic.w	r6, r6, #1
 800217a:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800217e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8002180:	f026 0603 	bic.w	r6, r6, #3
 8002184:	639e      	str	r6, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002188:	694e      	ldr	r6, [r1, #20]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800218a:	ea42 020e 	orr.w	r2, r2, lr
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  
  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002192:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002196:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800219a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80021a0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80021a2:	433d      	orrs	r5, r7
 80021a4:	63dd      	str	r5, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80021a6:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80021a8:	ea07 070c 	and.w	r7, r7, ip
 80021ac:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80021ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80021b0:	680f      	ldr	r7, [r1, #0]
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80021b2:	4332      	orrs	r2, r6
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80021b6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80021b8:	ea06 060c 	and.w	r6, r6, ip
 80021bc:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80021be:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80021c0:	ea45 050e 	orr.w	r5, r5, lr
 80021c4:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80021c6:	68dd      	ldr	r5, [r3, #12]
 80021c8:	f025 0503 	bic.w	r5, r5, #3
 80021cc:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	433a      	orrs	r2, r7
 80021d2:	60da      	str	r2, [r3, #12]
  
  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80021d4:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80021d6:	69ce      	ldr	r6, [r1, #28]
 80021d8:	e9d1 7208 	ldrd	r7, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80021dc:	f025 0507 	bic.w	r5, r5, #7
 80021e0:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80021e2:	695d      	ldr	r5, [r3, #20]
 80021e4:	433a      	orrs	r2, r7
 80021e6:	4332      	orrs	r2, r6
 80021e8:	432a      	orrs	r2, r5
 80021ea:	615a      	str	r2, [r3, #20]
  
  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	f022 020f 	bic.w	r2, r2, #15
 80021f2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	4322      	orrs	r2, r4
 80021f8:	611a      	str	r2, [r3, #16]
    
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80021fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80021fe:	f022 020e 	bic.w	r2, r2, #14
 8002202:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding)<<1U);
 8002206:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
  
  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if(VidCfg->ColorCoding == DSI_RGB666)
 800220a:	2c03      	cmp	r4, #3
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding)<<1U);
 800220c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8002210:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if(VidCfg->ColorCoding == DSI_RGB666)
 8002214:	d107      	bne.n	8002226 <HAL_DSI_ConfigVideoMode+0xd6>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002216:	691c      	ldr	r4, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002218:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800221a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800221e:	611c      	str	r4, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	432a      	orrs	r2, r5
 8002224:	611a      	str	r2, [r3, #16]
  }
  
  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002226:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8002228:	4f4b      	ldr	r7, [pc, #300]	; (8002358 <HAL_DSI_ConfigVideoMode+0x208>)
 800222a:	403e      	ands	r6, r7
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
  
  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800222c:	e9d1 2c0a 	ldrd	r2, ip, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002230:	649e      	str	r6, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002232:	6c9c      	ldr	r4, [r3, #72]	; 0x48
  
  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002234:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002236:	4314      	orrs	r4, r2
 8002238:	649c      	str	r4, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800223a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800223c:	403d      	ands	r5, r7
 800223e:	64dd      	str	r5, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  
  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002242:	6b4f      	ldr	r7, [r1, #52]	; 0x34
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002244:	4d45      	ldr	r5, [pc, #276]	; (800235c <HAL_DSI_ConfigVideoMode+0x20c>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002246:	ea42 020c 	orr.w	r2, r2, ip
 800224a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800224c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  
  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800224e:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002252:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002256:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800225a:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800225c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800225e:	4334      	orrs	r4, r6
 8002260:	651c      	str	r4, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002262:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8002264:	402e      	ands	r6, r5
 8002266:	655e      	str	r6, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800226a:	433a      	orrs	r2, r7
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800226e:	6d9e      	ldr	r6, [r3, #88]	; 0x58
  
  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002270:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002272:	402e      	ands	r6, r5
 8002274:	659e      	str	r6, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002276:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002278:	ea44 040c 	orr.w	r4, r4, ip
 800227c:	659c      	str	r4, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800227e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8002280:	402c      	ands	r4, r5
 8002282:	65dc      	str	r4, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002286:	433a      	orrs	r2, r7
 8002288:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800228a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800228c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002290:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002294:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002296:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
  
  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize)<<16U);
 8002298:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  
  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800229a:	6cce      	ldr	r6, [r1, #76]	; 0x4c
  
  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800229c:	f8d1 e050 	ldr.w	lr, [r1, #80]	; 0x50
  
  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80022a0:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80022a4:	e9d1 5410 	ldrd	r5, r4, [r1, #64]	; 0x40
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80022a8:	432a      	orrs	r2, r5
 80022aa:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80022ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80022b4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80022b6:	4325      	orrs	r5, r4
 80022b8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80022ba:	699d      	ldr	r5, [r3, #24]
 80022bc:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
 80022c0:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize)<<16U);
 80022c2:	699c      	ldr	r4, [r3, #24]
 80022c4:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80022c8:	619c      	str	r4, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80022ca:	699c      	ldr	r4, [r3, #24]
  
  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80022cc:	6d8f      	ldr	r7, [r1, #88]	; 0x58
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80022ce:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 80022d2:	619c      	str	r4, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	4332      	orrs	r2, r6
 80022d8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80022da:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80022dc:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
 80022e0:	639e      	str	r6, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80022e2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80022e4:	ea45 050e 	orr.w	r5, r5, lr
 80022e8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80022ea:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80022ec:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80022f0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80022f2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80022f4:	ea44 040c 	orr.w	r4, r4, ip
 80022f8:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80022fa:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80022fc:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8002300:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002304:	433a      	orrs	r2, r7
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002308:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800230a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
  
  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800230e:	e9d1 4c17 	ldrd	r4, ip, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
  
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002312:	e9d1 7619 	ldrd	r7, r6, [r1, #100]	; 0x64
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002316:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231a:	4322      	orrs	r2, r4
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800231e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8002320:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8002324:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002326:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002328:	ea44 040c 	orr.w	r4, r4, ip
 800232c:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800232e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002330:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8002334:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002336:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002338:	4339      	orrs	r1, r7
 800233a:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800233c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800233e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002342:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002346:	2100      	movs	r1, #0
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002348:	4332      	orrs	r2, r6
 800234a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800234c:	7401      	strb	r1, [r0, #16]
  
  return HAL_OK;
}
 800234e:	4608      	mov	r0, r1
 8002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdsi);
 8002352:	2302      	movs	r3, #2
}
 8002354:	4618      	mov	r0, r3
 8002356:	4770      	bx	lr
 8002358:	fffff000 	.word	0xfffff000
 800235c:	fffffc00 	.word	0xfffffc00
 8002360:	ffffe000 	.word	0xffffe000

08002364 <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002364:	7c03      	ldrb	r3, [r0, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d037      	beq.n	80023da <HAL_DSI_ConfigPhyTimer+0x76>
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
  */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800236a:	6803      	ldr	r3, [r0, #0]
{
 800236c:	b4f0      	push	{r4, r5, r6, r7}
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800236e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime)? PhyTimers->ClockLaneLP2HSTime: PhyTimers->ClockLaneHS2LPTime;
 8002372:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime)<<16U));
  
  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime)<<16U) | ((PhyTimers->DataLaneHS2LPTime)<<24U));
 8002374:	e9d1 6201 	ldrd	r6, r2, [r1, #4]
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002378:	f005 25fc 	and.w	r5, r5, #4227922944	; 0xfc00fc00
 800237c:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime)<<16U));
 8002380:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime)? PhyTimers->ClockLaneLP2HSTime: PhyTimers->ClockLaneHS2LPTime;
 8002384:	42a6      	cmp	r6, r4
 8002386:	bf38      	it	cc
 8002388:	4626      	movcc	r6, r4
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime)<<16U));
 800238a:	ea45 4406 	orr.w	r4, r5, r6, lsl #16
 800238e:	4334      	orrs	r4, r6
 8002390:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002394:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
  
  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime)<<8U);
 8002398:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime)<<16U) | ((PhyTimers->DataLaneHS2LPTime)<<24U));
 800239a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800239e:	f404 4400 	and.w	r4, r4, #32768	; 0x8000
 80023a2:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime)<<16U) | ((PhyTimers->DataLaneHS2LPTime)<<24U));
 80023a6:	0612      	lsls	r2, r2, #24
 80023a8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80023ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80023b0:	4332      	orrs	r2, r6
 80023b2:	430a      	orrs	r2, r1
 80023b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80023b8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80023bc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80023c0:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime)<<8U);
 80023c4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80023c8:	2100      	movs	r1, #0
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime)<<8U);
 80023ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80023ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  
  return HAL_OK;
}
 80023d2:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(hdsi);
 80023d4:	7401      	strb	r1, [r0, #16]
}
 80023d6:	4608      	mov	r0, r1
 80023d8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80023da:	2302      	movs	r3, #2
}
 80023dc:	4618      	mov	r0, r3
 80023de:	4770      	bx	lr

080023e0 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80023e0:	7c03      	ldrb	r3, [r0, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d012      	beq.n	800240c <HAL_DSI_Start+0x2c>
  
  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80023e6:	6803      	ldr	r3, [r0, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	f041 0101 	orr.w	r1, r1, #1
{
 80023ee:	b410      	push	{r4}
  __HAL_DSI_ENABLE(hdsi);
 80023f0:	6059      	str	r1, [r3, #4]
  
  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80023f2:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 80023f6:	4602      	mov	r2, r0
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80023f8:	2400      	movs	r4, #0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80023fa:	f041 0108 	orr.w	r1, r1, #8
  
  return HAL_OK;
 80023fe:	4620      	mov	r0, r4
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002400:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8002404:	7414      	strb	r4, [r2, #16]
}
 8002406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800240a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800240c:	2002      	movs	r0, #2
}
 800240e:	4770      	bx	lr

08002410 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart = 0U;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002414:	7c04      	ldrb	r4, [r0, #16]
 8002416:	2c01      	cmp	r4, #1
 8002418:	d025      	beq.n	8002466 <HAL_DSI_ShortWrite+0x56>
 800241a:	469a      	mov	sl, r3
 800241c:	2301      	movs	r3, #1
 800241e:	7403      	strb	r3, [r0, #16]
 8002420:	4690      	mov	r8, r2
 8002422:	4689      	mov	r9, r1
 8002424:	4606      	mov	r6, r0
  
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));
  
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002426:	f7ff fa81 	bl	800192c <HAL_GetTick>
 800242a:	4607      	mov	r7, r0
 800242c:	e005      	b.n	800243a <HAL_DSI_ShortWrite+0x2a>
  
  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800242e:	f7ff fa7d 	bl	800192c <HAL_GetTick>
 8002432:	1bc0      	subs	r0, r0, r7
 8002434:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002438:	d811      	bhi.n	800245e <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800243a:	6835      	ldr	r5, [r6, #0]
 800243c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800243e:	f014 0401 	ands.w	r4, r4, #1
 8002442:	d0f4      	beq.n	800242e <HAL_DSI_ShortWrite+0x1e>
  DSIx->GHCR = (DataType | (ChannelID<<6U) | (Data0<<8U) | (Data1<<16U));
 8002444:	9b08      	ldr	r3, [sp, #32]
 8002446:	ea48 210a 	orr.w	r1, r8, sl, lsl #8
 800244a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800244e:	ea41 1189 	orr.w	r1, r1, r9, lsl #6
                         Mode,
                         Param1,
                         Param2);
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002452:	2300      	movs	r3, #0
  DSIx->GHCR = (DataType | (ChannelID<<6U) | (Data0<<8U) | (Data1<<16U));
 8002454:	66e9      	str	r1, [r5, #108]	; 0x6c
  
  return HAL_OK;
 8002456:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 8002458:	7433      	strb	r3, [r6, #16]
}
 800245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_UNLOCK(hdsi);
 800245e:	7434      	strb	r4, [r6, #16]
      return HAL_TIMEOUT;
 8002460:	2003      	movs	r0, #3
}
 8002462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8002466:	2002      	movs	r0, #2
}
 8002468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800246c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t* ParametersTable)
{
 800246c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t uicounter = 0U, nbBytes = 0U, count = 0U;
  uint32_t tickstart = 0U;
  uint32_t fifoword = 0U;
  
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002470:	7c04      	ldrb	r4, [r0, #16]
 8002472:	2c01      	cmp	r4, #1
 8002474:	d05d      	beq.n	8002532 <HAL_DSI_LongWrite+0xc6>
 8002476:	461e      	mov	r6, r3
 8002478:	2301      	movs	r3, #1
 800247a:	7403      	strb	r3, [r0, #16]
 800247c:	4690      	mov	r8, r2
 800247e:	460f      	mov	r7, r1
 8002480:	4605      	mov	r5, r0
  
  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));
  
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002482:	f7ff fa53 	bl	800192c <HAL_GetTick>
 8002486:	4681      	mov	r9, r0
  
  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == RESET)
 8002488:	e006      	b.n	8002498 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800248a:	f7ff fa4f 	bl	800192c <HAL_GetTick>
 800248e:	eba0 0009 	sub.w	r0, r0, r9
 8002492:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002496:	d848      	bhi.n	800252a <HAL_DSI_LongWrite+0xbe>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == RESET)
 8002498:	682a      	ldr	r2, [r5, #0]
 800249a:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800249c:	f014 0401 	ands.w	r4, r4, #1
 80024a0:	d0f3      	beq.n	800248a <HAL_DSI_LongWrite+0x1e>
    }
  }
  
  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80024a2:	2e03      	cmp	r6, #3
 80024a4:	4634      	mov	r4, r6
 80024a6:	bf28      	it	cs
 80024a8:	2403      	movcs	r4, #3
  
  for(count = 0U; count < nbBytes; count++)
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d044      	beq.n	8002538 <HAL_DSI_LongWrite+0xcc>
  {
    fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U + (8U*count)));
 80024ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024b0:	9908      	ldr	r1, [sp, #32]
 80024b2:	781b      	ldrb	r3, [r3, #0]
  for(count = 0U; count < nbBytes; count++)
 80024b4:	2e01      	cmp	r6, #1
    fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U + (8U*count)));
 80024b6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  for(count = 0U; count < nbBytes; count++)
 80024ba:	d909      	bls.n	80024d0 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U + (8U*count)));
 80024bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024be:	7849      	ldrb	r1, [r1, #1]
  for(count = 0U; count < nbBytes; count++)
 80024c0:	2e02      	cmp	r6, #2
    fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U + (8U*count)));
 80024c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  for(count = 0U; count < nbBytes; count++)
 80024c6:	d903      	bls.n	80024d0 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U + (8U*count)));
 80024c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024ca:	7889      	ldrb	r1, [r1, #2]
 80024cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
  
  uicounter = NbParams - nbBytes;
  ParametersTable += nbBytes;
 80024d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024d4:	4423      	add	r3, r4
  /* Set the Next parameters on the write FIFO command*/
  while(uicounter != 0U)
 80024d6:	1b34      	subs	r4, r6, r4
 80024d8:	d016      	beq.n	8002508 <HAL_DSI_LongWrite+0x9c>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80024da:	2c04      	cmp	r4, #4
 80024dc:	4621      	mov	r1, r4
 80024de:	bf28      	it	cs
 80024e0:	2104      	movcs	r1, #4
    fifoword = 0U;
    for(count = 0U; count < nbBytes; count++)
 80024e2:	2c01      	cmp	r4, #1
    {
      fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U*count));
 80024e4:	7818      	ldrb	r0, [r3, #0]
    for(count = 0U; count < nbBytes; count++)
 80024e6:	d007      	beq.n	80024f8 <HAL_DSI_LongWrite+0x8c>
 80024e8:	2c02      	cmp	r4, #2
      fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U*count));
 80024ea:	8818      	ldrh	r0, [r3, #0]
    for(count = 0U; count < nbBytes; count++)
 80024ec:	d00b      	beq.n	8002506 <HAL_DSI_LongWrite+0x9a>
 80024ee:	2c03      	cmp	r4, #3
      fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U*count));
 80024f0:	f893 c002 	ldrb.w	ip, [r3, #2]
    for(count = 0U; count < nbBytes; count++)
 80024f4:	d005      	beq.n	8002502 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U*count));
 80024f6:	6818      	ldr	r0, [r3, #0]
    }
    hdsi->Instance->GPDR = fifoword;
 80024f8:	6710      	str	r0, [r2, #112]	; 0x70
  while(uicounter != 0U)
 80024fa:	1a64      	subs	r4, r4, r1
    
    uicounter -= nbBytes;
    ParametersTable += nbBytes;
 80024fc:	440b      	add	r3, r1
  while(uicounter != 0U)
 80024fe:	d1ec      	bne.n	80024da <HAL_DSI_LongWrite+0x6e>
 8002500:	e002      	b.n	8002508 <HAL_DSI_LongWrite+0x9c>
      fifoword |= (((uint32_t)(*(ParametersTable + count))) << (8U*count));
 8002502:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    hdsi->Instance->GPDR = fifoword;
 8002506:	6710      	str	r0, [r2, #112]	; 0x70
  
  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams+1U)&0x00FFU),
 8002508:	3601      	adds	r6, #1
  DSIx->GHCR = (DataType | (ChannelID<<6U) | (Data0<<8U) | (Data1<<16U));
 800250a:	0233      	lsls	r3, r6, #8
 800250c:	ea48 1787 	orr.w	r7, r8, r7, lsl #6
 8002510:	fa1f f883 	uxth.w	r8, r3
 8002514:	ea47 0708 	orr.w	r7, r7, r8
 8002518:	f403 067f 	and.w	r6, r3, #16711680	; 0xff0000
 800251c:	433e      	orrs	r6, r7
                         (((NbParams+1U)&0xFF00U)>>8U));
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800251e:	2300      	movs	r3, #0
  DSIx->GHCR = (DataType | (ChannelID<<6U) | (Data0<<8U) | (Data1<<16U));
 8002520:	66d6      	str	r6, [r2, #108]	; 0x6c
  
  return HAL_OK;
 8002522:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 8002524:	742b      	strb	r3, [r5, #16]
}
 8002526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hdsi);
 800252a:	742c      	strb	r4, [r5, #16]
      return HAL_TIMEOUT;
 800252c:	2003      	movs	r0, #3
}
 800252e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 8002532:	2002      	movs	r0, #2
}
 8002534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 8002538:	9b08      	ldr	r3, [sp, #32]
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e7e4      	b.n	8002508 <HAL_DSI_LongWrite+0x9c>
 800253e:	bf00      	nop

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002544:	f8df c260 	ldr.w	ip, [pc, #608]	; 80027a8 <HAL_GPIO_Init+0x268>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002548:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80027ac <HAL_GPIO_Init+0x26c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254c:	f8d1 e000 	ldr.w	lr, [r1]
{
 8002550:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2500      	movs	r5, #0
 8002554:	e003      	b.n	800255e <HAL_GPIO_Init+0x1e>
 8002556:	3501      	adds	r5, #1
 8002558:	2d10      	cmp	r5, #16
 800255a:	f000 80a4 	beq.w	80026a6 <HAL_GPIO_Init+0x166>
    ioposition = 0x01U << position;
 800255e:	2301      	movs	r3, #1
 8002560:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 8002566:	42a3      	cmp	r3, r4
 8002568:	d1f5      	bne.n	8002556 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256a:	684e      	ldr	r6, [r1, #4]
 800256c:	f026 0a10 	bic.w	sl, r6, #16
 8002570:	f1ba 0f02 	cmp.w	sl, #2
 8002574:	f000 809a 	beq.w	80026ac <HAL_GPIO_Init+0x16c>
 8002578:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257c:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800257e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	fa02 f209 	lsl.w	r2, r2, r9
 8002586:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258c:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002594:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002598:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800259c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80025a0:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a2:	f240 80a9 	bls.w	80026f8 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->PUPDR;
 80025a6:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a8:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ac:	fa03 f309 	lsl.w	r3, r3, r9
 80025b0:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80025b2:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b4:	00f3      	lsls	r3, r6, #3
 80025b6:	d5ce      	bpl.n	8002556 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 80025c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80025cc:	f025 0203 	bic.w	r2, r5, #3
 80025d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80025d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d8:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80025dc:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025de:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80025e4:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	00bf      	lsls	r7, r7, #2
 80025ea:	230f      	movs	r3, #15
 80025ec:	40bb      	lsls	r3, r7
 80025ee:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_GPIO_Init+0x250>)
 80025f4:	4298      	cmp	r0, r3
 80025f6:	d02e      	beq.n	8002656 <HAL_GPIO_Init+0x116>
 80025f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fc:	4298      	cmp	r0, r3
 80025fe:	f000 808e 	beq.w	800271e <HAL_GPIO_Init+0x1de>
 8002602:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_GPIO_Init+0x254>)
 8002604:	4298      	cmp	r0, r3
 8002606:	f000 8091 	beq.w	800272c <HAL_GPIO_Init+0x1ec>
 800260a:	4b63      	ldr	r3, [pc, #396]	; (8002798 <HAL_GPIO_Init+0x258>)
 800260c:	4298      	cmp	r0, r3
 800260e:	f000 8094 	beq.w	800273a <HAL_GPIO_Init+0x1fa>
 8002612:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_GPIO_Init+0x25c>)
 8002614:	4298      	cmp	r0, r3
 8002616:	f000 8097 	beq.w	8002748 <HAL_GPIO_Init+0x208>
 800261a:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_GPIO_Init+0x260>)
 800261c:	4298      	cmp	r0, r3
 800261e:	f000 80a1 	beq.w	8002764 <HAL_GPIO_Init+0x224>
 8002622:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <HAL_GPIO_Init+0x264>)
 8002624:	4298      	cmp	r0, r3
 8002626:	f000 80a4 	beq.w	8002772 <HAL_GPIO_Init+0x232>
 800262a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80027b0 <HAL_GPIO_Init+0x270>
 800262e:	4548      	cmp	r0, r9
 8002630:	f000 8091 	beq.w	8002756 <HAL_GPIO_Init+0x216>
 8002634:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80027b4 <HAL_GPIO_Init+0x274>
 8002638:	4548      	cmp	r0, r9
 800263a:	f000 80a1 	beq.w	8002780 <HAL_GPIO_Init+0x240>
 800263e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80027b8 <HAL_GPIO_Init+0x278>
 8002642:	4548      	cmp	r0, r9
 8002644:	bf0c      	ite	eq
 8002646:	f04f 0909 	moveq.w	r9, #9
 800264a:	f04f 090a 	movne.w	r9, #10
 800264e:	fa09 f707 	lsl.w	r7, r9, r7
 8002652:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002656:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 800265a:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800265e:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8002662:	bf54      	ite	pl
 8002664:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002666:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 8002668:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 800266c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002670:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8002672:	bf54      	ite	pl
 8002674:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002676:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 8002678:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267c:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002680:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8002682:	bf54      	ite	pl
 8002684:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002686:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 8002688:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 800268c:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002690:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8002696:	bf54      	ite	pl
 8002698:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800269a:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269c:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 800269e:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	f47f af5c 	bne.w	800255e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80026a6:	b003      	add	sp, #12
 80026a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80026ac:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80026b0:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b4:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026bc:	00bf      	lsls	r7, r7, #2
 80026be:	f04f 0b0f 	mov.w	fp, #15
 80026c2:	fa0b fb07 	lsl.w	fp, fp, r7
 80026c6:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ca:	690a      	ldr	r2, [r1, #16]
 80026cc:	40ba      	lsls	r2, r7
 80026ce:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 80026d2:	f8c9 2020 	str.w	r2, [r9, #32]
 80026d6:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026da:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 80026dc:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e0:	fa02 f209 	lsl.w	r2, r2, r9
 80026e4:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e6:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ea:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ee:	fa07 f709 	lsl.w	r7, r7, r9
 80026f2:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 80026f6:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80026f8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fa:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	68cf      	ldr	r7, [r1, #12]
 8002700:	fa07 f709 	lsl.w	r7, r7, r9
 8002704:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002708:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800270a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800270e:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002712:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002716:	40af      	lsls	r7, r5
 8002718:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800271a:	6047      	str	r7, [r0, #4]
 800271c:	e743      	b.n	80025a6 <HAL_GPIO_Init+0x66>
 800271e:	f04f 0901 	mov.w	r9, #1
 8002722:	fa09 f707 	lsl.w	r7, r9, r7
 8002726:	ea4a 0a07 	orr.w	sl, sl, r7
 800272a:	e794      	b.n	8002656 <HAL_GPIO_Init+0x116>
 800272c:	f04f 0902 	mov.w	r9, #2
 8002730:	fa09 f707 	lsl.w	r7, r9, r7
 8002734:	ea4a 0a07 	orr.w	sl, sl, r7
 8002738:	e78d      	b.n	8002656 <HAL_GPIO_Init+0x116>
 800273a:	f04f 0903 	mov.w	r9, #3
 800273e:	fa09 f707 	lsl.w	r7, r9, r7
 8002742:	ea4a 0a07 	orr.w	sl, sl, r7
 8002746:	e786      	b.n	8002656 <HAL_GPIO_Init+0x116>
 8002748:	f04f 0904 	mov.w	r9, #4
 800274c:	fa09 f707 	lsl.w	r7, r9, r7
 8002750:	ea4a 0a07 	orr.w	sl, sl, r7
 8002754:	e77f      	b.n	8002656 <HAL_GPIO_Init+0x116>
 8002756:	f04f 0907 	mov.w	r9, #7
 800275a:	fa09 f707 	lsl.w	r7, r9, r7
 800275e:	ea4a 0a07 	orr.w	sl, sl, r7
 8002762:	e778      	b.n	8002656 <HAL_GPIO_Init+0x116>
 8002764:	f04f 0905 	mov.w	r9, #5
 8002768:	fa09 f707 	lsl.w	r7, r9, r7
 800276c:	ea4a 0a07 	orr.w	sl, sl, r7
 8002770:	e771      	b.n	8002656 <HAL_GPIO_Init+0x116>
 8002772:	f04f 0906 	mov.w	r9, #6
 8002776:	fa09 f707 	lsl.w	r7, r9, r7
 800277a:	ea4a 0a07 	orr.w	sl, sl, r7
 800277e:	e76a      	b.n	8002656 <HAL_GPIO_Init+0x116>
 8002780:	f04f 0908 	mov.w	r9, #8
 8002784:	fa09 f707 	lsl.w	r7, r9, r7
 8002788:	ea4a 0a07 	orr.w	sl, sl, r7
 800278c:	e763      	b.n	8002656 <HAL_GPIO_Init+0x116>
 800278e:	bf00      	nop
 8002790:	40020000 	.word	0x40020000
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40013c00 	.word	0x40013c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40021c00 	.word	0x40021c00
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022400 	.word	0x40022400

080027bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027bc:	6903      	ldr	r3, [r0, #16]
 80027be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80027c0:	bf14      	ite	ne
 80027c2:	2001      	movne	r0, #1
 80027c4:	2000      	moveq	r0, #0
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c8:	b902      	cbnz	r2, 80027cc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ca:	0409      	lsls	r1, r1, #16
 80027cc:	6181      	str	r1, [r0, #24]
  }
}
 80027ce:	4770      	bx	lr

080027d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80027d4:	4605      	mov	r5, r0
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80027d6:	6800      	ldr	r0, [r0, #0]
{
 80027d8:	b082      	sub	sp, #8
 80027da:	4689      	mov	r9, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80027dc:	6801      	ldr	r1, [r0, #0]
{
 80027de:	9c08      	ldr	r4, [sp, #32]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80027e0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 80027e4:	4616      	mov	r6, r2
 80027e6:	461f      	mov	r7, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80027e8:	6001      	str	r1, [r0, #0]
 80027ea:	1c62      	adds	r2, r4, #1
 80027ec:	d12f      	bne.n	800284e <I2C_RequestMemoryWrite+0x7e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80027ee:	6943      	ldr	r3, [r0, #20]
 80027f0:	07db      	lsls	r3, r3, #31
 80027f2:	d5fc      	bpl.n	80027ee <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027f4:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 80027f8:	6101      	str	r1, [r0, #16]
 80027fa:	1c63      	adds	r3, r4, #1
 80027fc:	d003      	beq.n	8002806 <I2C_RequestMemoryWrite+0x36>
 80027fe:	e033      	b.n	8002868 <I2C_RequestMemoryWrite+0x98>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002800:	6943      	ldr	r3, [r0, #20]
 8002802:	055a      	lsls	r2, r3, #21
 8002804:	d440      	bmi.n	8002888 <I2C_RequestMemoryWrite+0xb8>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002806:	6943      	ldr	r3, [r0, #20]
 8002808:	0799      	lsls	r1, r3, #30
 800280a:	d5f9      	bpl.n	8002800 <I2C_RequestMemoryWrite+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	6943      	ldr	r3, [r0, #20]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6983      	ldr	r3, [r0, #24]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	1c62      	adds	r2, r4, #1
 800281c:	d003      	beq.n	8002826 <I2C_RequestMemoryWrite+0x56>
 800281e:	e064      	b.n	80028ea <I2C_RequestMemoryWrite+0x11a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002820:	6943      	ldr	r3, [r0, #20]
 8002822:	0559      	lsls	r1, r3, #21
 8002824:	d44b      	bmi.n	80028be <I2C_RequestMemoryWrite+0xee>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002826:	6943      	ldr	r3, [r0, #20]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	d5f9      	bpl.n	8002820 <I2C_RequestMemoryWrite+0x50>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282c:	2f01      	cmp	r7, #1
 800282e:	d00a      	beq.n	8002846 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002830:	0a33      	lsrs	r3, r6, #8
 8002832:	6103      	str	r3, [r0, #16]
 8002834:	1c67      	adds	r7, r4, #1
 8002836:	d003      	beq.n	8002840 <I2C_RequestMemoryWrite+0x70>
 8002838:	e071      	b.n	800291e <I2C_RequestMemoryWrite+0x14e>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283a:	6943      	ldr	r3, [r0, #20]
 800283c:	055a      	lsls	r2, r3, #21
 800283e:	d43e      	bmi.n	80028be <I2C_RequestMemoryWrite+0xee>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002840:	6943      	ldr	r3, [r0, #20]
 8002842:	0619      	lsls	r1, r3, #24
 8002844:	d5f9      	bpl.n	800283a <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002846:	b2f6      	uxtb	r6, r6
 8002848:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
 800284c:	e034      	b.n	80028b8 <I2C_RequestMemoryWrite+0xe8>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800284e:	6943      	ldr	r3, [r0, #20]
 8002850:	07d9      	lsls	r1, r3, #31
 8002852:	d4cf      	bmi.n	80027f4 <I2C_RequestMemoryWrite+0x24>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002854:	2c00      	cmp	r4, #0
 8002856:	d057      	beq.n	8002908 <I2C_RequestMemoryWrite+0x138>
 8002858:	f7ff f868 	bl	800192c <HAL_GetTick>
 800285c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800285e:	1ac0      	subs	r0, r0, r3
 8002860:	4284      	cmp	r4, r0
 8002862:	d351      	bcc.n	8002908 <I2C_RequestMemoryWrite+0x138>
 8002864:	6828      	ldr	r0, [r5, #0]
 8002866:	e7c0      	b.n	80027ea <I2C_RequestMemoryWrite+0x1a>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002868:	6943      	ldr	r3, [r0, #20]
 800286a:	079b      	lsls	r3, r3, #30
 800286c:	d4ce      	bmi.n	800280c <I2C_RequestMemoryWrite+0x3c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286e:	6943      	ldr	r3, [r0, #20]
 8002870:	055a      	lsls	r2, r3, #21
 8002872:	d409      	bmi.n	8002888 <I2C_RequestMemoryWrite+0xb8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002874:	2c00      	cmp	r4, #0
 8002876:	d061      	beq.n	800293c <I2C_RequestMemoryWrite+0x16c>
 8002878:	f7ff f858 	bl	800192c <HAL_GetTick>
 800287c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800287e:	1ac0      	subs	r0, r0, r3
 8002880:	4284      	cmp	r4, r0
 8002882:	d35b      	bcc.n	800293c <I2C_RequestMemoryWrite+0x16c>
 8002884:	6828      	ldr	r0, [r5, #0]
 8002886:	e7b8      	b.n	80027fa <I2C_RequestMemoryWrite+0x2a>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002888:	6803      	ldr	r3, [r0, #0]
 800288a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288e:	6003      	str	r3, [r0, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002890:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002896:	2104      	movs	r1, #4
      hi2c->State= HAL_I2C_STATE_READY;
 8002898:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	6144      	str	r4, [r0, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800289c:	6429      	str	r1, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800289e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80028a2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80028a4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d103      	bne.n	80028b6 <I2C_RequestMemoryWrite+0xe6>
      return HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
}
 80028b0:	b002      	add	sp, #8
 80028b2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      return HAL_TIMEOUT;
 80028b6:	2003      	movs	r0, #3
}
 80028b8:	b002      	add	sp, #8
 80028ba:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 80028be:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c0:	f46f 6480 	mvn.w	r4, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80028c4:	2104      	movs	r1, #4
    hi2c->State= HAL_I2C_STATE_READY;
 80028c6:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	6144      	str	r4, [r0, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80028ca:	6429      	str	r1, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d0:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80028d2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d1ec      	bne.n	80028b6 <I2C_RequestMemoryWrite+0xe6>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80028dc:	682a      	ldr	r2, [r5, #0]
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e4:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
 80028e8:	e7e6      	b.n	80028b8 <I2C_RequestMemoryWrite+0xe8>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ea:	6943      	ldr	r3, [r0, #20]
 80028ec:	061a      	lsls	r2, r3, #24
 80028ee:	d49d      	bmi.n	800282c <I2C_RequestMemoryWrite+0x5c>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f0:	6943      	ldr	r3, [r0, #20]
 80028f2:	0559      	lsls	r1, r3, #21
 80028f4:	d4e3      	bmi.n	80028be <I2C_RequestMemoryWrite+0xee>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028f6:	b34c      	cbz	r4, 800294c <I2C_RequestMemoryWrite+0x17c>
 80028f8:	f7ff f818 	bl	800192c <HAL_GetTick>
 80028fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028fe:	1ac0      	subs	r0, r0, r3
 8002900:	4284      	cmp	r4, r0
 8002902:	d323      	bcc.n	800294c <I2C_RequestMemoryWrite+0x17c>
 8002904:	6828      	ldr	r0, [r5, #0]
 8002906:	e788      	b.n	800281a <I2C_RequestMemoryWrite+0x4a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002908:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800290a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800290c:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800290e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002912:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    return HAL_TIMEOUT;
 8002916:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 800291c:	e7cc      	b.n	80028b8 <I2C_RequestMemoryWrite+0xe8>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291e:	6943      	ldr	r3, [r0, #20]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	d490      	bmi.n	8002846 <I2C_RequestMemoryWrite+0x76>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002924:	6943      	ldr	r3, [r0, #20]
 8002926:	055b      	lsls	r3, r3, #21
 8002928:	d4c9      	bmi.n	80028be <I2C_RequestMemoryWrite+0xee>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800292a:	b17c      	cbz	r4, 800294c <I2C_RequestMemoryWrite+0x17c>
 800292c:	f7fe fffe 	bl	800192c <HAL_GetTick>
 8002930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002932:	1ac0      	subs	r0, r0, r3
 8002934:	4284      	cmp	r4, r0
 8002936:	d309      	bcc.n	800294c <I2C_RequestMemoryWrite+0x17c>
 8002938:	6828      	ldr	r0, [r5, #0]
 800293a:	e77b      	b.n	8002834 <I2C_RequestMemoryWrite+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 800293c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800293e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002942:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002946:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 800294a:	e7ad      	b.n	80028a8 <I2C_RequestMemoryWrite+0xd8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800294e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 8002954:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002958:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 800295c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800295e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8002962:	e7b8      	b.n	80028d6 <I2C_RequestMemoryWrite+0x106>

08002964 <I2C_RequestMemoryRead>:
{
 8002964:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8002968:	4605      	mov	r5, r0
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800296a:	6800      	ldr	r0, [r0, #0]
{
 800296c:	4689      	mov	r9, r1
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800296e:	6801      	ldr	r1, [r0, #0]
 8002970:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002974:	6001      	str	r1, [r0, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002976:	6801      	ldr	r1, [r0, #0]
{
 8002978:	b082      	sub	sp, #8
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800297a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 800297e:	9c08      	ldr	r4, [sp, #32]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002980:	6001      	str	r1, [r0, #0]
{
 8002982:	4616      	mov	r6, r2
 8002984:	461f      	mov	r7, r3
 8002986:	1c61      	adds	r1, r4, #1
 8002988:	d149      	bne.n	8002a1e <I2C_RequestMemoryRead+0xba>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800298a:	6943      	ldr	r3, [r0, #20]
 800298c:	07da      	lsls	r2, r3, #31
 800298e:	d5fc      	bpl.n	800298a <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002990:	fa5f f989 	uxtb.w	r9, r9
 8002994:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8002998:	6103      	str	r3, [r0, #16]
 800299a:	1c62      	adds	r2, r4, #1
 800299c:	d003      	beq.n	80029a6 <I2C_RequestMemoryRead+0x42>
 800299e:	e04b      	b.n	8002a38 <I2C_RequestMemoryRead+0xd4>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a0:	6943      	ldr	r3, [r0, #20]
 80029a2:	0559      	lsls	r1, r3, #21
 80029a4:	d45a      	bmi.n	8002a5c <I2C_RequestMemoryRead+0xf8>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a6:	6943      	ldr	r3, [r0, #20]
 80029a8:	079b      	lsls	r3, r3, #30
 80029aa:	d5f9      	bpl.n	80029a0 <I2C_RequestMemoryRead+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ac:	2300      	movs	r3, #0
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	6943      	ldr	r3, [r0, #20]
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	6983      	ldr	r3, [r0, #24]
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	1c61      	adds	r1, r4, #1
 80029bc:	d003      	beq.n	80029c6 <I2C_RequestMemoryRead+0x62>
 80029be:	e07d      	b.n	8002abc <I2C_RequestMemoryRead+0x158>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c0:	6943      	ldr	r3, [r0, #20]
 80029c2:	055b      	lsls	r3, r3, #21
 80029c4:	d465      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x12e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c6:	6943      	ldr	r3, [r0, #20]
 80029c8:	061a      	lsls	r2, r3, #24
 80029ca:	d5f9      	bpl.n	80029c0 <I2C_RequestMemoryRead+0x5c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029cc:	2f01      	cmp	r7, #1
 80029ce:	f040 8090 	bne.w	8002af2 <I2C_RequestMemoryRead+0x18e>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d2:	b2f6      	uxtb	r6, r6
 80029d4:	6106      	str	r6, [r0, #16]
 80029d6:	1c67      	adds	r7, r4, #1
 80029d8:	d003      	beq.n	80029e2 <I2C_RequestMemoryRead+0x7e>
 80029da:	e097      	b.n	8002b0c <I2C_RequestMemoryRead+0x1a8>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029dc:	6943      	ldr	r3, [r0, #20]
 80029de:	0559      	lsls	r1, r3, #21
 80029e0:	d457      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x12e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e2:	6943      	ldr	r3, [r0, #20]
 80029e4:	061e      	lsls	r6, r3, #24
 80029e6:	d5f9      	bpl.n	80029dc <I2C_RequestMemoryRead+0x78>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80029e8:	6803      	ldr	r3, [r0, #0]
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6003      	str	r3, [r0, #0]
 80029f0:	1c63      	adds	r3, r4, #1
 80029f2:	f040 80ab 	bne.w	8002b4c <I2C_RequestMemoryRead+0x1e8>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80029f6:	6943      	ldr	r3, [r0, #20]
 80029f8:	07df      	lsls	r7, r3, #31
 80029fa:	d5fc      	bpl.n	80029f6 <I2C_RequestMemoryRead+0x92>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029fc:	f049 0901 	orr.w	r9, r9, #1
 8002a00:	f8c0 9010 	str.w	r9, [r0, #16]
 8002a04:	1c62      	adds	r2, r4, #1
 8002a06:	d003      	beq.n	8002a10 <I2C_RequestMemoryRead+0xac>
 8002a08:	e0c2      	b.n	8002b90 <I2C_RequestMemoryRead+0x22c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a0a:	6943      	ldr	r3, [r0, #20]
 8002a0c:	055b      	lsls	r3, r3, #21
 8002a0e:	d425      	bmi.n	8002a5c <I2C_RequestMemoryRead+0xf8>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a10:	6943      	ldr	r3, [r0, #20]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	f013 0302 	ands.w	r3, r3, #2
 8002a18:	d1f7      	bne.n	8002a0a <I2C_RequestMemoryRead+0xa6>
  return HAL_OK;
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	e032      	b.n	8002a84 <I2C_RequestMemoryRead+0x120>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002a1e:	6943      	ldr	r3, [r0, #20]
 8002a20:	07db      	lsls	r3, r3, #31
 8002a22:	d4b5      	bmi.n	8002990 <I2C_RequestMemoryRead+0x2c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d059      	beq.n	8002adc <I2C_RequestMemoryRead+0x178>
 8002a28:	f7fe ff80 	bl	800192c <HAL_GetTick>
 8002a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a2e:	1ac0      	subs	r0, r0, r3
 8002a30:	4284      	cmp	r4, r0
 8002a32:	d353      	bcc.n	8002adc <I2C_RequestMemoryRead+0x178>
 8002a34:	6828      	ldr	r0, [r5, #0]
 8002a36:	e7a6      	b.n	8002986 <I2C_RequestMemoryRead+0x22>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a38:	6943      	ldr	r3, [r0, #20]
 8002a3a:	079a      	lsls	r2, r3, #30
 8002a3c:	d4b6      	bmi.n	80029ac <I2C_RequestMemoryRead+0x48>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3e:	6943      	ldr	r3, [r0, #20]
 8002a40:	0559      	lsls	r1, r3, #21
 8002a42:	d40b      	bmi.n	8002a5c <I2C_RequestMemoryRead+0xf8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002a44:	2c00      	cmp	r4, #0
 8002a46:	f000 808f 	beq.w	8002b68 <I2C_RequestMemoryRead+0x204>
 8002a4a:	f7fe ff6f 	bl	800192c <HAL_GetTick>
 8002a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a50:	1ac0      	subs	r0, r0, r3
 8002a52:	4284      	cmp	r4, r0
 8002a54:	f0c0 8088 	bcc.w	8002b68 <I2C_RequestMemoryRead+0x204>
 8002a58:	6828      	ldr	r0, [r5, #0]
 8002a5a:	e79e      	b.n	800299a <I2C_RequestMemoryRead+0x36>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a5c:	6803      	ldr	r3, [r0, #0]
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a62:	6003      	str	r3, [r0, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a64:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a66:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a6a:	2104      	movs	r1, #4
      hi2c->State= HAL_I2C_STATE_READY;
 8002a6c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6e:	6144      	str	r4, [r0, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a70:	6429      	str	r1, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002a72:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a76:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002a78:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a7c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d103      	bne.n	8002a8a <I2C_RequestMemoryRead+0x126>
      return HAL_ERROR;
 8002a82:	2001      	movs	r0, #1
}
 8002a84:	b002      	add	sp, #8
 8002a86:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
}
 8002a8c:	b002      	add	sp, #8
 8002a8e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	f46f 6480 	mvn.w	r4, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a98:	2104      	movs	r1, #4
    hi2c->State= HAL_I2C_STATE_READY;
 8002a9a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	6144      	str	r4, [r0, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a9e:	6429      	str	r1, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002aa0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002aa6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aaa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d1ec      	bne.n	8002a8a <I2C_RequestMemoryRead+0x126>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ab0:	682a      	ldr	r2, [r5, #0]
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e7e2      	b.n	8002a82 <I2C_RequestMemoryRead+0x11e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002abc:	6943      	ldr	r3, [r0, #20]
 8002abe:	0619      	lsls	r1, r3, #24
 8002ac0:	d484      	bmi.n	80029cc <I2C_RequestMemoryRead+0x68>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac2:	6943      	ldr	r3, [r0, #20]
 8002ac4:	055b      	lsls	r3, r3, #21
 8002ac6:	d4e4      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002ac8:	2c00      	cmp	r4, #0
 8002aca:	d055      	beq.n	8002b78 <I2C_RequestMemoryRead+0x214>
 8002acc:	f7fe ff2e 	bl	800192c <HAL_GetTick>
 8002ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad2:	1ac0      	subs	r0, r0, r3
 8002ad4:	4284      	cmp	r4, r0
 8002ad6:	d34f      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x214>
 8002ad8:	6828      	ldr	r0, [r5, #0]
 8002ada:	e76e      	b.n	80029ba <I2C_RequestMemoryRead+0x56>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002adc:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002ade:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ae0:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002ae2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002ae6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    return HAL_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8002af0:	e7c8      	b.n	8002a84 <I2C_RequestMemoryRead+0x120>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002af2:	0a33      	lsrs	r3, r6, #8
 8002af4:	6103      	str	r3, [r0, #16]
 8002af6:	1c63      	adds	r3, r4, #1
 8002af8:	d003      	beq.n	8002b02 <I2C_RequestMemoryRead+0x19e>
 8002afa:	e017      	b.n	8002b2c <I2C_RequestMemoryRead+0x1c8>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002afc:	6943      	ldr	r3, [r0, #20]
 8002afe:	0559      	lsls	r1, r3, #21
 8002b00:	d4c7      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x12e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b02:	6943      	ldr	r3, [r0, #20]
 8002b04:	061f      	lsls	r7, r3, #24
 8002b06:	f53f af64 	bmi.w	80029d2 <I2C_RequestMemoryRead+0x6e>
 8002b0a:	e7f7      	b.n	8002afc <I2C_RequestMemoryRead+0x198>
 8002b0c:	6943      	ldr	r3, [r0, #20]
 8002b0e:	061a      	lsls	r2, r3, #24
 8002b10:	f53f af6a 	bmi.w	80029e8 <I2C_RequestMemoryRead+0x84>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	6943      	ldr	r3, [r0, #20]
 8002b16:	055b      	lsls	r3, r3, #21
 8002b18:	d4bb      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b1a:	b36c      	cbz	r4, 8002b78 <I2C_RequestMemoryRead+0x214>
 8002b1c:	f7fe ff06 	bl	800192c <HAL_GetTick>
 8002b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b22:	1ac0      	subs	r0, r0, r3
 8002b24:	4284      	cmp	r4, r0
 8002b26:	d327      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x214>
 8002b28:	6828      	ldr	r0, [r5, #0]
 8002b2a:	e754      	b.n	80029d6 <I2C_RequestMemoryRead+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2c:	6943      	ldr	r3, [r0, #20]
 8002b2e:	061a      	lsls	r2, r3, #24
 8002b30:	f53f af4f 	bmi.w	80029d2 <I2C_RequestMemoryRead+0x6e>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b34:	6943      	ldr	r3, [r0, #20]
 8002b36:	055a      	lsls	r2, r3, #21
 8002b38:	d4ab      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b3a:	b1ec      	cbz	r4, 8002b78 <I2C_RequestMemoryRead+0x214>
 8002b3c:	f7fe fef6 	bl	800192c <HAL_GetTick>
 8002b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b42:	1ac0      	subs	r0, r0, r3
 8002b44:	4284      	cmp	r4, r0
 8002b46:	d317      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x214>
 8002b48:	6828      	ldr	r0, [r5, #0]
 8002b4a:	e7d4      	b.n	8002af6 <I2C_RequestMemoryRead+0x192>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002b4c:	6943      	ldr	r3, [r0, #20]
 8002b4e:	07de      	lsls	r6, r3, #31
 8002b50:	f53f af54 	bmi.w	80029fc <I2C_RequestMemoryRead+0x98>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002b54:	2c00      	cmp	r4, #0
 8002b56:	d0c1      	beq.n	8002adc <I2C_RequestMemoryRead+0x178>
 8002b58:	f7fe fee8 	bl	800192c <HAL_GetTick>
 8002b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b5e:	1ac0      	subs	r0, r0, r3
 8002b60:	4284      	cmp	r4, r0
 8002b62:	d3bb      	bcc.n	8002adc <I2C_RequestMemoryRead+0x178>
 8002b64:	6828      	ldr	r0, [r5, #0]
 8002b66:	e743      	b.n	80029f0 <I2C_RequestMemoryRead+0x8c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b68:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002b6a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b6c:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002b6e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002b72:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 8002b76:	e781      	b.n	8002a7c <I2C_RequestMemoryRead+0x118>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 8002b80:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b84:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b88:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002b8a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8002b8e:	e78c      	b.n	8002aaa <I2C_RequestMemoryRead+0x146>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b90:	6943      	ldr	r3, [r0, #20]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	f013 0302 	ands.w	r3, r3, #2
 8002b98:	f43f af3f 	beq.w	8002a1a <I2C_RequestMemoryRead+0xb6>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9c:	6943      	ldr	r3, [r0, #20]
 8002b9e:	0559      	lsls	r1, r3, #21
 8002ba0:	f53f af5c 	bmi.w	8002a5c <I2C_RequestMemoryRead+0xf8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002ba4:	2c00      	cmp	r4, #0
 8002ba6:	d0df      	beq.n	8002b68 <I2C_RequestMemoryRead+0x204>
 8002ba8:	f7fe fec0 	bl	800192c <HAL_GetTick>
 8002bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bae:	1ac0      	subs	r0, r0, r3
 8002bb0:	4284      	cmp	r4, r0
 8002bb2:	d3d9      	bcc.n	8002b68 <I2C_RequestMemoryRead+0x204>
 8002bb4:	6828      	ldr	r0, [r5, #0]
 8002bb6:	e725      	b.n	8002a04 <I2C_RequestMemoryRead+0xa0>

08002bb8 <HAL_I2C_MspInit>:
}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop

08002bbc <HAL_I2C_Init>:
  if(hi2c == NULL)
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d05c      	beq.n	8002c7a <HAL_I2C_Init+0xbe>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002bc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8002bc4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002bc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bca:	4604      	mov	r4, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d04f      	beq.n	8002c70 <HAL_I2C_Init+0xb4>
  __HAL_I2C_DISABLE(hi2c);
 8002bd0:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002bd2:	4d32      	ldr	r5, [pc, #200]	; (8002c9c <HAL_I2C_Init+0xe0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	2324      	movs	r3, #36	; 0x24
 8002bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002be2:	f001 f9f3 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002be6:	e9d4 3100 	ldrd	r3, r1, [r4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002bea:	4a2d      	ldr	r2, [pc, #180]	; (8002ca0 <HAL_I2C_Init+0xe4>)
 8002bec:	fba2 6200 	umull	r6, r2, r2, r0
 8002bf0:	0c92      	lsrs	r2, r2, #18
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002bf2:	42a9      	cmp	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8002bf4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002bf6:	d825      	bhi.n	8002c44 <HAL_I2C_Init+0x88>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002bf8:	0049      	lsls	r1, r1, #1
 8002bfa:	fbb0 f0f1 	udiv	r0, r0, r1
 8002bfe:	f3c0 010b 	ubfx	r1, r0, #0, #12
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002c02:	3201      	adds	r2, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002c04:	2903      	cmp	r1, #3
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002c06:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002c08:	bf98      	it	ls
 8002c0a:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c0c:	e9d4 2507 	ldrd	r2, r5, [r4, #28]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002c10:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002c14:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c16:	ea42 0005 	orr.w	r0, r2, r5
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002c1a:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002c1e:	4331      	orrs	r1, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002c20:	432a      	orrs	r2, r5
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c22:	6018      	str	r0, [r3, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002c24:	6099      	str	r1, [r3, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002c26:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2a:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8002c2c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002c32:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8002c34:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c36:	6422      	str	r2, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
}
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002c44:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002c48:	4e16      	ldr	r6, [pc, #88]	; (8002ca4 <HAL_I2C_Init+0xe8>)
 8002c4a:	fb05 f202 	mul.w	r2, r5, r2
 8002c4e:	fba6 5202 	umull	r5, r2, r6, r2
 8002c52:	0992      	lsrs	r2, r2, #6
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002c54:	68a5      	ldr	r5, [r4, #8]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002c56:	3201      	adds	r2, #1
 8002c58:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002c5a:	b985      	cbnz	r5, 8002c7e <HAL_I2C_Init+0xc2>
 8002c5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002c60:	fbb0 f0f1 	udiv	r0, r0, r1
 8002c64:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8002c68:	b1aa      	cbz	r2, 8002c96 <HAL_I2C_Init+0xda>
 8002c6a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002c6e:	e7cd      	b.n	8002c0c <HAL_I2C_Init+0x50>
    hi2c->Lock = HAL_UNLOCKED;
 8002c70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002c74:	f7ff ffa0 	bl	8002bb8 <HAL_I2C_MspInit>
 8002c78:	e7aa      	b.n	8002bd0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002c7a:	2001      	movs	r0, #1
}
 8002c7c:	4770      	bx	lr
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002c7e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002c82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002c86:	fbb0 f0f1 	udiv	r0, r0, r1
 8002c8a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8002c8e:	b112      	cbz	r2, 8002c96 <HAL_I2C_Init+0xda>
 8002c90:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002c94:	e7ba      	b.n	8002c0c <HAL_I2C_Init+0x50>
 8002c96:	2001      	movs	r0, #1
 8002c98:	e7b8      	b.n	8002c0c <HAL_I2C_Init+0x50>
 8002c9a:	bf00      	nop
 8002c9c:	000186a0 	.word	0x000186a0
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	10624dd3 	.word	0x10624dd3

08002ca8 <HAL_I2C_MspDeInit>:
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8002cac:	b1b0      	cbz	r0, 8002cdc <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8002cae:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	2324      	movs	r3, #36	; 0x24
{
 8002cb2:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002cc2:	f7ff fff1 	bl	8002ca8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8002cca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002cce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cd2:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002cda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_I2C_Mem_Write>:
{
 8002ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	4699      	mov	r9, r3
 8002cea:	460f      	mov	r7, r1
 8002cec:	4690      	mov	r8, r2
 8002cee:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002cf2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fe1a 	bl	800192c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002cf8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d004      	beq.n	8002d0a <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 8002d00:	2702      	movs	r7, #2
}
 8002d02:	4638      	mov	r0, r7
 8002d04:	b003      	add	sp, #12
 8002d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	e005      	b.n	8002d1a <HAL_I2C_Mem_Write+0x3a>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002d0e:	f7fe fe0d 	bl	800192c <HAL_GetTick>
 8002d12:	1b40      	subs	r0, r0, r5
 8002d14:	2819      	cmp	r0, #25
 8002d16:	f200 80a2 	bhi.w	8002e5e <HAL_I2C_Mem_Write+0x17e>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	6993      	ldr	r3, [r2, #24]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	f013 0b02 	ands.w	fp, r3, #2
 8002d24:	d0f3      	beq.n	8002d0e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8002d26:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d0e8      	beq.n	8002d00 <HAL_I2C_Mem_Write+0x20>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2e:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8002d30:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d32:	07d8      	lsls	r0, r3, #31
    __HAL_LOCK(hi2c);
 8002d34:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d38:	d402      	bmi.n	8002d40 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d40:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d42:	495b      	ldr	r1, [pc, #364]	; (8002eb0 <HAL_I2C_Mem_Write+0x1d0>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d48:	6013      	str	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4a:	f04f 0b00 	mov.w	fp, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d4e:	2221      	movs	r2, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d50:	2340      	movs	r3, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5a:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002d5e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d62:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002d64:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d68:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d6a:	4639      	mov	r1, r7
 8002d6c:	e9cd 6500 	strd	r6, r5, [sp]
 8002d70:	464b      	mov	r3, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002d72:	8520      	strh	r0, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d74:	4642      	mov	r2, r8
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fd2a 	bl	80027d0 <I2C_RequestMemoryWrite>
 8002d7c:	4607      	mov	r7, r0
 8002d7e:	b130      	cbz	r0, 8002d8e <HAL_I2C_Mem_Write+0xae>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d82:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d14c      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x144>
        return HAL_ERROR;
 8002d8a:	2701      	movs	r7, #1
 8002d8c:	e7b9      	b.n	8002d02 <HAL_I2C_Mem_Write+0x22>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while(hi2c->XferSize > 0U)
 8002d92:	b1e2      	cbz	r2, 8002dce <HAL_I2C_Mem_Write+0xee>
 8002d94:	1c70      	adds	r0, r6, #1
 8002d96:	d003      	beq.n	8002da0 <HAL_I2C_Mem_Write+0xc0>
 8002d98:	e046      	b.n	8002e28 <HAL_I2C_Mem_Write+0x148>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	0552      	lsls	r2, r2, #21
 8002d9e:	d42c      	bmi.n	8002dfa <HAL_I2C_Mem_Write+0x11a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	0611      	lsls	r1, r2, #24
 8002da4:	d5f9      	bpl.n	8002d9a <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002da6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002da8:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002dac:	1c42      	adds	r2, r0, #1
 8002dae:	6262      	str	r2, [r4, #36]	; 0x24
 8002db0:	7802      	ldrb	r2, [r0, #0]
 8002db2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002db4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002db6:	3901      	subs	r1, #1
 8002db8:	b289      	uxth	r1, r1
 8002dba:	8561      	strh	r1, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dbc:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 8002dbe:	f10c 32ff 	add.w	r2, ip, #4294967295
 8002dc2:	b292      	uxth	r2, r2
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dc4:	0749      	lsls	r1, r1, #29
      hi2c->XferSize--;
 8002dc6:	8522      	strh	r2, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dc8:	d5e3      	bpl.n	8002d92 <HAL_I2C_Mem_Write+0xb2>
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d13a      	bne.n	8002e44 <HAL_I2C_Mem_Write+0x164>
 8002dce:	1c72      	adds	r2, r6, #1
 8002dd0:	d003      	beq.n	8002dda <HAL_I2C_Mem_Write+0xfa>
 8002dd2:	e052      	b.n	8002e7a <HAL_I2C_Mem_Write+0x19a>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	0551      	lsls	r1, r2, #21
 8002dd8:	d40f      	bmi.n	8002dfa <HAL_I2C_Mem_Write+0x11a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	0750      	lsls	r0, r2, #29
 8002dde:	d5f9      	bpl.n	8002dd4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002de0:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	2020      	movs	r0, #32
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002df0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8002df8:	e783      	b.n	8002d02 <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfc:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e00:	2004      	movs	r0, #4
    hi2c->State= HAL_I2C_STATE_READY;
 8002e02:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	615d      	str	r5, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e06:	6420      	str	r0, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002e08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e0c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002e0e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d105      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x144>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e7b2      	b.n	8002d8a <HAL_I2C_Mem_Write+0xaa>
          return HAL_TIMEOUT;
 8002e24:	2703      	movs	r7, #3
 8002e26:	e76c      	b.n	8002d02 <HAL_I2C_Mem_Write+0x22>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	0610      	lsls	r0, r2, #24
 8002e2c:	d4bb      	bmi.n	8002da6 <HAL_I2C_Mem_Write+0xc6>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	0552      	lsls	r2, r2, #21
 8002e32:	d4e2      	bmi.n	8002dfa <HAL_I2C_Mem_Write+0x11a>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e34:	b37e      	cbz	r6, 8002e96 <HAL_I2C_Mem_Write+0x1b6>
 8002e36:	f7fe fd79 	bl	800192c <HAL_GetTick>
 8002e3a:	1b40      	subs	r0, r0, r5
 8002e3c:	4286      	cmp	r6, r0
 8002e3e:	d32a      	bcc.n	8002e96 <HAL_I2C_Mem_Write+0x1b6>
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	e7a7      	b.n	8002d94 <HAL_I2C_Mem_Write+0xb4>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002e44:	1c82      	adds	r2, r0, #2
 8002e46:	6262      	str	r2, [r4, #36]	; 0x24
 8002e48:	7842      	ldrb	r2, [r0, #1]
 8002e4a:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002e4c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002e4e:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->XferCount--;
 8002e52:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8002e54:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8002e56:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8002e58:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002e5a:	8561      	strh	r1, [r4, #42]	; 0x2a
 8002e5c:	e799      	b.n	8002d92 <HAL_I2C_Mem_Write+0xb2>
      return HAL_BUSY;
 8002e5e:	2702      	movs	r7, #2
        hi2c->State= HAL_I2C_STATE_READY;
 8002e60:	2320      	movs	r3, #32
}
 8002e62:	4638      	mov	r0, r7
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e64:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002e68:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002e6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
}
 8002e74:	b003      	add	sp, #12
 8002e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	0752      	lsls	r2, r2, #29
 8002e7e:	d4af      	bmi.n	8002de0 <HAL_I2C_Mem_Write+0x100>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	0551      	lsls	r1, r2, #21
 8002e84:	d4b9      	bmi.n	8002dfa <HAL_I2C_Mem_Write+0x11a>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e86:	b136      	cbz	r6, 8002e96 <HAL_I2C_Mem_Write+0x1b6>
 8002e88:	f7fe fd50 	bl	800192c <HAL_GetTick>
 8002e8c:	1b40      	subs	r0, r0, r5
 8002e8e:	4286      	cmp	r6, r0
 8002e90:	d301      	bcc.n	8002e96 <HAL_I2C_Mem_Write+0x1b6>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	e79b      	b.n	8002dce <HAL_I2C_Mem_Write+0xee>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e98:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 8002e9e:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ea2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002ea8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8002eac:	e7b1      	b.n	8002e12 <HAL_I2C_Mem_Write+0x132>
 8002eae:	bf00      	nop
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <HAL_I2C_Mem_Read>:
{
 8002eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb8:	4604      	mov	r4, r0
 8002eba:	b087      	sub	sp, #28
 8002ebc:	4699      	mov	r9, r3
 8002ebe:	460f      	mov	r7, r1
 8002ec0:	4690      	mov	r8, r2
 8002ec2:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8002ec6:	9d12      	ldr	r5, [sp, #72]	; 0x48
  tickstart = HAL_GetTick();
 8002ec8:	f7fe fd30 	bl	800192c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ecc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d004      	beq.n	8002ede <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8002ed4:	2702      	movs	r7, #2
}
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	b007      	add	sp, #28
 8002eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ede:	4606      	mov	r6, r0
 8002ee0:	e004      	b.n	8002eec <HAL_I2C_Mem_Read+0x38>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002ee2:	f7fe fd23 	bl	800192c <HAL_GetTick>
 8002ee6:	1b80      	subs	r0, r0, r6
 8002ee8:	2819      	cmp	r0, #25
 8002eea:	d850      	bhi.n	8002f8e <HAL_I2C_Mem_Read+0xda>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	6993      	ldr	r3, [r2, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	f013 0b02 	ands.w	fp, r3, #2
 8002ef6:	d0f4      	beq.n	8002ee2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8002ef8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d0e9      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x20>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f00:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8002f02:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f04:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 8002f06:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0a:	d402      	bmi.n	8002f12 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002f0c:	6813      	ldr	r3, [r2, #0]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f12:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f14:	49a0      	ldr	r1, [pc, #640]	; (8003198 <HAL_I2C_Mem_Read+0x2e4>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f1a:	6013      	str	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	f04f 0b00 	mov.w	fp, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f20:	2222      	movs	r2, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f22:	2340      	movs	r3, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002f30:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f34:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002f36:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002f38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f3a:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f3c:	4639      	mov	r1, r7
 8002f3e:	e9cd 5600 	strd	r5, r6, [sp]
 8002f42:	464b      	mov	r3, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002f44:	8520      	strh	r0, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f46:	4642      	mov	r2, r8
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f7ff fd0b 	bl	8002964 <I2C_RequestMemoryRead>
 8002f4e:	4607      	mov	r7, r0
 8002f50:	b9b0      	cbnz	r0, 8002f80 <HAL_I2C_Mem_Read+0xcc>
    if(hi2c->XferSize == 0U)
 8002f52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d13c      	bne.n	8002fd4 <HAL_I2C_Mem_Read+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	9002      	str	r0, [sp, #8]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	9202      	str	r2, [sp, #8]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	9202      	str	r2, [sp, #8]
 8002f64:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	2220      	movs	r2, #32
 8002f72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002f76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002f7e:	e7aa      	b.n	8002ed6 <HAL_I2C_Mem_Read+0x22>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f82:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d122      	bne.n	8002fd0 <HAL_I2C_Mem_Read+0x11c>
              return HAL_ERROR;
 8002f8a:	2701      	movs	r7, #1
 8002f8c:	e7a3      	b.n	8002ed6 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8002f8e:	2702      	movs	r7, #2
        hi2c->State= HAL_I2C_STATE_READY;
 8002f90:	2320      	movs	r3, #32
}
 8002f92:	4638      	mov	r0, r7
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f94:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002f98:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002f9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
}
 8002fa4:	b007      	add	sp, #28
 8002fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	0650      	lsls	r0, r2, #25
 8002fae:	d472      	bmi.n	8003096 <HAL_I2C_Mem_Read+0x1e2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	06d0      	lsls	r0, r2, #27
 8002fb4:	f100 80df 	bmi.w	8003176 <HAL_I2C_Mem_Read+0x2c2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002fba:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8002fbe:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002fc2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8002fc6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d1dc      	bne.n	8002f8a <HAL_I2C_Mem_Read+0xd6>
              return HAL_TIMEOUT;
 8002fd0:	2703      	movs	r7, #3
 8002fd2:	e780      	b.n	8002ed6 <HAL_I2C_Mem_Read+0x22>
    else if(hi2c->XferSize == 1U)
 8002fd4:	2a01      	cmp	r2, #1
 8002fd6:	f000 808c 	beq.w	80030f2 <HAL_I2C_Mem_Read+0x23e>
    else if(hi2c->XferSize == 2U)
 8002fda:	2a02      	cmp	r2, #2
 8002fdc:	f000 80de 	beq.w	800319c <HAL_I2C_Mem_Read+0x2e8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe0:	9005      	str	r0, [sp, #20]
 8002fe2:	6959      	ldr	r1, [r3, #20]
 8002fe4:	9105      	str	r1, [sp, #20]
 8002fe6:	6999      	ldr	r1, [r3, #24]
 8002fe8:	9105      	str	r1, [sp, #20]
 8002fea:	9905      	ldr	r1, [sp, #20]
      if(hi2c->XferSize <= 3U)
 8002fec:	2a03      	cmp	r2, #3
 8002fee:	d844      	bhi.n	800307a <HAL_I2C_Mem_Read+0x1c6>
        if(hi2c->XferSize== 1U)
 8002ff0:	2a01      	cmp	r2, #1
 8002ff2:	f000 80b1 	beq.w	8003158 <HAL_I2C_Mem_Read+0x2a4>
        else if(hi2c->XferSize == 2U)
 8002ff6:	2a02      	cmp	r2, #2
 8002ff8:	d06f      	beq.n	80030da <HAL_I2C_Mem_Read+0x226>
 8002ffa:	1c68      	adds	r0, r5, #1
 8002ffc:	f040 8088 	bne.w	8003110 <HAL_I2C_Mem_Read+0x25c>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	0751      	lsls	r1, r2, #29
 8003004:	d5fc      	bpl.n	8003000 <HAL_I2C_Mem_Read+0x14c>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003006:	681a      	ldr	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003008:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	1c4a      	adds	r2, r1, #1
 8003014:	6262      	str	r2, [r4, #36]	; 0x24
 8003016:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800301a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800301c:	3b01      	subs	r3, #1
 800301e:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8003020:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003022:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003024:	8522      	strh	r2, [r4, #40]	; 0x28
 8003026:	1c68      	adds	r0, r5, #1
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003028:	6822      	ldr	r2, [r4, #0]
 800302a:	d17d      	bne.n	8003128 <HAL_I2C_Mem_Read+0x274>
 800302c:	6953      	ldr	r3, [r2, #20]
 800302e:	0759      	lsls	r1, r3, #29
 8003030:	d5fc      	bpl.n	800302c <HAL_I2C_Mem_Read+0x178>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003032:	6813      	ldr	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003034:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303a:	6013      	str	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800303c:	6913      	ldr	r3, [r2, #16]
 800303e:	1c4a      	adds	r2, r1, #1
 8003040:	6262      	str	r2, [r4, #36]	; 0x24
 8003042:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003044:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003046:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003048:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800304a:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 800304c:	3b01      	subs	r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003052:	6912      	ldr	r2, [r2, #16]
          hi2c->XferSize--;
 8003054:	1e4b      	subs	r3, r1, #1
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003056:	1c41      	adds	r1, r0, #1
          hi2c->XferSize--;
 8003058:	8523      	strh	r3, [r4, #40]	; 0x28
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800305a:	6261      	str	r1, [r4, #36]	; 0x24
 800305c:	7002      	strb	r2, [r0, #0]
          hi2c->XferSize--;
 800305e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003060:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003062:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003064:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8003066:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003068:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 800306a:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800306c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800306e:	2a00      	cmp	r2, #0
 8003070:	f43f af7d 	beq.w	8002f6e <HAL_I2C_Mem_Read+0xba>
      if(hi2c->XferSize <= 3U)
 8003074:	2a03      	cmp	r2, #3
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	d9ba      	bls.n	8002ff0 <HAL_I2C_Mem_Read+0x13c>
 800307a:	b94d      	cbnz	r5, 8003090 <HAL_I2C_Mem_Read+0x1dc>
 800307c:	e795      	b.n	8002faa <HAL_I2C_Mem_Read+0xf6>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	06d2      	lsls	r2, r2, #27
 8003082:	d478      	bmi.n	8003176 <HAL_I2C_Mem_Read+0x2c2>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003084:	f7fe fc52 	bl	800192c <HAL_GetTick>
 8003088:	1b80      	subs	r0, r0, r6
 800308a:	4285      	cmp	r5, r0
 800308c:	d394      	bcc.n	8002fb8 <HAL_I2C_Mem_Read+0x104>
 800308e:	6823      	ldr	r3, [r4, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	0651      	lsls	r1, r2, #25
 8003094:	d5f3      	bpl.n	800307e <HAL_I2C_Mem_Read+0x1ca>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003096:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	1c51      	adds	r1, r2, #1
 800309c:	6261      	str	r1, [r4, #36]	; 0x24
 800309e:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 80030a0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030a2:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 80030a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80030a6:	3901      	subs	r1, #1
 80030a8:	b289      	uxth	r1, r1
 80030aa:	8561      	strh	r1, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030ac:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 80030ae:	3a01      	subs	r2, #1
 80030b0:	b292      	uxth	r2, r2
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030b2:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 80030b4:	8522      	strh	r2, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030b6:	d5da      	bpl.n	800306e <HAL_I2C_Mem_Read+0x1ba>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80030b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	1c51      	adds	r1, r2, #1
 80030be:	6261      	str	r1, [r4, #36]	; 0x24
 80030c0:	7013      	strb	r3, [r2, #0]
 80030c2:	e7cc      	b.n	800305e <HAL_I2C_Mem_Read+0x1aa>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	0752      	lsls	r2, r2, #29
 80030c8:	d40c      	bmi.n	80030e4 <HAL_I2C_Mem_Read+0x230>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	d036      	beq.n	800313c <HAL_I2C_Mem_Read+0x288>
 80030ce:	f7fe fc2d 	bl	800192c <HAL_GetTick>
 80030d2:	1b80      	subs	r0, r0, r6
 80030d4:	4285      	cmp	r5, r0
 80030d6:	d331      	bcc.n	800313c <HAL_I2C_Mem_Read+0x288>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	1c68      	adds	r0, r5, #1
 80030dc:	d1f2      	bne.n	80030c4 <HAL_I2C_Mem_Read+0x210>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	0751      	lsls	r1, r2, #29
 80030e2:	d5fc      	bpl.n	80030de <HAL_I2C_Mem_Read+0x22a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80030e4:	681a      	ldr	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80030e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	e7a5      	b.n	800303e <HAL_I2C_Mem_Read+0x18a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80030f8:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	9003      	str	r0, [sp, #12]
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	9103      	str	r1, [sp, #12]
 8003100:	6999      	ldr	r1, [r3, #24]
 8003102:	9103      	str	r1, [sp, #12]
 8003104:	9903      	ldr	r1, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800310c:	6019      	str	r1, [r3, #0]
 800310e:	e76d      	b.n	8002fec <HAL_I2C_Mem_Read+0x138>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	0752      	lsls	r2, r2, #29
 8003114:	f53f af77 	bmi.w	8003006 <HAL_I2C_Mem_Read+0x152>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003118:	b185      	cbz	r5, 800313c <HAL_I2C_Mem_Read+0x288>
 800311a:	f7fe fc07 	bl	800192c <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	4285      	cmp	r5, r0
 8003122:	d30b      	bcc.n	800313c <HAL_I2C_Mem_Read+0x288>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	e768      	b.n	8002ffa <HAL_I2C_Mem_Read+0x146>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003128:	6953      	ldr	r3, [r2, #20]
 800312a:	075b      	lsls	r3, r3, #29
 800312c:	d481      	bmi.n	8003032 <HAL_I2C_Mem_Read+0x17e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800312e:	b12d      	cbz	r5, 800313c <HAL_I2C_Mem_Read+0x288>
 8003130:	f7fe fbfc 	bl	800192c <HAL_GetTick>
 8003134:	1b80      	subs	r0, r0, r6
 8003136:	4285      	cmp	r5, r0
 8003138:	f4bf af75 	bcs.w	8003026 <HAL_I2C_Mem_Read+0x172>
            return HAL_TIMEOUT;
 800313c:	2703      	movs	r7, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800313e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8003140:	2220      	movs	r2, #32
}
 8003142:	4638      	mov	r0, r7
        hi2c->PreviousState = I2C_STATE_NONE;
 8003144:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8003146:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800314a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003152:	b007      	add	sp, #28
 8003154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003158:	b93d      	cbnz	r5, 800316a <HAL_I2C_Mem_Read+0x2b6>
 800315a:	e018      	b.n	800318e <HAL_I2C_Mem_Read+0x2da>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800315c:	f7fe fbe6 	bl	800192c <HAL_GetTick>
 8003160:	1b80      	subs	r0, r0, r6
 8003162:	42a8      	cmp	r0, r5
 8003164:	f63f af28 	bhi.w	8002fb8 <HAL_I2C_Mem_Read+0x104>
 8003168:	6823      	ldr	r3, [r4, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	0650      	lsls	r0, r2, #25
 800316e:	d4a3      	bmi.n	80030b8 <HAL_I2C_Mem_Read+0x204>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	06d1      	lsls	r1, r2, #27
 8003174:	d5f2      	bpl.n	800315c <HAL_I2C_Mem_Read+0x2a8>
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003176:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003178:	f06f 0010 	mvn.w	r0, #16
      hi2c->State= HAL_I2C_STATE_READY;
 800317c:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317e:	6158      	str	r0, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003182:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8003188:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800318c:	e71d      	b.n	8002fca <HAL_I2C_Mem_Read+0x116>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	0652      	lsls	r2, r2, #25
 8003192:	f57f af0d 	bpl.w	8002fb0 <HAL_I2C_Mem_Read+0xfc>
 8003196:	e78f      	b.n	80030b8 <HAL_I2C_Mem_Read+0x204>
 8003198:	ffff0000 	.word	0xffff0000
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80031a2:	6019      	str	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80031aa:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ac:	9004      	str	r0, [sp, #16]
 80031ae:	6959      	ldr	r1, [r3, #20]
 80031b0:	9104      	str	r1, [sp, #16]
 80031b2:	6999      	ldr	r1, [r3, #24]
 80031b4:	9104      	str	r1, [sp, #16]
 80031b6:	9904      	ldr	r1, [sp, #16]
 80031b8:	e718      	b.n	8002fec <HAL_I2C_Mem_Read+0x138>
 80031ba:	bf00      	nop

080031bc <HAL_I2C_IsDeviceReady>:
{
 80031bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c0:	4605      	mov	r5, r0
 80031c2:	b083      	sub	sp, #12
 80031c4:	461f      	mov	r7, r3
 80031c6:	468a      	mov	sl, r1
 80031c8:	4693      	mov	fp, r2
  tickstart = HAL_GetTick();
 80031ca:	f7fe fbaf 	bl	800192c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d003      	beq.n	80031de <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 80031d6:	2002      	movs	r0, #2
}
 80031d8:	b003      	add	sp, #12
 80031da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031de:	4606      	mov	r6, r0
 80031e0:	e005      	b.n	80031ee <HAL_I2C_IsDeviceReady+0x32>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80031e2:	f7fe fba3 	bl	800192c <HAL_GetTick>
 80031e6:	1b80      	subs	r0, r0, r6
 80031e8:	2819      	cmp	r0, #25
 80031ea:	f200 80a3 	bhi.w	8003334 <HAL_I2C_IsDeviceReady+0x178>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	43d2      	mvns	r2, r2
 80031f4:	f012 0402 	ands.w	r4, r2, #2
 80031f8:	d0f3      	beq.n	80031e2 <HAL_I2C_IsDeviceReady+0x26>
    __HAL_LOCK(hi2c);
 80031fa:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80031fe:	2a01      	cmp	r2, #1
 8003200:	d0e9      	beq.n	80031d6 <HAL_I2C_IsDeviceReady+0x1a>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003202:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8003204:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003206:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 8003208:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320c:	f140 808e 	bpl.w	800332c <HAL_I2C_IsDeviceReady+0x170>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003210:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003212:	4963      	ldr	r1, [pc, #396]	; (80033a0 <HAL_I2C_IsDeviceReady+0x1e4>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003218:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800321a:	2024      	movs	r0, #36	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800321e:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003222:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003226:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003228:	4691      	mov	r9, r2
 800322a:	62e9      	str	r1, [r5, #44]	; 0x2c
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800322c:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	1c7a      	adds	r2, r7, #1
 800323a:	d160      	bne.n	80032fe <HAL_I2C_IsDeviceReady+0x142>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	07d6      	lsls	r6, r2, #31
 8003240:	d5fc      	bpl.n	800323c <HAL_I2C_IsDeviceReady+0x80>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003242:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 8003246:	f7fe fb71 	bl	800192c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800324a:	682b      	ldr	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800324c:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800324e:	6958      	ldr	r0, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8003252:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8003256:	0780      	lsls	r0, r0, #30
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      tmp3 = hi2c->State;
 800325c:	b2c9      	uxtb	r1, r1
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800325e:	d412      	bmi.n	8003286 <HAL_I2C_IsDeviceReady+0xca>
 8003260:	b98a      	cbnz	r2, 8003286 <HAL_I2C_IsDeviceReady+0xca>
 8003262:	29a0      	cmp	r1, #160	; 0xa0
 8003264:	d00f      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0xca>
 8003266:	b11f      	cbz	r7, 8003270 <HAL_I2C_IsDeviceReady+0xb4>
 8003268:	e037      	b.n	80032da <HAL_I2C_IsDeviceReady+0x11e>
 800326a:	b962      	cbnz	r2, 8003286 <HAL_I2C_IsDeviceReady+0xca>
 800326c:	29a0      	cmp	r1, #160	; 0xa0
 800326e:	d00a      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0xca>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003270:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003274:	6958      	ldr	r0, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8003278:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800327c:	0780      	lsls	r0, r0, #30
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
        tmp3 = hi2c->State;
 8003282:	b2c9      	uxtb	r1, r1
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8003284:	d5f1      	bpl.n	800326a <HAL_I2C_IsDeviceReady+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 8003286:	2220      	movs	r2, #32
 8003288:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003292:	681a      	ldr	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003294:	d167      	bne.n	8003366 <HAL_I2C_IsDeviceReady+0x1aa>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800329e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a0:	6159      	str	r1, [r3, #20]
 80032a2:	e005      	b.n	80032b0 <HAL_I2C_IsDeviceReady+0xf4>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80032a4:	f7fe fb42 	bl	800192c <HAL_GetTick>
 80032a8:	1b80      	subs	r0, r0, r6
 80032aa:	2819      	cmp	r0, #25
 80032ac:	d832      	bhi.n	8003314 <HAL_I2C_IsDeviceReady+0x158>
 80032ae:	682b      	ldr	r3, [r5, #0]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80032b0:	699c      	ldr	r4, [r3, #24]
 80032b2:	43e4      	mvns	r4, r4
 80032b4:	f014 0402 	ands.w	r4, r4, #2
 80032b8:	d0f4      	beq.n	80032a4 <HAL_I2C_IsDeviceReady+0xe8>
 80032ba:	f109 0901 	add.w	r9, r9, #1
    }while(I2C_Trials++ < Trials);
 80032be:	45d9      	cmp	r9, fp
 80032c0:	d3b6      	bcc.n	8003230 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80032c4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80032ca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 80032ce:	2001      	movs	r0, #1
 80032d0:	e782      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x1c>
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d1d7      	bne.n	8003286 <HAL_I2C_IsDeviceReady+0xca>
 80032d6:	29a0      	cmp	r1, #160	; 0xa0
 80032d8:	d0d5      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0xca>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80032da:	f7fe fb27 	bl	800192c <HAL_GetTick>
 80032de:	1b80      	subs	r0, r0, r6
 80032e0:	4287      	cmp	r7, r0
 80032e2:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032e4:	bf38      	it	cc
 80032e6:	f885 803d 	strbcc.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ea:	6958      	ldr	r0, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032ec:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 80032ee:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80032f2:	0784      	lsls	r4, r0, #30
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
        tmp3 = hi2c->State;
 80032f8:	b2c9      	uxtb	r1, r1
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80032fa:	d4c4      	bmi.n	8003286 <HAL_I2C_IsDeviceReady+0xca>
 80032fc:	e7e9      	b.n	80032d2 <HAL_I2C_IsDeviceReady+0x116>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	07d4      	lsls	r4, r2, #31
 8003302:	d49e      	bmi.n	8003242 <HAL_I2C_IsDeviceReady+0x86>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003304:	b317      	cbz	r7, 800334c <HAL_I2C_IsDeviceReady+0x190>
 8003306:	f7fe fb11 	bl	800192c <HAL_GetTick>
 800330a:	1b80      	subs	r0, r0, r6
 800330c:	4287      	cmp	r7, r0
 800330e:	d31d      	bcc.n	800334c <HAL_I2C_IsDeviceReady+0x190>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	e791      	b.n	8003238 <HAL_I2C_IsDeviceReady+0x7c>
        hi2c->State= HAL_I2C_STATE_READY;
 8003314:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8003316:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8003318:	632c      	str	r4, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800331a:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800331e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003322:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
}
 8003326:	b003      	add	sp, #12
 8003328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e76d      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x54>
        hi2c->State= HAL_I2C_STATE_READY;
 8003334:	2320      	movs	r3, #32
      return HAL_BUSY;
 8003336:	2002      	movs	r0, #2
        hi2c->PreviousState = I2C_STATE_NONE;
 8003338:	632c      	str	r4, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800333a:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800333e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
}
 8003346:	b003      	add	sp, #12
 8003348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState = I2C_STATE_NONE;
 800334c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800334e:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8003350:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8003354:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8003358:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8003360:	b003      	add	sp, #12
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336a:	2100      	movs	r1, #0
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800336c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	9101      	str	r1, [sp, #4]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	9201      	str	r2, [sp, #4]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	9201      	str	r2, [sp, #4]
 8003378:	9a01      	ldr	r2, [sp, #4]
 800337a:	e005      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x1cc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800337c:	f7fe fad6 	bl	800192c <HAL_GetTick>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	2819      	cmp	r0, #25
 8003384:	d8c6      	bhi.n	8003314 <HAL_I2C_IsDeviceReady+0x158>
 8003386:	682b      	ldr	r3, [r5, #0]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	43db      	mvns	r3, r3
 800338c:	f013 0402 	ands.w	r4, r3, #2
 8003390:	d0f4      	beq.n	800337c <HAL_I2C_IsDeviceReady+0x1c0>
        hi2c->State = HAL_I2C_STATE_READY;
 8003392:	2320      	movs	r3, #32
        __HAL_UNLOCK(hi2c);
 8003394:	2000      	movs	r0, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003396:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800339a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        return HAL_OK;
 800339e:	e71b      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x1c>
 80033a0:	ffff0000 	.word	0xffff0000

080033a4 <HAL_I2C_GetState>:
  return hi2c->State;
 80033a4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop

080033ac <HAL_LTDC_MspInit>:
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <HAL_LTDC_Init>:
  if(hltdc == NULL)
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d068      	beq.n	8003486 <HAL_LTDC_Init+0xd6>
{
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80033b6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80033ba:	4604      	mov	r4, r0
 80033bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_LTDC_Init+0xcc>
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033c4:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033c6:	2202      	movs	r2, #2
 80033c8:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033cc:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033ce:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033d2:	e9d4 6503 	ldrd	r6, r5, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033d6:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 80033da:	6199      	str	r1, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033dc:	4302      	orrs	r2, r0
 80033de:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033e0:	482a      	ldr	r0, [pc, #168]	; (800348c <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033e2:	4332      	orrs	r2, r6
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033e4:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033e6:	430a      	orrs	r2, r1
 80033e8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033ea:	689d      	ldr	r5, [r3, #8]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80033ec:	69e6      	ldr	r6, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033ee:	4005      	ands	r5, r0
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033f0:	e9d4 7205 	ldrd	r7, r2, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033f4:	609d      	str	r5, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80033fc:	4311      	orrs	r1, r2
 80033fe:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003400:	68dd      	ldr	r5, [r3, #12]
 8003402:	4005      	ands	r5, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003404:	e9d4 1708 	ldrd	r1, r7, [r4, #32]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003408:	60dd      	str	r5, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003414:	691d      	ldr	r5, [r3, #16]
 8003416:	4005      	ands	r5, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003418:	e9d4 260a 	ldrd	r2, r6, [r4, #40]	; 0x28
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800341c:	611d      	str	r5, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800341e:	6919      	ldr	r1, [r3, #16]
 8003420:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8003424:	4311      	orrs	r1, r2
 8003426:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003428:	6959      	ldr	r1, [r3, #20]
 800342a:	4008      	ands	r0, r1
 800342c:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003432:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003436:	430a      	orrs	r2, r1
 8003438:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800343a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800343c:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003440:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003444:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003448:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800344a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800344c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003450:	430a      	orrs	r2, r1
 8003452:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800345c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345e:	f042 0206 	orr.w	r2, r2, #6
 8003462:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003464:	699a      	ldr	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003466:	2100      	movs	r1, #0
  __HAL_LTDC_ENABLE(hltdc);
 8003468:	f042 0201 	orr.w	r2, r2, #1
  hltdc->State = HAL_LTDC_STATE_READY;
 800346c:	2501      	movs	r5, #1
  __HAL_LTDC_ENABLE(hltdc);
 800346e:	619a      	str	r2, [r3, #24]
  return HAL_OK;
 8003470:	4608      	mov	r0, r1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003472:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003476:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800347c:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003480:	f7ff ff94 	bl	80033ac <HAL_LTDC_MspInit>
 8003484:	e79e      	b.n	80033c4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8003486:	2001      	movs	r0, #1
}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	f000f800 	.word	0xf000f800

08003490 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003490:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003494:	2b01      	cmp	r3, #1
 8003496:	f000 80bb 	beq.w	8003610 <HAL_LTDC_ConfigLayer+0x180>
{   
 800349a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800349e:	468e      	mov	lr, r1
 80034a0:	460c      	mov	r4, r1
 80034a2:	4606      	mov	r6, r0
 80034a4:	4615      	mov	r5, r2
 80034a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80034aa:	2734      	movs	r7, #52	; 0x34
 80034ac:	fb07 6705 	mla	r7, r7, r5, r6
  __HAL_LOCK(hltdc);
 80034b0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034b4:	3738      	adds	r7, #56	; 0x38
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034b6:	f04f 0c02 	mov.w	ip, #2
  __HAL_LOCK(hltdc);
 80034ba:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034be:	f886 c0a1 	strb.w	ip, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034c2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80034c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80034ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034d0:	ea4f 18c5 	mov.w	r8, r5, lsl #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80034d4:	6835      	ldr	r5, [r6, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034d6:	f8de 3000 	ldr.w	r3, [lr]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80034da:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034de:	603b      	str	r3, [r7, #0]
{   
 80034e0:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034e2:	f108 0384 	add.w	r3, r8, #132	; 0x84
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	18eb      	adds	r3, r5, r3
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80034ea:	6862      	ldr	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034ec:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80034ee:	f8d4 9000 	ldr.w	r9, [r4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 80034f2:	69a1      	ldr	r1, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80034f4:	f8d4 8010 	ldr.w	r8, [r4, #16]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80034f8:	9201      	str	r2, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034fa:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80034fe:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003500:	68ef      	ldr	r7, [r5, #12]
 8003502:	f109 0a01 	add.w	sl, r9, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003506:	f3ce 4e0b 	ubfx	lr, lr, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800350a:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800350e:	4496      	add	lr, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003510:	4457      	add	r7, sl
 8003512:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003516:	e9d4 0b02 	ldrd	r0, fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800351a:	605f      	str	r7, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800351c:	68ef      	ldr	r7, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800351e:	f8d3 e008 	ldr.w	lr, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003522:	f8d4 a014 	ldr.w	sl, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003526:	f40e 4e70 	and.w	lr, lr, #61440	; 0xf000
 800352a:	f8c3 e008 	str.w	lr, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 800352e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003532:	f3c7 070a 	ubfx	r7, r7, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003536:	f3ce 0e0a 	ubfx	lr, lr, #0, #11
 800353a:	3001      	adds	r0, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800353c:	445f      	add	r7, fp
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 800353e:	4470      	add	r0, lr
 8003540:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003544:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003546:	6918      	ldr	r0, [r3, #16]
 8003548:	f020 0007 	bic.w	r0, r0, #7
 800354c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800354e:	2700      	movs	r7, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003550:	f8c3 8010 	str.w	r8, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003554:	6998      	ldr	r0, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003556:	f894 b031 	ldrb.w	fp, [r4, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800355a:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800355e:	619f      	str	r7, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003560:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8003564:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8003568:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
 800356c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8003570:	6198      	str	r0, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003572:	6958      	ldr	r0, [r3, #20]
 8003574:	f020 00ff 	bic.w	r0, r0, #255	; 0xff

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003578:	e9d4 eb07 	ldrd	lr, fp, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800357c:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800357e:	f8c3 a014 	str.w	sl, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003582:	69d8      	ldr	r0, [r3, #28]
 8003584:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003588:	f020 0007 	bic.w	r0, r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800358c:	ea4e 0e0b 	orr.w	lr, lr, fp
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003590:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003592:	f8c3 e01c 	str.w	lr, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003596:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003598:	6a60      	ldr	r0, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800359a:	629f      	str	r7, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800359c:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800359e:	f1b8 0f00 	cmp.w	r8, #0
 80035a2:	d00c      	beq.n	80035be <HAL_LTDC_ConfigLayer+0x12e>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80035a4:	f1b8 0f01 	cmp.w	r8, #1
 80035a8:	d034      	beq.n	8003614 <HAL_LTDC_ConfigLayer+0x184>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035aa:	f1a8 0002 	sub.w	r0, r8, #2
 80035ae:	4560      	cmp	r0, ip
 80035b0:	d907      	bls.n	80035c2 <HAL_LTDC_ConfigLayer+0x132>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80035b2:	f1b8 0f07 	cmp.w	r8, #7
 80035b6:	bf18      	it	ne
 80035b8:	f04f 0c01 	movne.w	ip, #1
 80035bc:	e001      	b.n	80035c2 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4U;
 80035be:	f04f 0c04 	mov.w	ip, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80035c2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80035c6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80035c8:	eba2 0109 	sub.w	r1, r2, r9
 80035cc:	fb0c f101 	mul.w	r1, ip, r1
 80035d0:	3103      	adds	r1, #3
 80035d2:	fb07 fc0c 	mul.w	ip, r7, ip
 80035d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035da:	f000 20e0 	and.w	r0, r0, #3758153728	; 0xe000e000
 80035de:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80035e0:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80035e2:	6b19      	ldr	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035e4:	9a00      	ldr	r2, [sp, #0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80035e6:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80035ea:	f021 0107 	bic.w	r1, r1, #7
 80035ee:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80035f0:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035f2:	9b00      	ldr	r3, [sp, #0]
 80035f4:	58eb      	ldr	r3, [r5, r3]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035f6:	2401      	movs	r4, #1
  __HAL_UNLOCK(hltdc);
 80035f8:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035fa:	4323      	orrs	r3, r4
  return HAL_OK;
 80035fc:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035fe:	50ab      	str	r3, [r5, r2]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003600:	626c      	str	r4, [r5, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003602:	f886 40a1 	strb.w	r4, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003606:	f886 10a0 	strb.w	r1, [r6, #160]	; 0xa0
}
 800360a:	b003      	add	sp, #12
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 8003610:	2002      	movs	r0, #2
}
 8003612:	4770      	bx	lr
    tmp = 3U;
 8003614:	f04f 0c03 	mov.w	ip, #3
 8003618:	e7d3      	b.n	80035c2 <HAL_LTDC_ConfigLayer+0x132>
 800361a:	bf00      	nop

0800361c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef* hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800361c:	b470      	push	{r4, r5, r6}
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */
  
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800361e:	e9d1 3508 	ldrd	r3, r5, [r1, #32]
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */
    
  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003622:	e9d1 420d 	ldrd	r4, r2, [r1, #52]	; 0x34
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8003626:	2d00      	cmp	r5, #0
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8003628:	69ce      	ldr	r6, [r1, #28]
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800362a:	bf18      	it	ne
 800362c:	f04f 5500 	movne.w	r5, #536870912	; 0x20000000
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8003630:	2b00      	cmp	r3, #0
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003632:	e9d1 130f 	ldrd	r1, r3, [r1, #60]	; 0x3c
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003636:	4422      	add	r2, r4
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8003638:	60c5      	str	r5, [r0, #12]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 800363a:	4413      	add	r3, r2
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800363c:	bf0c      	ite	eq
 800363e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8003642:	2500      	movne	r5, #0
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003644:	3901      	subs	r1, #1
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8003646:	2e00      	cmp	r6, #0
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8003648:	6085      	str	r5, [r0, #8]
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800364a:	f104 34ff 	add.w	r4, r4, #4294967295
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800364e:	4419      	add	r1, r3
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8003650:	bf0c      	ite	eq
 8003652:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003656:	2500      	movne	r5, #0
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003658:	3a01      	subs	r2, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 800365a:	3b01      	subs	r3, #1
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800365c:	6045      	str	r5, [r0, #4]
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800365e:	6184      	str	r4, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003660:	6202      	str	r2, [r0, #32]
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003662:	6301      	str	r1, [r0, #48]	; 0x30
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8003664:	6283      	str	r3, [r0, #40]	; 0x28
  
  return HAL_OK;
}
 8003666:	bc70      	pop	{r4, r5, r6}
 8003668:	2000      	movs	r0, #0
 800366a:	4770      	bx	lr

0800366c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800366c:	b530      	push	{r4, r5, lr}
 800366e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_PWREx_EnableOverDrive+0x94>)
 8003672:	2200      	movs	r2, #0
 8003674:	9201      	str	r2, [sp, #4]
 8003676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003678:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	9b01      	ldr	r3, [sp, #4]
 8003688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368c:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003698:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a2:	f7fe f943 	bl	800192c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a6:	4c17      	ldr	r4, [pc, #92]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
  tickstart = HAL_GetTick();
 80036a8:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036aa:	e005      	b.n	80036b8 <HAL_PWREx_EnableOverDrive+0x4c>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036ac:	f7fe f93e 	bl	800192c <HAL_GetTick>
 80036b0:	1b40      	subs	r0, r0, r5
 80036b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036b6:	d820      	bhi.n	80036fa <HAL_PWREx_EnableOverDrive+0x8e>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b8:	6863      	ldr	r3, [r4, #4]
 80036ba:	03da      	lsls	r2, r3, #15
 80036bc:	d5f6      	bpl.n	80036ac <HAL_PWREx_EnableOverDrive+0x40>
 80036be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c2:	fa93 f3a3 	rbit	r3, r3
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ce:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d8:	f7fe f928 	bl	800192c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036dc:	4c09      	ldr	r4, [pc, #36]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
  tickstart = HAL_GetTick();
 80036de:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036e0:	e005      	b.n	80036ee <HAL_PWREx_EnableOverDrive+0x82>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036e2:	f7fe f923 	bl	800192c <HAL_GetTick>
 80036e6:	1b40      	subs	r0, r0, r5
 80036e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036ec:	d805      	bhi.n	80036fa <HAL_PWREx_EnableOverDrive+0x8e>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ee:	6863      	ldr	r3, [r4, #4]
 80036f0:	039b      	lsls	r3, r3, #14
 80036f2:	d5f6      	bpl.n	80036e2 <HAL_PWREx_EnableOverDrive+0x76>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80036f4:	2000      	movs	r0, #0
}
 80036f6:	b003      	add	sp, #12
 80036f8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
}
 80036fc:	b003      	add	sp, #12
 80036fe:	bd30      	pop	{r4, r5, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000

08003708 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800370c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800370e:	b136      	cbz	r6, 800371e <QSPI_Config+0x16>
 8003710:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8003714:	d003      	beq.n	800371e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003716:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003718:	6804      	ldr	r4, [r0, #0]
 800371a:	3b01      	subs	r3, #1
 800371c:	6123      	str	r3, [r4, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800371e:	698c      	ldr	r4, [r1, #24]
 8003720:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
 8003724:	b36c      	cbz	r4, 8003782 <QSPI_Config+0x7a>
 8003726:	4334      	orrs	r4, r6
 8003728:	694e      	ldr	r6, [r1, #20]
 800372a:	f8d0 c000 	ldr.w	ip, [r0]
 800372e:	f8d1 a000 	ldr.w	sl, [r1]
 8003732:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8003736:	e9d1 080b 	ldrd	r0, r8, [r1, #44]	; 0x2c
 800373a:	4314      	orrs	r4, r2
 800373c:	04b6      	lsls	r6, r6, #18
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800373e:	2d00      	cmp	r5, #0
 8003740:	d058      	beq.n	80037f4 <QSPI_Config+0xec>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003742:	688b      	ldr	r3, [r1, #8]
 8003744:	f8cc 301c 	str.w	r3, [ip, #28]
 8003748:	432c      	orrs	r4, r5
 800374a:	f8d1 9010 	ldr.w	r9, [r1, #16]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800374e:	2f00      	cmp	r7, #0
 8003750:	d072      	beq.n	8003838 <QSPI_Config+0x130>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003752:	ea4a 0307 	orr.w	r3, sl, r7
 8003756:	ea43 0500 	orr.w	r5, r3, r0
 800375a:	ea45 0508 	orr.w	r5, r5, r8
 800375e:	68cb      	ldr	r3, [r1, #12]
 8003760:	ea45 050e 	orr.w	r5, r5, lr
 8003764:	ea45 0509 	orr.w	r5, r5, r9
 8003768:	431d      	orrs	r5, r3
 800376a:	4335      	orrs	r5, r6
 800376c:	432c      	orrs	r4, r5
                                         cmd->DataMode | (cmd->DummyCycles << 18U) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800376e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003772:	f8cc 4014 	str.w	r4, [ip, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003776:	d002      	beq.n	800377e <QSPI_Config+0x76>
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003778:	684b      	ldr	r3, [r1, #4]
 800377a:	f8cc 3018 	str.w	r3, [ip, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003782:	b305      	cbz	r5, 80037c6 <QSPI_Config+0xbe>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003784:	6804      	ldr	r4, [r0, #0]
 8003786:	688b      	ldr	r3, [r1, #8]
 8003788:	6948      	ldr	r0, [r1, #20]
 800378a:	61e3      	str	r3, [r4, #28]
 800378c:	ea46 0305 	orr.w	r3, r6, r5
 8003790:	ea43 0502 	orr.w	r5, r3, r2
 8003794:	0486      	lsls	r6, r0, #18
 8003796:	e9d1 e30b 	ldrd	lr, r3, [r1, #44]	; 0x2c
 800379a:	6908      	ldr	r0, [r1, #16]
 800379c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80037a0:	2f00      	cmp	r7, #0
 80037a2:	d064      	beq.n	800386e <QSPI_Config+0x166>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037a4:	4338      	orrs	r0, r7
 80037a6:	ea40 000e 	orr.w	r0, r0, lr
 80037aa:	4318      	orrs	r0, r3
 80037ac:	68cb      	ldr	r3, [r1, #12]
 80037ae:	ea40 000c 	orr.w	r0, r0, ip
 80037b2:	4318      	orrs	r0, r3
 80037b4:	4330      	orrs	r0, r6
 80037b6:	4328      	orrs	r0, r5
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80037b8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037bc:	6160      	str	r0, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80037be:	d0de      	beq.n	800377e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80037c0:	684b      	ldr	r3, [r1, #4]
 80037c2:	61a3      	str	r3, [r4, #24]
 80037c4:	e7db      	b.n	800377e <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80037c6:	b347      	cbz	r7, 800381a <QSPI_Config+0x112>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037c8:	e9d1 540b 	ldrd	r5, r4, [r1, #44]	; 0x2c
 80037cc:	ea46 0307 	orr.w	r3, r6, r7
 80037d0:	4313      	orrs	r3, r2
 80037d2:	432b      	orrs	r3, r5
 80037d4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80037d6:	68cd      	ldr	r5, [r1, #12]
 80037d8:	6800      	ldr	r0, [r0, #0]
 80037da:	4323      	orrs	r3, r4
 80037dc:	4333      	orrs	r3, r6
 80037de:	694c      	ldr	r4, [r1, #20]
 80037e0:	432b      	orrs	r3, r5
 80037e2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80037e6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037ea:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80037ec:	d0c7      	beq.n	800377e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80037ee:	684b      	ldr	r3, [r1, #4]
 80037f0:	6183      	str	r3, [r0, #24]
 80037f2:	e7c4      	b.n	800377e <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80037f4:	b377      	cbz	r7, 8003854 <QSPI_Config+0x14c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037f6:	ea4a 0307 	orr.w	r3, sl, r7
 80037fa:	4318      	orrs	r0, r3
 80037fc:	ea40 0508 	orr.w	r5, r0, r8
 8003800:	68cb      	ldr	r3, [r1, #12]
 8003802:	ea45 0e0e 	orr.w	lr, r5, lr
 8003806:	ea4e 0503 	orr.w	r5, lr, r3
 800380a:	432e      	orrs	r6, r5
 800380c:	4334      	orrs	r4, r6
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800380e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003812:	f8cc 4014 	str.w	r4, [ip, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003816:	d1af      	bne.n	8003778 <QSPI_Config+0x70>
 8003818:	e7b1      	b.n	800377e <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800381a:	2e00      	cmp	r6, #0
 800381c:	d0af      	beq.n	800377e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800381e:	e9d1 350b 	ldrd	r3, r5, [r1, #44]	; 0x2c
 8003822:	4333      	orrs	r3, r6
 8003824:	4313      	orrs	r3, r2
 8003826:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003828:	694a      	ldr	r2, [r1, #20]
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	432b      	orrs	r3, r5
 800382e:	4323      	orrs	r3, r4
 8003830:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003834:	6143      	str	r3, [r0, #20]
}
 8003836:	e7a2      	b.n	800377e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003838:	ea4a 0500 	orr.w	r5, sl, r0
 800383c:	ea45 0508 	orr.w	r5, r5, r8
 8003840:	ea45 050e 	orr.w	r5, r5, lr
 8003844:	ea45 0509 	orr.w	r5, r5, r9
 8003848:	432e      	orrs	r6, r5
 800384a:	4334      	orrs	r4, r6
 800384c:	f8cc 4014 	str.w	r4, [ip, #20]
}
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003854:	ea4a 0300 	orr.w	r3, sl, r0
 8003858:	ea43 0808 	orr.w	r8, r3, r8
 800385c:	ea48 0e0e 	orr.w	lr, r8, lr
 8003860:	ea4e 0606 	orr.w	r6, lr, r6
 8003864:	4334      	orrs	r4, r6
 8003866:	f8cc 4014 	str.w	r4, [ip, #20]
}
 800386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800386e:	ea40 000e 	orr.w	r0, r0, lr
 8003872:	4318      	orrs	r0, r3
 8003874:	ea40 000c 	orr.w	r0, r0, ip
 8003878:	4330      	orrs	r0, r6
 800387a:	4328      	orrs	r0, r5
 800387c:	6160      	str	r0, [r4, #20]
}
 800387e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003882:	bf00      	nop

08003884 <HAL_QSPI_MspInit>:
}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop

08003888 <HAL_QSPI_Init>:
{
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7fe f84e 	bl	800192c <HAL_GetTick>
  if(hqspi == NULL)
 8003890:	2c00      	cmp	r4, #0
 8003892:	d04c      	beq.n	800392e <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8003894:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003898:	2b01      	cmp	r3, #1
 800389a:	d053      	beq.n	8003944 <HAL_QSPI_Init+0xbc>
 800389c:	2301      	movs	r3, #1
 800389e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80038a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80038a6:	4606      	mov	r6, r0
 80038a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d040      	beq.n	8003932 <HAL_QSPI_Init+0xaa>
 80038b0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	68a1      	ldr	r1, [r4, #8]
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	3901      	subs	r1, #1
 80038ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80038be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e001      	b.n	80038ca <HAL_QSPI_Init+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	1c6b      	adds	r3, r5, #1
 80038c8:	d129      	bne.n	800391e <HAL_QSPI_Init+0x96>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038ca:	6893      	ldr	r3, [r2, #8]
 80038cc:	f013 0320 	ands.w	r3, r3, #32
 80038d0:	d1f9      	bne.n	80038c6 <HAL_QSPI_Init+0x3e>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80038d2:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
 80038d6:	68e1      	ldr	r1, [r4, #12]
 80038d8:	6810      	ldr	r0, [r2, #0]
 80038da:	4329      	orrs	r1, r5
 80038dc:	6865      	ldr	r5, [r4, #4]
 80038de:	4331      	orrs	r1, r6
 80038e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80038e4:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 80038e8:	f020 00d0 	bic.w	r0, r0, #208	; 0xd0
 80038ec:	4301      	orrs	r1, r0
 80038ee:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80038f0:	e9d4 1705 	ldrd	r1, r7, [r4, #20]
 80038f4:	6856      	ldr	r6, [r2, #4]
 80038f6:	6925      	ldr	r5, [r4, #16]
 80038f8:	4818      	ldr	r0, [pc, #96]	; (800395c <HAL_QSPI_Init+0xd4>)
 80038fa:	4339      	orrs	r1, r7
 80038fc:	4030      	ands	r0, r6
 80038fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003902:	4301      	orrs	r1, r0
 8003904:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003906:	6811      	ldr	r1, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003908:	2501      	movs	r5, #1
    __HAL_QSPI_ENABLE(hqspi);
 800390a:	4329      	orrs	r1, r5
 800390c:	6011      	str	r1, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800390e:	4618      	mov	r0, r3
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003910:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8003912:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003916:	2300      	movs	r3, #0
 8003918:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800391e:	b19d      	cbz	r5, 8003948 <HAL_QSPI_Init+0xc0>
 8003920:	f7fe f804 	bl	800192c <HAL_GetTick>
 8003924:	1b80      	subs	r0, r0, r6
 8003926:	4285      	cmp	r5, r0
 8003928:	d30e      	bcc.n	8003948 <HAL_QSPI_Init+0xc0>
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	e7cd      	b.n	80038ca <HAL_QSPI_Init+0x42>
    return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
}
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8003932:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8003936:	4620      	mov	r0, r4
  hqspi->Timeout = Timeout;
 8003938:	f241 3588 	movw	r5, #5000	; 0x1388
    HAL_QSPI_MspInit(hqspi);
 800393c:	f7ff ffa2 	bl	8003884 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003940:	64a5      	str	r5, [r4, #72]	; 0x48
 8003942:	e7b6      	b.n	80038b2 <HAL_QSPI_Init+0x2a>
  __HAL_LOCK(hqspi);
 8003944:	2002      	movs	r0, #2
}
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003948:	2304      	movs	r3, #4
 800394a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800394e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6463      	str	r3, [r4, #68]	; 0x44
 8003956:	2001      	movs	r0, #1
 8003958:	e7dd      	b.n	8003916 <HAL_QSPI_Init+0x8e>
 800395a:	bf00      	nop
 800395c:	ffe0f8fe 	.word	0xffe0f8fe

08003960 <HAL_QSPI_MspDeInit>:
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop

08003964 <HAL_QSPI_DeInit>:
  if(hqspi == NULL)
 8003964:	b1c8      	cbz	r0, 800399a <HAL_QSPI_DeInit+0x36>
  __HAL_LOCK(hqspi);
 8003966:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800396a:	2b01      	cmp	r3, #1
{
 800396c:	b510      	push	{r4, lr}
 800396e:	4604      	mov	r4, r0
  __HAL_LOCK(hqspi);
 8003970:	d011      	beq.n	8003996 <HAL_QSPI_DeInit+0x32>
  __HAL_QSPI_DISABLE(hqspi);
 8003972:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hqspi);
 8003974:	2301      	movs	r3, #1
 8003976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_QSPI_DISABLE(hqspi);
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8003982:	f7ff ffed 	bl	8003960 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003986:	2300      	movs	r3, #0
 8003988:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800398a:	4618      	mov	r0, r3
  hqspi->State = HAL_QSPI_STATE_RESET;
 800398c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003990:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003994:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hqspi);
 8003996:	2002      	movs	r0, #2
}
 8003998:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800399a:	2001      	movs	r0, #1
}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop

080039a0 <HAL_QSPI_Command>:
{
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4604      	mov	r4, r0
 80039a4:	460d      	mov	r5, r1
 80039a6:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7fd ffc0 	bl	800192c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80039ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00b      	beq.n	80039cc <HAL_QSPI_Command+0x2c>
 80039b4:	2301      	movs	r3, #1
 80039b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80039ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d006      	beq.n	80039d0 <HAL_QSPI_Command+0x30>
    status = HAL_BUSY;   
 80039c2:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 80039c4:	2300      	movs	r3, #0
 80039c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80039ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hqspi);
 80039cc:	2002      	movs	r0, #2
}
 80039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039d0:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 80039d2:	2302      	movs	r3, #2
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039d4:	6462      	str	r2, [r4, #68]	; 0x44
 80039d6:	4607      	mov	r7, r0
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 80039d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80039dc:	1c70      	adds	r0, r6, #1
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	d10e      	bne.n	8003a00 <HAL_QSPI_Command+0x60>
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	f012 0220 	ands.w	r2, r2, #32
 80039e8:	d1fb      	bne.n	80039e2 <HAL_QSPI_Command+0x42>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80039ea:	4629      	mov	r1, r5
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff fe8b 	bl	8003708 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80039f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039f4:	b1bb      	cbz	r3, 8003a26 <HAL_QSPI_Command+0x86>
        hqspi->State = HAL_QSPI_STATE_READY;   
 80039f6:	2301      	movs	r3, #1
 80039f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80039fc:	2000      	movs	r0, #0
 80039fe:	e7e1      	b.n	80039c4 <HAL_QSPI_Command+0x24>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	f012 0220 	ands.w	r2, r2, #32
 8003a06:	d019      	beq.n	8003a3c <HAL_QSPI_Command+0x9c>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a08:	b126      	cbz	r6, 8003a14 <HAL_QSPI_Command+0x74>
 8003a0a:	f7fd ff8f 	bl	800192c <HAL_GetTick>
 8003a0e:	1bc0      	subs	r0, r0, r7
 8003a10:	4286      	cmp	r6, r0
 8003a12:	d2e3      	bcs.n	80039dc <HAL_QSPI_Command+0x3c>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003a14:	2304      	movs	r3, #4
 8003a16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6463      	str	r3, [r4, #68]	; 0x44
 8003a22:	2001      	movs	r0, #1
 8003a24:	e7ce      	b.n	80039c4 <HAL_QSPI_Command+0x24>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	6893      	ldr	r3, [r2, #8]
 8003a2a:	079b      	lsls	r3, r3, #30
 8003a2c:	d5fc      	bpl.n	8003a28 <HAL_QSPI_Command+0x88>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a2e:	2102      	movs	r1, #2
          hqspi->State = HAL_QSPI_STATE_READY;   
 8003a30:	2301      	movs	r3, #1
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a32:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a34:	2000      	movs	r0, #0
          hqspi->State = HAL_QSPI_STATE_READY;   
 8003a36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003a3a:	e7c3      	b.n	80039c4 <HAL_QSPI_Command+0x24>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7ff fe62 	bl	8003708 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8003a44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a46:	b13b      	cbz	r3, 8003a58 <HAL_QSPI_Command+0xb8>
 8003a48:	e7d5      	b.n	80039f6 <HAL_QSPI_Command+0x56>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	d0e2      	beq.n	8003a14 <HAL_QSPI_Command+0x74>
 8003a4e:	f7fd ff6d 	bl	800192c <HAL_GetTick>
 8003a52:	1bc0      	subs	r0, r0, r7
 8003a54:	4286      	cmp	r6, r0
 8003a56:	d3dd      	bcc.n	8003a14 <HAL_QSPI_Command+0x74>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	6893      	ldr	r3, [r2, #8]
 8003a5c:	0799      	lsls	r1, r3, #30
 8003a5e:	d5f4      	bpl.n	8003a4a <HAL_QSPI_Command+0xaa>
 8003a60:	e7e5      	b.n	8003a2e <HAL_QSPI_Command+0x8e>
 8003a62:	bf00      	nop

08003a64 <HAL_QSPI_AutoPolling>:
{
 8003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a68:	4604      	mov	r4, r0
 8003a6a:	461e      	mov	r6, r3
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7fd ff5c 	bl	800192c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003a74:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d00c      	beq.n	8003a96 <HAL_QSPI_AutoPolling+0x32>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003a82:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d008      	beq.n	8003a9c <HAL_QSPI_AutoPolling+0x38>
    status = HAL_BUSY;   
 8003a8a:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hqspi);
 8003a96:	2002      	movs	r0, #2
}
 8003a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a9c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003a9e:	2342      	movs	r3, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003aa0:	6462      	str	r2, [r4, #68]	; 0x44
 8003aa2:	4680      	mov	r8, r0
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003aa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003aa8:	1c70      	adds	r0, r6, #1
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	d125      	bne.n	8003afa <HAL_QSPI_AutoPolling+0x96>
 8003aae:	688b      	ldr	r3, [r1, #8]
 8003ab0:	069a      	lsls	r2, r3, #26
 8003ab2:	d4fc      	bmi.n	8003aae <HAL_QSPI_AutoPolling+0x4a>
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003ab4:	e9d5 2000 	ldrd	r2, r0, [r5]
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003ab8:	68ab      	ldr	r3, [r5, #8]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003aba:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003abc:	6248      	str	r0, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003abe:	62cb      	str	r3, [r1, #44]	; 0x2c
      cmd->NbData = cfg->StatusBytesSize;
 8003ac0:	e9d5 0303 	ldrd	r0, r3, [r5, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8003ac4:	680a      	ldr	r2, [r1, #0]
 8003ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8003ad6:	62b8      	str	r0, [r7, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003ad8:	4639      	mov	r1, r7
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff fe14 	bl	8003708 <QSPI_Config>
 8003ae0:	1c70      	adds	r0, r6, #1
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	d114      	bne.n	8003b10 <HAL_QSPI_AutoPolling+0xac>
 8003ae6:	6893      	ldr	r3, [r2, #8]
 8003ae8:	0719      	lsls	r1, r3, #28
 8003aea:	d5fc      	bpl.n	8003ae6 <HAL_QSPI_AutoPolling+0x82>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003aec:	2108      	movs	r1, #8
        hqspi->State = HAL_QSPI_STATE_READY;
 8003aee:	2301      	movs	r3, #1
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003af0:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003af2:	2000      	movs	r0, #0
        hqspi->State = HAL_QSPI_STATE_READY;
 8003af4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003af8:	e7c8      	b.n	8003a8c <HAL_QSPI_AutoPolling+0x28>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003afa:	688b      	ldr	r3, [r1, #8]
 8003afc:	069b      	lsls	r3, r3, #26
 8003afe:	d5d9      	bpl.n	8003ab4 <HAL_QSPI_AutoPolling+0x50>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b00:	b186      	cbz	r6, 8003b24 <HAL_QSPI_AutoPolling+0xc0>
 8003b02:	f7fd ff13 	bl	800192c <HAL_GetTick>
 8003b06:	eba0 0008 	sub.w	r0, r0, r8
 8003b0a:	4286      	cmp	r6, r0
 8003b0c:	d2cc      	bcs.n	8003aa8 <HAL_QSPI_AutoPolling+0x44>
 8003b0e:	e009      	b.n	8003b24 <HAL_QSPI_AutoPolling+0xc0>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b10:	6893      	ldr	r3, [r2, #8]
 8003b12:	071b      	lsls	r3, r3, #28
 8003b14:	d4ea      	bmi.n	8003aec <HAL_QSPI_AutoPolling+0x88>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b16:	b12e      	cbz	r6, 8003b24 <HAL_QSPI_AutoPolling+0xc0>
 8003b18:	f7fd ff08 	bl	800192c <HAL_GetTick>
 8003b1c:	eba0 0008 	sub.w	r0, r0, r8
 8003b20:	4286      	cmp	r6, r0
 8003b22:	d2dd      	bcs.n	8003ae0 <HAL_QSPI_AutoPolling+0x7c>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b24:	2304      	movs	r3, #4
 8003b26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6463      	str	r3, [r4, #68]	; 0x44
 8003b32:	2001      	movs	r0, #1
 8003b34:	e7aa      	b.n	8003a8c <HAL_QSPI_AutoPolling+0x28>
 8003b36:	bf00      	nop

08003b38 <HAL_QSPI_Abort>:
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7fd fef6 	bl	800192c <HAL_GetTick>
 8003b40:	4606      	mov	r6, r0
  if ((hqspi->State & 0x2U) != 0U)
 8003b42:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8003b46:	f010 0002 	ands.w	r0, r0, #2
 8003b4a:	d01c      	beq.n	8003b86 <HAL_QSPI_Abort+0x4e>
    __HAL_UNLOCK(hqspi);
 8003b4c:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8003b4e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8003b50:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	0751      	lsls	r1, r2, #29
 8003b58:	d421      	bmi.n	8003b9e <HAL_QSPI_Abort+0x66>
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003b5a:	681a      	ldr	r2, [r3, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003b5c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003b5e:	f042 0202 	orr.w	r2, r2, #2
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	1c6a      	adds	r2, r5, #1
 8003b66:	d10f      	bne.n	8003b88 <HAL_QSPI_Abort+0x50>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	0795      	lsls	r5, r2, #30
 8003b6c:	d5fc      	bpl.n	8003b68 <HAL_QSPI_Abort+0x30>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003b6e:	2202      	movs	r2, #2
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b70:	6ca5      	ldr	r5, [r4, #72]	; 0x48
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	1c69      	adds	r1, r5, #1
 8003b76:	d11c      	bne.n	8003bb2 <HAL_QSPI_Abort+0x7a>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	0692      	lsls	r2, r2, #26
 8003b7c:	d4fc      	bmi.n	8003b78 <HAL_QSPI_Abort+0x40>
      hqspi->State = HAL_QSPI_STATE_READY;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003b84:	2000      	movs	r0, #0
}
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	0790      	lsls	r0, r2, #30
 8003b8c:	d4ef      	bmi.n	8003b6e <HAL_QSPI_Abort+0x36>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b8e:	b30d      	cbz	r5, 8003bd4 <HAL_QSPI_Abort+0x9c>
 8003b90:	f7fd fecc 	bl	800192c <HAL_GetTick>
 8003b94:	1b80      	subs	r0, r0, r6
 8003b96:	4285      	cmp	r5, r0
 8003b98:	d31c      	bcc.n	8003bd4 <HAL_QSPI_Abort+0x9c>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	e7e2      	b.n	8003b64 <HAL_QSPI_Abort+0x2c>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003b9e:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003ba0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003ba2:	f022 0204 	bic.w	r2, r2, #4
 8003ba6:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003ba8:	f7fe f82e 	bl	8001c08 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8003bac:	b960      	cbnz	r0, 8003bc8 <HAL_QSPI_Abort+0x90>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	e7d3      	b.n	8003b5a <HAL_QSPI_Abort+0x22>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	069b      	lsls	r3, r3, #26
 8003bb6:	d5e2      	bpl.n	8003b7e <HAL_QSPI_Abort+0x46>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003bb8:	b165      	cbz	r5, 8003bd4 <HAL_QSPI_Abort+0x9c>
 8003bba:	f7fd feb7 	bl	800192c <HAL_GetTick>
 8003bbe:	1b80      	subs	r0, r0, r6
 8003bc0:	4285      	cmp	r5, r0
 8003bc2:	d307      	bcc.n	8003bd4 <HAL_QSPI_Abort+0x9c>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	e7d5      	b.n	8003b74 <HAL_QSPI_Abort+0x3c>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003bc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f042 0204 	orr.w	r2, r2, #4
 8003bd0:	6462      	str	r2, [r4, #68]	; 0x44
 8003bd2:	e7c2      	b.n	8003b5a <HAL_QSPI_Abort+0x22>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6463      	str	r3, [r4, #68]	; 0x44
 8003be2:	2001      	movs	r0, #1
}
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
 8003be6:	bf00      	nop

08003be8 <HAL_QSPI_Transmit>:
{
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	4604      	mov	r4, r0
 8003bee:	4688      	mov	r8, r1
 8003bf0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8003bf2:	f7fd fe9b 	bl	800192c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003bf6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d06a      	beq.n	8003cd4 <HAL_QSPI_Transmit+0xec>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c04:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c06:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003c0a:	6827      	ldr	r7, [r4, #0]
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c0c:	b2c0      	uxtb	r0, r0
 8003c0e:	4298      	cmp	r0, r3
 8003c10:	d005      	beq.n	8003c1e <HAL_QSPI_Transmit+0x36>
    status = HAL_BUSY;
 8003c12:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8003c14:	2300      	movs	r3, #0
 8003c16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8003c22:	f1b8 0f00 	cmp.w	r8, #0
 8003c26:	d037      	beq.n	8003c98 <HAL_QSPI_Transmit+0xb0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003c28:	2312      	movs	r3, #18
 8003c2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3301      	adds	r3, #1
 8003c32:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c34:	693b      	ldr	r3, [r7, #16]
      hqspi->pTxBuffPtr = pData;
 8003c36:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003c44:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
 8003c46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c48:	4639      	mov	r1, r7
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d034      	beq.n	8003cb8 <HAL_QSPI_Transmit+0xd0>
 8003c4e:	1c6a      	adds	r2, r5, #1
 8003c50:	d110      	bne.n	8003c74 <HAL_QSPI_Transmit+0x8c>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c52:	688b      	ldr	r3, [r1, #8]
 8003c54:	075b      	lsls	r3, r3, #29
 8003c56:	d5fc      	bpl.n	8003c52 <HAL_QSPI_Transmit+0x6a>
        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8003c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	6262      	str	r2, [r4, #36]	; 0x24
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->TxXferCount--;
 8003c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c66:	3b01      	subs	r3, #1
 8003c68:	62e3      	str	r3, [r4, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003c6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c6c:	b31b      	cbz	r3, 8003cb6 <HAL_QSPI_Transmit+0xce>
 8003c6e:	1c6a      	adds	r2, r5, #1
 8003c70:	6821      	ldr	r1, [r4, #0]
 8003c72:	d0ee      	beq.n	8003c52 <HAL_QSPI_Transmit+0x6a>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c74:	688b      	ldr	r3, [r1, #8]
 8003c76:	0758      	lsls	r0, r3, #29
 8003c78:	d4ee      	bmi.n	8003c58 <HAL_QSPI_Transmit+0x70>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c7a:	b125      	cbz	r5, 8003c86 <HAL_QSPI_Transmit+0x9e>
 8003c7c:	f7fd fe56 	bl	800192c <HAL_GetTick>
 8003c80:	1b80      	subs	r0, r0, r6
 8003c82:	4285      	cmp	r5, r0
 8003c84:	d2f3      	bcs.n	8003c6e <HAL_QSPI_Transmit+0x86>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003c86:	2304      	movs	r3, #4
 8003c88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6463      	str	r3, [r4, #68]	; 0x44
 8003c94:	2001      	movs	r0, #1
 8003c96:	e019      	b.n	8003ccc <HAL_QSPI_Transmit+0xe4>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003c98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c9a:	f043 0308 	orr.w	r3, r3, #8
 8003c9e:	6463      	str	r3, [r4, #68]	; 0x44
 8003ca0:	e7b8      	b.n	8003c14 <HAL_QSPI_Transmit+0x2c>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	079b      	lsls	r3, r3, #30
 8003ca6:	d40c      	bmi.n	8003cc2 <HAL_QSPI_Transmit+0xda>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d0ec      	beq.n	8003c86 <HAL_QSPI_Transmit+0x9e>
 8003cac:	f7fd fe3e 	bl	800192c <HAL_GetTick>
 8003cb0:	1b80      	subs	r0, r0, r6
 8003cb2:	4285      	cmp	r5, r0
 8003cb4:	d3e7      	bcc.n	8003c86 <HAL_QSPI_Transmit+0x9e>
 8003cb6:	6827      	ldr	r7, [r4, #0]
 8003cb8:	1c69      	adds	r1, r5, #1
 8003cba:	d1f2      	bne.n	8003ca2 <HAL_QSPI_Transmit+0xba>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	079a      	lsls	r2, r3, #30
 8003cc0:	d5fc      	bpl.n	8003cbc <HAL_QSPI_Transmit+0xd4>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	60fb      	str	r3, [r7, #12]
          status = HAL_QSPI_Abort(hqspi);
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff ff36 	bl	8003b38 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;    
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003cd2:	e79f      	b.n	8003c14 <HAL_QSPI_Transmit+0x2c>
  __HAL_LOCK(hqspi);
 8003cd4:	2002      	movs	r0, #2
}
 8003cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cda:	bf00      	nop

08003cdc <HAL_QSPI_Receive>:
{
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	4615      	mov	r5, r2
 8003ce4:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8003ce6:	f7fd fe21 	bl	800192c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003cea:	6826      	ldr	r6, [r4, #0]
 8003cec:	69b2      	ldr	r2, [r6, #24]
  __HAL_LOCK(hqspi);
 8003cee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d06e      	beq.n	8003dd4 <HAL_QSPI_Receive+0xf8>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003cfc:	4607      	mov	r7, r0
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003cfe:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8003d02:	b2c0      	uxtb	r0, r0
 8003d04:	4298      	cmp	r0, r3
 8003d06:	d005      	beq.n	8003d14 <HAL_QSPI_Receive+0x38>
    status = HAL_BUSY;
 8003d08:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8003d18:	f1b8 0f00 	cmp.w	r8, #0
 8003d1c:	d03c      	beq.n	8003d98 <HAL_QSPI_Receive+0xbc>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003d1e:	2322      	movs	r3, #34	; 0x22
 8003d20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d24:	6933      	ldr	r3, [r6, #16]
 8003d26:	3301      	adds	r3, #1
 8003d28:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d2a:	6933      	ldr	r3, [r6, #16]
      hqspi->pRxBuffPtr = pData;
 8003d2c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d30:	3301      	adds	r3, #1
 8003d32:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003d34:	6973      	ldr	r3, [r6, #20]
 8003d36:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003d3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d3e:	6173      	str	r3, [r6, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003d40:	61b2      	str	r2, [r6, #24]
      while(hqspi->RxXferCount > 0U)
 8003d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d44:	4631      	mov	r1, r6
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d036      	beq.n	8003db8 <HAL_QSPI_Receive+0xdc>
 8003d4a:	1c68      	adds	r0, r5, #1
 8003d4c:	d111      	bne.n	8003d72 <HAL_QSPI_Receive+0x96>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d4e:	688b      	ldr	r3, [r1, #8]
 8003d50:	f013 0f06 	tst.w	r3, #6
 8003d54:	d0fb      	beq.n	8003d4e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8003d56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	6322      	str	r2, [r4, #48]	; 0x30
 8003d5c:	f896 2020 	ldrb.w	r2, [r6, #32]
 8003d60:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8003d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d64:	3b01      	subs	r3, #1
 8003d66:	63a3      	str	r3, [r4, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003d68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d6a:	b323      	cbz	r3, 8003db6 <HAL_QSPI_Receive+0xda>
 8003d6c:	1c68      	adds	r0, r5, #1
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	d0ed      	beq.n	8003d4e <HAL_QSPI_Receive+0x72>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d72:	688b      	ldr	r3, [r1, #8]
 8003d74:	f013 0f06 	tst.w	r3, #6
 8003d78:	d1ed      	bne.n	8003d56 <HAL_QSPI_Receive+0x7a>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d7a:	b125      	cbz	r5, 8003d86 <HAL_QSPI_Receive+0xaa>
 8003d7c:	f7fd fdd6 	bl	800192c <HAL_GetTick>
 8003d80:	1bc0      	subs	r0, r0, r7
 8003d82:	4285      	cmp	r5, r0
 8003d84:	d2f2      	bcs.n	8003d6c <HAL_QSPI_Receive+0x90>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003d86:	2304      	movs	r3, #4
 8003d88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003d8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6463      	str	r3, [r4, #68]	; 0x44
 8003d94:	2001      	movs	r0, #1
 8003d96:	e019      	b.n	8003dcc <HAL_QSPI_Receive+0xf0>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d9a:	f043 0308 	orr.w	r3, r3, #8
 8003d9e:	6463      	str	r3, [r4, #68]	; 0x44
 8003da0:	e7b3      	b.n	8003d0a <HAL_QSPI_Receive+0x2e>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003da2:	68b3      	ldr	r3, [r6, #8]
 8003da4:	079b      	lsls	r3, r3, #30
 8003da6:	d40c      	bmi.n	8003dc2 <HAL_QSPI_Receive+0xe6>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d0ec      	beq.n	8003d86 <HAL_QSPI_Receive+0xaa>
 8003dac:	f7fd fdbe 	bl	800192c <HAL_GetTick>
 8003db0:	1bc0      	subs	r0, r0, r7
 8003db2:	4285      	cmp	r5, r0
 8003db4:	d3e7      	bcc.n	8003d86 <HAL_QSPI_Receive+0xaa>
 8003db6:	6826      	ldr	r6, [r4, #0]
 8003db8:	1c69      	adds	r1, r5, #1
 8003dba:	d1f2      	bne.n	8003da2 <HAL_QSPI_Receive+0xc6>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003dbc:	68b3      	ldr	r3, [r6, #8]
 8003dbe:	079a      	lsls	r2, r3, #30
 8003dc0:	d5fc      	bpl.n	8003dbc <HAL_QSPI_Receive+0xe0>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	60f3      	str	r3, [r6, #12]
         status = HAL_QSPI_Abort(hqspi);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff feb6 	bl	8003b38 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;    
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003dd2:	e79a      	b.n	8003d0a <HAL_QSPI_Receive+0x2e>
  __HAL_LOCK(hqspi);
 8003dd4:	2002      	movs	r0, #2
}
 8003dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dda:	bf00      	nop

08003ddc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x68>)
 8003dde:	6893      	ldr	r3, [r2, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d02b      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x64>
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d127      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x60>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dec:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dee:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003df4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003df8:	6853      	ldr	r3, [r2, #4]
 8003dfa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003dfe:	fa92 f0a2 	rbit	r0, r2
 8003e02:	fab0 f080 	clz	r0, r0
 8003e06:	ea03 0302 	and.w	r3, r3, r2
 8003e0a:	fa23 f300 	lsr.w	r3, r3, r0
 8003e0e:	bf14      	ite	ne
 8003e10:	480d      	ldrne	r0, [pc, #52]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003e12:	480e      	ldreq	r0, [pc, #56]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x70>)
 8003e14:	fbb0 f0f1 	udiv	r0, r0, r1
 8003e18:	fb00 f003 	mul.w	r0, r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x68>)
 8003e1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	fa92 f2a2 	rbit	r2, r2
 8003e28:	fab2 f282 	clz	r2, r2
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e30:	40d3      	lsrs	r3, r2
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8003e36:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e3a:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8003e3c:	4803      	ldr	r0, [pc, #12]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003e3e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003e40:	4801      	ldr	r0, [pc, #4]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003e42:	4770      	bx	lr
 8003e44:	40023800 	.word	0x40023800
 8003e48:	017d7840 	.word	0x017d7840
 8003e4c:	00f42400 	.word	0x00f42400

08003e50 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <HAL_RCC_ClockConfig+0x160>)
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	d208      	bcs.n	8003e6e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5c:	b2cb      	uxtb	r3, r1
 8003e5e:	7013      	strb	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e60:	6813      	ldr	r3, [r2, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	428b      	cmp	r3, r1
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x1e>
      return HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
}
 8003e6c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6e:	6803      	ldr	r3, [r0, #0]
 8003e70:	079a      	lsls	r2, r3, #30
{
 8003e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e76:	d506      	bpl.n	8003e86 <HAL_RCC_ClockConfig+0x36>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4c4e      	ldr	r4, [pc, #312]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003e7a:	6885      	ldr	r5, [r0, #8]
 8003e7c:	68a2      	ldr	r2, [r4, #8]
 8003e7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e82:	432a      	orrs	r2, r5
 8003e84:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	07df      	lsls	r7, r3, #31
 8003e88:	4605      	mov	r5, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	d526      	bpl.n	8003edc <HAL_RCC_ClockConfig+0x8c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8e:	6842      	ldr	r2, [r0, #4]
 8003e90:	2a01      	cmp	r2, #1
 8003e92:	f000 8084 	beq.w	8003f9e <HAL_RCC_ClockConfig+0x14e>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003e96:	1e93      	subs	r3, r2, #2
 8003e98:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003e9e:	d97b      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x148>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	0799      	lsls	r1, r3, #30
 8003ea2:	d528      	bpl.n	8003ef6 <HAL_RCC_ClockConfig+0xa6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea4:	4e43      	ldr	r6, [pc, #268]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003ea6:	68b3      	ldr	r3, [r6, #8]
 8003ea8:	f023 0303 	bic.w	r3, r3, #3
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003eb0:	f7fd fd3c 	bl	800192c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb4:	686b      	ldr	r3, [r5, #4]
 8003eb6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003eb8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eba:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebe:	d04f      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x110>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d058      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x126>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x84>
 8003ec8:	e060      	b.n	8003f8c <HAL_RCC_ClockConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eca:	f7fd fd2f 	bl	800192c <HAL_GetTick>
 8003ece:	1bc0      	subs	r0, r0, r7
 8003ed0:	4540      	cmp	r0, r8
 8003ed2:	d86a      	bhi.n	8003faa <HAL_RCC_ClockConfig+0x15a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ed4:	68b3      	ldr	r3, [r6, #8]
 8003ed6:	f013 0f0c 	tst.w	r3, #12
 8003eda:	d1f6      	bne.n	8003eca <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003edc:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <HAL_RCC_ClockConfig+0x160>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d909      	bls.n	8003efc <HAL_RCC_ClockConfig+0xac>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee8:	b2e3      	uxtb	r3, r4
 8003eea:	7013      	strb	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_ClockConfig+0xac>
      return HAL_ERROR;
 8003ef6:	2001      	movs	r0, #1
}
 8003ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	075a      	lsls	r2, r3, #29
 8003f00:	d506      	bpl.n	8003f10 <HAL_RCC_ClockConfig+0xc0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f02:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003f04:	68e8      	ldr	r0, [r5, #12]
 8003f06:	688a      	ldr	r2, [r1, #8]
 8003f08:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003f0c:	4302      	orrs	r2, r0
 8003f0e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	071b      	lsls	r3, r3, #28
 8003f12:	d507      	bpl.n	8003f24 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003f16:	6929      	ldr	r1, [r5, #16]
 8003f18:	6893      	ldr	r3, [r2, #8]
 8003f1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003f1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f24:	f7ff ff5a 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003f28:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	22f0      	movs	r2, #240	; 0xf0
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	fa92 f2a2 	rbit	r2, r2
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3c:	40d3      	lsrs	r3, r2
 8003f3e:	481e      	ldr	r0, [pc, #120]	; (8003fb8 <HAL_RCC_ClockConfig+0x168>)
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <HAL_RCC_ClockConfig+0x16c>)
 8003f42:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f44:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f46:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f4c:	f7fd fcb6 	bl	80018bc <HAL_InitTick>
  return HAL_OK;
 8003f50:	2000      	movs	r0, #0
}
 8003f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f56:	f7fd fce9 	bl	800192c <HAL_GetTick>
 8003f5a:	1bc0      	subs	r0, r0, r7
 8003f5c:	4540      	cmp	r0, r8
 8003f5e:	d824      	bhi.n	8003faa <HAL_RCC_ClockConfig+0x15a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f60:	68b3      	ldr	r3, [r6, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d1f5      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x106>
 8003f6a:	e7b7      	b.n	8003edc <HAL_RCC_ClockConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fd fcde 	bl	800192c <HAL_GetTick>
 8003f70:	1bc0      	subs	r0, r0, r7
 8003f72:	4540      	cmp	r0, r8
 8003f74:	d819      	bhi.n	8003faa <HAL_RCC_ClockConfig+0x15a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f76:	68b3      	ldr	r3, [r6, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d1f5      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x11c>
 8003f80:	e7ac      	b.n	8003edc <HAL_RCC_ClockConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f82:	f7fd fcd3 	bl	800192c <HAL_GetTick>
 8003f86:	1bc0      	subs	r0, r0, r7
 8003f88:	4540      	cmp	r0, r8
 8003f8a:	d80e      	bhi.n	8003faa <HAL_RCC_ClockConfig+0x15a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003f8c:	68b3      	ldr	r3, [r6, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d1f5      	bne.n	8003f82 <HAL_RCC_ClockConfig+0x132>
 8003f96:	e7a1      	b.n	8003edc <HAL_RCC_ClockConfig+0x8c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f98:	0198      	lsls	r0, r3, #6
 8003f9a:	d483      	bmi.n	8003ea4 <HAL_RCC_ClockConfig+0x54>
 8003f9c:	e7ab      	b.n	8003ef6 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_ClockConfig+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	039e      	lsls	r6, r3, #14
 8003fa4:	f53f af7e 	bmi.w	8003ea4 <HAL_RCC_ClockConfig+0x54>
 8003fa8:	e7a5      	b.n	8003ef6 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 8003faa:	2003      	movs	r0, #3
 8003fac:	e7a4      	b.n	8003ef8 <HAL_RCC_ClockConfig+0xa8>
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08009830 	.word	0x08009830
 8003fbc:	20000060 	.word	0x20000060

08003fc0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000060 	.word	0x20000060

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	fa92 f2a2 	rbit	r2, r2
 8003fd8:	fab2 f282 	clz	r2, r2
 8003fdc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003fe0:	40d3      	lsrs	r3, r2
 8003fe2:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	6810      	ldr	r0, [r2, #0]
}
 8003fea:	40d8      	lsrs	r0, r3
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08009840 	.word	0x08009840
 8003ff8:	20000060 	.word	0x20000060

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
                                  
  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004002:	6800      	ldr	r0, [r0, #0]
 8004004:	0602      	lsls	r2, r0, #24
{
 8004006:	b082      	sub	sp, #8
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004008:	d508      	bpl.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800400a:	4ad0      	ldr	r2, [pc, #832]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800400c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800400e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004012:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004016:	430b      	orrs	r3, r1
 8004018:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }                                  
  /*--------------------------------------------------------------------------*/
    
  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800401c:	05c3      	lsls	r3, r0, #23
 800401e:	d508      	bpl.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
    
    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004020:	4aca      	ldr	r2, [pc, #808]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004022:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004024:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402c:	430b      	orrs	r3, r1
 800402e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8004032:	f010 0f43 	tst.w	r0, #67	; 0x43
 8004036:	f040 8124 	bne.w	8004282 <HAL_RCCEx_PeriphCLKConfig+0x286>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 800403a:	f010 0f0c 	tst.w	r0, #12
 800403e:	d113      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6c>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             || 
 8004040:	0603      	lsls	r3, r0, #24
 8004042:	d503      	bpl.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x50>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8004044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800404a:	d00d      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  }

  /*--------------------------------------------------------------------------*/
     
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800404c:	0685      	lsls	r5, r0, #26
 800404e:	f100 8185 	bmi.w	800435c <HAL_RCCEx_PeriphCLKConfig+0x360>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004052:	f010 0010 	ands.w	r0, r0, #16
 8004056:	d004      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004058:	4bbd      	ldr	r3, [pc, #756]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800405a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800405e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004060:	2000      	movs	r0, #0
}
 8004062:	b002      	add	sp, #8
 8004064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004068:	4bba      	ldr	r3, [pc, #744]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x358>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800406a:	4db8      	ldr	r5, [pc, #736]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
    __HAL_RCC_PLLSAI_DISABLE(); 
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004070:	f7fd fc5c 	bl	800192c <HAL_GetTick>
 8004074:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004076:	e005      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004078:	f7fd fc58 	bl	800192c <HAL_GetTick>
 800407c:	1b80      	subs	r0, r0, r6
 800407e:	2802      	cmp	r0, #2
 8004080:	f200 80fb 	bhi.w	800427a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	009f      	lsls	r7, r3, #2
 8004088:	d4f6      	bmi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	0750      	lsls	r0, r2, #29
 800408e:	d549      	bpl.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x128>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);     
 8004090:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8004094:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 8004098:	fa97 faa7 	rbit	sl, r7
 800409c:	f04f 4ce0 	mov.w	ip, #1879048192	; 0x70000000
 80040a0:	faba fa8a 	clz	sl, sl
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));      
 80040a4:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
 80040a8:	fa9c f9ac 	rbit	r9, ip
 80040ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040b0:	fab9 f989 	clz	r9, r9
 80040b4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);      
 80040b8:	fab3 f883 	clz	r8, r3
 80040bc:	fa97 f7a7 	rbit	r7, r7
 80040c0:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 80040c4:	fab7 f787 	clz	r7, r7
 80040c8:	fa9e feae 	rbit	lr, lr
 80040cc:	fabe fe8e 	clz	lr, lr
 80040d0:	fa9c fcac 	rbit	ip, ip
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);     
 80040d4:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);      
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);     
 80040dc:	fa21 f10a 	lsr.w	r1, r1, sl
 80040e0:	3101      	adds	r1, #1
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));      
 80040e2:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);      
 80040e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));      
 80040ea:	fa26 f909 	lsr.w	r9, r6, r9
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);      
 80040ee:	fabc fc8c 	clz	ip, ip
 80040f2:	fa03 f308 	lsl.w	r3, r3, r8
 80040f6:	fa00 f00e 	lsl.w	r0, r0, lr
 80040fa:	3901      	subs	r1, #1
 80040fc:	fa09 fc0c 	lsl.w	ip, r9, ip
 8004100:	4303      	orrs	r3, r0
 8004102:	fa01 f707 	lsl.w	r7, r1, r7
 8004106:	ea43 030c 	orr.w	r3, r3, ip
 800410a:	433b      	orrs	r3, r7
 800410c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004110:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004114:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004116:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800411a:	3901      	subs	r1, #1
 800411c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004120:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004124:	0711      	lsls	r1, r2, #28
 8004126:	d545      	bpl.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);
 8004128:	4e88      	ldr	r6, [pc, #544]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800412a:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 800412e:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8004132:	fa97 f5a7 	rbit	r5, r7
 8004136:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 800413a:	fab5 f585 	clz	r5, r5
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));     
 800413e:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8004142:	fa9c f8ac 	rbit	r8, ip
 8004146:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800414a:	fab8 f888 	clz	r8, r8
 800414e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8004152:	fab3 fe83 	clz	lr, r3
 8004156:	fa97 f7a7 	rbit	r7, r7
 800415a:	fab7 f787 	clz	r7, r7
 800415e:	fa9c fcac 	rbit	ip, ip
 8004162:	f04f 49e0 	mov.w	r9, #1879048192	; 0x70000000
 8004166:	fabc fc8c 	clz	ip, ip
 800416a:	fa99 f9a9 	rbit	r9, r9
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);
 800416e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8004172:	6923      	ldr	r3, [r4, #16]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);
 8004174:	40e8      	lsrs	r0, r5
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8004176:	69e5      	ldr	r5, [r4, #28]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);
 8004178:	3001      	adds	r0, #1
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800417a:	fab9 f989 	clz	r9, r9
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));     
 800417e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8004182:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));     
 8004186:	fa21 f108 	lsr.w	r1, r1, r8
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800418a:	fa05 f509 	lsl.w	r5, r5, r9
 800418e:	fa03 f30e 	lsl.w	r3, r3, lr
 8004192:	fa01 f10c 	lsl.w	r1, r1, ip
 8004196:	3801      	subs	r0, #1
 8004198:	432b      	orrs	r3, r5
 800419a:	430b      	orrs	r3, r1
 800419c:	40b8      	lsls	r0, r7
 800419e:	4303      	orrs	r3, r0
 80041a0:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041a4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80041a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80041aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041ae:	430b      	orrs	r3, r1
 80041b0:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&        
 80041b4:	0613      	lsls	r3, r2, #24
 80041b6:	d53f      	bpl.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80041b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041be:	d13b      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80041c0:	4862      	ldr	r0, [pc, #392]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80041c2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80041c6:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 80041ca:	fa91 f9a1 	rbit	r9, r1
 80041ce:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80041d2:	fab9 f989 	clz	r9, r9
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80041d6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80041da:	fa96 fca6 	rbit	ip, r6
 80041de:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 80041e2:	fabc fc8c 	clz	ip, ip
 80041e6:	fa9e feae 	rbit	lr, lr
 80041ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80041ee:	fabe fe8e 	clz	lr, lr
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	fab3 f883 	clz	r8, r3
 80041fa:	fa91 f1a1 	rbit	r1, r1
 80041fe:	fab1 f781 	clz	r7, r1
 8004202:	fa96 f6a6 	rbit	r6, r6
 8004206:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 800420a:	085b      	lsrs	r3, r3, #1
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800420c:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8004210:	3b01      	subs	r3, #1
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8004212:	fa25 f509 	lsr.w	r5, r5, r9
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004216:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800421a:	fa03 f308 	lsl.w	r3, r3, r8
 800421e:	fa01 f10e 	lsl.w	r1, r1, lr
 8004222:	40bd      	lsls	r5, r7
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004224:	fa22 f20c 	lsr.w	r2, r2, ip
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8004228:	fab6 f686 	clz	r6, r6
 800422c:	430b      	orrs	r3, r1
 800422e:	40b2      	lsls	r2, r6
 8004230:	432b      	orrs	r3, r5
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8004238:	4b46      	ldr	r3, [pc, #280]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x358>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800423a:	4d44      	ldr	r5, [pc, #272]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
    __HAL_RCC_PLLSAI_ENABLE();
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004240:	f7fd fb74 	bl	800192c <HAL_GetTick>
 8004244:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x256>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004248:	f7fd fb70 	bl	800192c <HAL_GetTick>
 800424c:	1b80      	subs	r0, r0, r6
 800424e:	2802      	cmp	r0, #2
 8004250:	d813      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004252:	682b      	ldr	r3, [r5, #0]
 8004254:	009f      	lsls	r7, r3, #2
 8004256:	d5f7      	bpl.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	e6f7      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x50>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	460d      	mov	r5, r1
        tickstart = HAL_GetTick();
 800425e:	f7fd fb65 	bl	800192c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004266:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004268:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800426a:	079b      	lsls	r3, r3, #30
 800426c:	f100 80ab 	bmi.w	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd fb5c 	bl	800192c <HAL_GetTick>
 8004274:	1bc0      	subs	r0, r0, r7
 8004276:	42b0      	cmp	r0, r6
 8004278:	d9f6      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        return HAL_TIMEOUT;
 800427a:	2003      	movs	r0, #3
}
 800427c:	b002      	add	sp, #8
 800427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_PLLI2S_DISABLE();    
 8004282:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004284:	4d31      	ldr	r5, [pc, #196]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
    __HAL_RCC_PLLI2S_DISABLE();    
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800428a:	f7fd fb4f 	bl	800192c <HAL_GetTick>
 800428e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004290:	e004      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004292:	f7fd fb4b 	bl	800192c <HAL_GetTick>
 8004296:	1b80      	subs	r0, r0, r6
 8004298:	2802      	cmp	r0, #2
 800429a:	d8ee      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	011f      	lsls	r7, r3, #4
 80042a0:	d4f7      	bmi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	07d6      	lsls	r6, r2, #31
 80042a6:	d513      	bpl.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80042a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042b4:	fab3 f183 	clz	r1, r3
 80042b8:	fa90 f0a0 	rbit	r0, r0
 80042bc:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 80042c0:	fab0 f080 	clz	r0, r0
 80042c4:	fa06 f000 	lsl.w	r0, r6, r0
 80042c8:	408b      	lsls	r3, r1
 80042ca:	4303      	orrs	r3, r0
 80042cc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80042d0:	0790      	lsls	r0, r2, #30
 80042d2:	d51d      	bpl.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x314>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80042d4:	4d1d      	ldr	r5, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80042d6:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80042da:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80042de:	fa96 f6a6 	rbit	r6, r6
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80042e2:	68e3      	ldr	r3, [r4, #12]
 80042e4:	6860      	ldr	r0, [r4, #4]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80042e6:	fab6 f686 	clz	r6, r6
 80042ea:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80042ee:	061b      	lsls	r3, r3, #24
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80042f0:	40f1      	lsrs	r1, r6
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80042f2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80042f6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80042fa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042fe:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8004302:	6a23      	ldr	r3, [r4, #32]
 8004304:	f021 011f 	bic.w	r1, r1, #31
 8004308:	3b01      	subs	r3, #1
 800430a:	430b      	orrs	r3, r1
 800430c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004310:	0651      	lsls	r1, r2, #25
 8004312:	d509      	bpl.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004314:	1d20      	adds	r0, r4, #4
 8004316:	c80b      	ldmia	r0, {r0, r1, r3}
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800431c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004320:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004324:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800432a:	4d08      	ldr	r5, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x350>)
    __HAL_RCC_PLLI2S_ENABLE();
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004330:	f7fd fafc 	bl	800192c <HAL_GetTick>
 8004334:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x346>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004338:	f7fd faf8 	bl	800192c <HAL_GetTick>
 800433c:	1b80      	subs	r0, r0, r6
 800433e:	2802      	cmp	r0, #2
 8004340:	d89b      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	011a      	lsls	r2, r3, #4
 8004346:	d5f7      	bpl.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	e676      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800434c:	40023800 	.word	0x40023800
 8004350:	424711e0 	.word	0x424711e0
 8004354:	42470070 	.word	0x42470070
 8004358:	42470068 	.word	0x42470068
    __HAL_RCC_PWR_CLK_ENABLE();
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    PWR->CR |= PWR_CR_DBP;
 800435e:	4d2a      	ldr	r5, [pc, #168]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004360:	2200      	movs	r2, #0
 8004362:	9201      	str	r2, [sp, #4]
 8004364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800437e:	f7fd fad5 	bl	800192c <HAL_GetTick>
 8004382:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004384:	e005      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd fad1 	bl	800192c <HAL_GetTick>
 800438a:	1b80      	subs	r0, r0, r6
 800438c:	2802      	cmp	r0, #2
 800438e:	f63f af74 	bhi.w	800427a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	05d9      	lsls	r1, r3, #23
 8004396:	d5f6      	bpl.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004398:	491a      	ldr	r1, [pc, #104]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 800439a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800439c:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800439e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80043a2:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80043a6:	d011      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80043a8:	4282      	cmp	r2, r0
 80043aa:	d00f      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ac:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x410>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b4:	2501      	movs	r5, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b6:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b8:	6015      	str	r5, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ba:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 80043bc:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043be:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80043c0:	07da      	lsls	r2, r3, #31
 80043c2:	f53f af4b 	bmi.w	800425c <HAL_RCCEx_PeriphCLKConfig+0x260>
 80043c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043c8:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043cc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80043d0:	d00c      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80043d2:	490c      	ldr	r1, [pc, #48]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80043d4:	688a      	ldr	r2, [r1, #8]
 80043d6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80043da:	608a      	str	r2, [r1, #8]
 80043dc:	4a09      	ldr	r2, [pc, #36]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80043de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	e632      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043ec:	4805      	ldr	r0, [pc, #20]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80043ee:	6882      	ldr	r2, [r0, #8]
 80043f0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80043f4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80043f8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80043fc:	430a      	orrs	r2, r1
 80043fe:	6082      	str	r2, [r0, #8]
 8004400:	e7ec      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470e40 	.word	0x42470e40

08004410 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	6803      	ldr	r3, [r0, #0]
 8004414:	07dd      	lsls	r5, r3, #31
{
 8004416:	b083      	sub	sp, #12
 8004418:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	d52f      	bpl.n	800447c <HAL_RCC_OscConfig+0x6c>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800441c:	49a7      	ldr	r1, [pc, #668]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800441e:	688a      	ldr	r2, [r1, #8]
 8004420:	f002 020c 	and.w	r2, r2, #12
 8004424:	2a04      	cmp	r2, #4
 8004426:	f000 8095 	beq.w	8004554 <HAL_RCC_OscConfig+0x144>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442a:	688a      	ldr	r2, [r1, #8]
 800442c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004430:	2a08      	cmp	r2, #8
 8004432:	f000 808b 	beq.w	800454c <HAL_RCC_OscConfig+0x13c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004436:	6863      	ldr	r3, [r4, #4]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	f000 80fd 	beq.w	800463a <HAL_RCC_OscConfig+0x22a>
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004444:	f000 8120 	beq.w	8004688 <HAL_RCC_OscConfig+0x278>
 8004448:	4d9c      	ldr	r5, [pc, #624]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800444a:	682a      	ldr	r2, [r5, #0]
 800444c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004450:	602a      	str	r2, [r5, #0]
 8004452:	682a      	ldr	r2, [r5, #0]
 8004454:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004458:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 80f2 	bne.w	8004644 <HAL_RCC_OscConfig+0x234>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fa64 	bl	800192c <HAL_GetTick>
 8004464:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	e005      	b.n	8004474 <HAL_RCC_OscConfig+0x64>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd fa60 	bl	800192c <HAL_GetTick>
 800446c:	1b80      	subs	r0, r0, r6
 800446e:	2864      	cmp	r0, #100	; 0x64
 8004470:	f200 80f6 	bhi.w	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	039b      	lsls	r3, r3, #14
 8004478:	d4f6      	bmi.n	8004468 <HAL_RCC_OscConfig+0x58>
 800447a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447c:	079f      	lsls	r7, r3, #30
 800447e:	d52b      	bpl.n	80044d8 <HAL_RCC_OscConfig+0xc8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004480:	4a8e      	ldr	r2, [pc, #568]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 8004482:	6891      	ldr	r1, [r2, #8]
 8004484:	f011 0f0c 	tst.w	r1, #12
 8004488:	d06f      	beq.n	800456a <HAL_RCC_OscConfig+0x15a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	6891      	ldr	r1, [r2, #8]
 800448c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004490:	2908      	cmp	r1, #8
 8004492:	d067      	beq.n	8004564 <HAL_RCC_OscConfig+0x154>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004494:	68e3      	ldr	r3, [r4, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80e5 	beq.w	8004666 <HAL_RCC_OscConfig+0x256>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0x2b0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4d87      	ldr	r5, [pc, #540]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
        __HAL_RCC_HSI_ENABLE();
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044a4:	f7fd fa42 	bl	800192c <HAL_GetTick>
 80044a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	e005      	b.n	80044b8 <HAL_RCC_OscConfig+0xa8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ac:	f7fd fa3e 	bl	800192c <HAL_GetTick>
 80044b0:	1b80      	subs	r0, r0, r6
 80044b2:	2802      	cmp	r0, #2
 80044b4:	f200 80d4 	bhi.w	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	0798      	lsls	r0, r3, #30
 80044bc:	d5f6      	bpl.n	80044ac <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	6829      	ldr	r1, [r5, #0]
 80044c0:	22f8      	movs	r2, #248	; 0xf8
 80044c2:	fa92 f2a2 	rbit	r2, r2
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	fab2 f282 	clz	r2, r2
 80044cc:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80044d0:	4093      	lsls	r3, r2
 80044d2:	430b      	orrs	r3, r1
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	6823      	ldr	r3, [r4, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d8:	071a      	lsls	r2, r3, #28
 80044da:	d515      	bpl.n	8004508 <HAL_RCC_OscConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044dc:	6963      	ldr	r3, [r4, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 808a 	beq.w	80045f8 <HAL_RCC_OscConfig+0x1e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e4:	4b77      	ldr	r3, [pc, #476]	; (80046c4 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e6:	4d75      	ldr	r5, [pc, #468]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
      __HAL_RCC_LSI_ENABLE();
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80044ec:	f7fd fa1e 	bl	800192c <HAL_GetTick>
 80044f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	e005      	b.n	8004500 <HAL_RCC_OscConfig+0xf0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fd fa1a 	bl	800192c <HAL_GetTick>
 80044f8:	1b80      	subs	r0, r0, r6
 80044fa:	2802      	cmp	r0, #2
 80044fc:	f200 80b0 	bhi.w	8004660 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004500:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004502:	079f      	lsls	r7, r3, #30
 8004504:	d5f6      	bpl.n	80044f4 <HAL_RCC_OscConfig+0xe4>
 8004506:	6823      	ldr	r3, [r4, #0]
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004508:	0759      	lsls	r1, r3, #29
 800450a:	d438      	bmi.n	800457e <HAL_RCC_OscConfig+0x16e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450c:	69a2      	ldr	r2, [r4, #24]
 800450e:	b1d2      	cbz	r2, 8004546 <HAL_RCC_OscConfig+0x136>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004510:	4d6a      	ldr	r5, [pc, #424]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 8004512:	68a9      	ldr	r1, [r5, #8]
 8004514:	f001 010c 	and.w	r1, r1, #12
 8004518:	2908      	cmp	r1, #8
 800451a:	d02d      	beq.n	8004578 <HAL_RCC_OscConfig+0x168>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_RCC_OscConfig+0x2b8>)
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004526:	f000 80dc 	beq.w	80046e2 <HAL_RCC_OscConfig+0x2d2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fd f9ff 	bl	800192c <HAL_GetTick>
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004530:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e005      	b.n	8004540 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd f9fa 	bl	800192c <HAL_GetTick>
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	2802      	cmp	r0, #2
 800453c:	f200 8090 	bhi.w	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	019b      	lsls	r3, r3, #6
 8004544:	d4f6      	bmi.n	8004534 <HAL_RCC_OscConfig+0x124>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004546:	2000      	movs	r0, #0
}
 8004548:	b003      	add	sp, #12
 800454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454c:	684a      	ldr	r2, [r1, #4]
 800454e:	0250      	lsls	r0, r2, #9
 8004550:	f57f af71 	bpl.w	8004436 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	4a59      	ldr	r2, [pc, #356]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	0391      	lsls	r1, r2, #14
 800455a:	d58f      	bpl.n	800447c <HAL_RCC_OscConfig+0x6c>
 800455c:	6862      	ldr	r2, [r4, #4]
 800455e:	2a00      	cmp	r2, #0
 8004560:	d18c      	bne.n	800447c <HAL_RCC_OscConfig+0x6c>
 8004562:	e009      	b.n	8004578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004564:	6852      	ldr	r2, [r2, #4]
 8004566:	0256      	lsls	r6, r2, #9
 8004568:	d494      	bmi.n	8004494 <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	4a54      	ldr	r2, [pc, #336]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	0795      	lsls	r5, r2, #30
 8004570:	d552      	bpl.n	8004618 <HAL_RCC_OscConfig+0x208>
 8004572:	68e2      	ldr	r2, [r4, #12]
 8004574:	2a01      	cmp	r2, #1
 8004576:	d04f      	beq.n	8004618 <HAL_RCC_OscConfig+0x208>
        return HAL_ERROR;
 8004578:	2001      	movs	r0, #1
}
 800457a:	b003      	add	sp, #12
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
    PWR->CR |= PWR_CR_DBP;
 8004580:	4d52      	ldr	r5, [pc, #328]	; (80046cc <HAL_RCC_OscConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2200      	movs	r2, #0
 8004584:	9201      	str	r2, [sp, #4]
 8004586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80045a0:	f7fd f9c4 	bl	800192c <HAL_GetTick>
 80045a4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_OscConfig+0x1a2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045a8:	f7fd f9c0 	bl	800192c <HAL_GetTick>
 80045ac:	1b80      	subs	r0, r0, r6
 80045ae:	2802      	cmp	r0, #2
 80045b0:	d856      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	05da      	lsls	r2, r3, #23
 80045b6:	d5f7      	bpl.n	80045a8 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	68a3      	ldr	r3, [r4, #8]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	f000 80dd 	beq.w	800477a <HAL_RCC_OscConfig+0x36a>
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d06b      	beq.n	800469c <HAL_RCC_OscConfig+0x28c>
 80045c4:	4d3d      	ldr	r5, [pc, #244]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	672a      	str	r2, [r5, #112]	; 0x70
 80045ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80045d0:	f022 0204 	bic.w	r2, r2, #4
 80045d4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d169      	bne.n	80046ae <HAL_RCC_OscConfig+0x29e>
      tickstart = HAL_GetTick();
 80045da:	f7fd f9a7 	bl	800192c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80045e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e004      	b.n	80045f0 <HAL_RCC_OscConfig+0x1e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd f9a1 	bl	800192c <HAL_GetTick>
 80045ea:	1bc0      	subs	r0, r0, r7
 80045ec:	42b0      	cmp	r0, r6
 80045ee:	d837      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045f2:	0798      	lsls	r0, r3, #30
 80045f4:	d4f7      	bmi.n	80045e6 <HAL_RCC_OscConfig+0x1d6>
 80045f6:	e789      	b.n	800450c <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_LSI_DISABLE();
 80045f8:	4a32      	ldr	r2, [pc, #200]	; (80046c4 <HAL_RCC_OscConfig+0x2b4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fa:	4d30      	ldr	r5, [pc, #192]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
      __HAL_RCC_LSI_DISABLE();
 80045fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80045fe:	f7fd f995 	bl	800192c <HAL_GetTick>
 8004602:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004604:	e004      	b.n	8004610 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004606:	f7fd f991 	bl	800192c <HAL_GetTick>
 800460a:	1b80      	subs	r0, r0, r6
 800460c:	2802      	cmp	r0, #2
 800460e:	d827      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004612:	0798      	lsls	r0, r3, #30
 8004614:	d4f7      	bmi.n	8004606 <HAL_RCC_OscConfig+0x1f6>
 8004616:	e776      	b.n	8004506 <HAL_RCC_OscConfig+0xf6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4d28      	ldr	r5, [pc, #160]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800461a:	21f8      	movs	r1, #248	; 0xf8
 800461c:	6828      	ldr	r0, [r5, #0]
 800461e:	fa91 f1a1 	rbit	r1, r1
 8004622:	6922      	ldr	r2, [r4, #16]
 8004624:	fab1 f181 	clz	r1, r1
 8004628:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800462c:	408a      	lsls	r2, r1
 800462e:	4302      	orrs	r2, r0
 8004630:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004632:	071a      	lsls	r2, r3, #28
 8004634:	f57f af68 	bpl.w	8004508 <HAL_RCC_OscConfig+0xf8>
 8004638:	e750      	b.n	80044dc <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463a:	4a20      	ldr	r2, [pc, #128]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004642:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004644:	f7fd f972 	bl	800192c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004648:	4d1c      	ldr	r5, [pc, #112]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
        tickstart = HAL_GetTick();
 800464a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464c:	e004      	b.n	8004658 <HAL_RCC_OscConfig+0x248>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464e:	f7fd f96d 	bl	800192c <HAL_GetTick>
 8004652:	1b80      	subs	r0, r0, r6
 8004654:	2864      	cmp	r0, #100	; 0x64
 8004656:	d803      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	039a      	lsls	r2, r3, #14
 800465c:	d5f7      	bpl.n	800464e <HAL_RCC_OscConfig+0x23e>
 800465e:	e70c      	b.n	800447a <HAL_RCC_OscConfig+0x6a>
            return HAL_TIMEOUT;
 8004660:	2003      	movs	r0, #3
}
 8004662:	b003      	add	sp, #12
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_DISABLE();
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <HAL_RCC_OscConfig+0x2b0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004668:	4d14      	ldr	r5, [pc, #80]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
        __HAL_RCC_HSI_DISABLE();
 800466a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800466c:	f7fd f95e 	bl	800192c <HAL_GetTick>
 8004670:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	e004      	b.n	800467e <HAL_RCC_OscConfig+0x26e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004674:	f7fd f95a 	bl	800192c <HAL_GetTick>
 8004678:	1b80      	subs	r0, r0, r6
 800467a:	2802      	cmp	r0, #2
 800467c:	d8f0      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	0799      	lsls	r1, r3, #30
 8004682:	d4f7      	bmi.n	8004674 <HAL_RCC_OscConfig+0x264>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	e727      	b.n	80044d8 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e7d3      	b.n	8004644 <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
 800469e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a0:	f042 0204 	orr.w	r2, r2, #4
 80046a4:	671a      	str	r2, [r3, #112]	; 0x70
 80046a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80046ae:	f7fd f93d 	bl	800192c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	4d02      	ldr	r5, [pc, #8]	; (80046bc <HAL_RCC_OscConfig+0x2ac>)
      tickstart = HAL_GetTick();
 80046b4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	e00e      	b.n	80046da <HAL_RCC_OscConfig+0x2ca>
 80046bc:	40023800 	.word	0x40023800
 80046c0:	42470000 	.word	0x42470000
 80046c4:	42470e80 	.word	0x42470e80
 80046c8:	42470060 	.word	0x42470060
 80046cc:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fd f92c 	bl	800192c <HAL_GetTick>
 80046d4:	1bc0      	subs	r0, r0, r7
 80046d6:	42b0      	cmp	r0, r6
 80046d8:	d8c2      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046dc:	079b      	lsls	r3, r3, #30
 80046de:	d5f7      	bpl.n	80046d0 <HAL_RCC_OscConfig+0x2c0>
 80046e0:	e714      	b.n	800450c <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80046e2:	f7fd f923 	bl	800192c <HAL_GetTick>
 80046e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e8:	e004      	b.n	80046f4 <HAL_RCC_OscConfig+0x2e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fd f91f 	bl	800192c <HAL_GetTick>
 80046ee:	1b80      	subs	r0, r0, r6
 80046f0:	2802      	cmp	r0, #2
 80046f2:	d8b5      	bhi.n	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	0199      	lsls	r1, r3, #6
 80046f8:	d4f7      	bmi.n	80046ea <HAL_RCC_OscConfig+0x2da>
 80046fa:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 80046fe:	fa9e feae 	rbit	lr, lr
 8004702:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004706:	fabe fe8e 	clz	lr, lr
 800470a:	fa92 f2a2 	rbit	r2, r2
 800470e:	f04f 6770 	mov.w	r7, #251658240	; 0xf000000
 8004712:	fab2 fc82 	clz	ip, r2
 8004716:	fa97 f7a7 	rbit	r7, r7
 800471a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800471e:	fab7 f787 	clz	r7, r7
 8004722:	fa91 f1a1 	rbit	r1, r1
 8004726:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800472a:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	4333      	orrs	r3, r6
 8004732:	e9d4 640b 	ldrd	r6, r4, [r4, #44]	; 0x2c
 8004736:	fa00 f00e 	lsl.w	r0, r0, lr
 800473a:	3a01      	subs	r2, #1
 800473c:	fa02 f20c 	lsl.w	r2, r2, ip
 8004740:	4303      	orrs	r3, r0
 8004742:	4313      	orrs	r3, r2
 8004744:	fab1 f181 	clz	r1, r1
 8004748:	fa06 f707 	lsl.w	r7, r6, r7
 800474c:	fa04 f101 	lsl.w	r1, r4, r1
        __HAL_RCC_PLL_ENABLE();
 8004750:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <HAL_RCC_OscConfig+0x378>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	4c0e      	ldr	r4, [pc, #56]	; (800478c <HAL_RCC_OscConfig+0x37c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004754:	433b      	orrs	r3, r7
 8004756:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8004758:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800475c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800475e:	f7fd f8e5 	bl	800192c <HAL_GetTick>
 8004762:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	e005      	b.n	8004772 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fd f8e1 	bl	800192c <HAL_GetTick>
 800476a:	1b40      	subs	r0, r0, r5
 800476c:	2802      	cmp	r0, #2
 800476e:	f63f af77 	bhi.w	8004660 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	019a      	lsls	r2, r3, #6
 8004776:	d5f6      	bpl.n	8004766 <HAL_RCC_OscConfig+0x356>
 8004778:	e6e5      	b.n	8004546 <HAL_RCC_OscConfig+0x136>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477a:	4a04      	ldr	r2, [pc, #16]	; (800478c <HAL_RCC_OscConfig+0x37c>)
 800477c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	; 0x70
 8004784:	e793      	b.n	80046ae <HAL_RCC_OscConfig+0x29e>
 8004786:	bf00      	nop
 8004788:	42470060 	.word	0x42470060
 800478c:	40023800 	.word	0x40023800

08004790 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004794:	b089      	sub	sp, #36	; 0x24
 8004796:	4605      	mov	r5, r0
 8004798:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800479a:	f7fd f8c7 	bl	800192c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800479e:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80047a0:	4606      	mov	r6, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80047a2:	2108      	movs	r1, #8
 80047a4:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80047aa:	f000 fca7 	bl	80050fc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80047ae:	4604      	mov	r4, r0
 80047b0:	b118      	cbz	r0, 80047ba <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 80047b2:	4620      	mov	r0, r4
 80047b4:	b009      	add	sp, #36	; 0x24
 80047b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80047ba:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80047bc:	6828      	ldr	r0, [r5, #0]
 80047be:	0409      	lsls	r1, r1, #16
 80047c0:	f000 fd6c 	bl	800529c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 80047c4:	4604      	mov	r4, r0
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d1f3      	bne.n	80047b2 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 8U;
 80047ce:	2308      	movs	r3, #8
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80047d0:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80047d2:	9006      	str	r0, [sp, #24]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80047d4:	9202      	str	r2, [sp, #8]
  config.DataLength    = 8U;
 80047d6:	9303      	str	r3, [sp, #12]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80047d8:	2202      	movs	r2, #2
  config.DPSM          = SDIO_DPSM_ENABLE;
 80047da:	2301      	movs	r3, #1
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80047dc:	9104      	str	r1, [sp, #16]
  SDIO_ConfigData(hsd->Instance, &config);
 80047de:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80047e0:	9205      	str	r2, [sp, #20]
  SDIO_ConfigData(hsd->Instance, &config);
 80047e2:	a902      	add	r1, sp, #8
  config.DPSM          = SDIO_DPSM_ENABLE;
 80047e4:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 80047e6:	f000 fc75 	bl	80050d4 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80047ea:	6828      	ldr	r0, [r5, #0]
 80047ec:	f000 fe02 	bl	80053f4 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 80047f0:	4604      	mov	r4, r0
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d1dd      	bne.n	80047b2 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 80047f6:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80047f8:	f240 482a 	movw	r8, #1066	; 0x42a
 80047fc:	6828      	ldr	r0, [r5, #0]
 80047fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004800:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004804:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004806:	d118      	bne.n	800483a <SD_FindSCR+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004808:	029b      	lsls	r3, r3, #10
 800480a:	d407      	bmi.n	800481c <SD_FindSCR+0x8c>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800480c:	f7fd f88e 	bl	800192c <HAL_GetTick>
 8004810:	1b80      	subs	r0, r0, r6
 8004812:	3001      	adds	r0, #1
 8004814:	d1f2      	bne.n	80047fc <SD_FindSCR+0x6c>
      return HAL_SD_ERROR_TIMEOUT;
 8004816:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800481a:	e7ca      	b.n	80047b2 <SD_FindSCR+0x22>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800481c:	f000 fc44 	bl	80050a8 <SDIO_ReadFIFO>
 8004820:	ab08      	add	r3, sp, #32
 8004822:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8004826:	f109 0901 	add.w	r9, r9, #1
 800482a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800482e:	f7fd f87d 	bl	800192c <HAL_GetTick>
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	3001      	adds	r0, #1
 8004836:	d1e1      	bne.n	80047fc <SD_FindSCR+0x6c>
 8004838:	e7ed      	b.n	8004816 <SD_FindSCR+0x86>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800483a:	0719      	lsls	r1, r3, #28
 800483c:	d40f      	bmi.n	800485e <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800483e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004840:	079a      	lsls	r2, r3, #30
 8004842:	d40f      	bmi.n	8004864 <SD_FindSCR+0xd4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004844:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	d40f      	bmi.n	800486a <SD_FindSCR+0xda>
 800484a:	e9dd 2300 	ldrd	r2, r3, [sp]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800484e:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8004852:	ba12      	rev	r2, r2
 8004854:	ba1b      	rev	r3, r3
 8004856:	6381      	str	r1, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004858:	e9c7 3200 	strd	r3, r2, [r7]
  return HAL_SD_ERROR_NONE;
 800485c:	e7a9      	b.n	80047b2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800485e:	2408      	movs	r4, #8
 8004860:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004862:	e7a6      	b.n	80047b2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004864:	2402      	movs	r4, #2
 8004866:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004868:	e7a3      	b.n	80047b2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800486a:	2420      	movs	r4, #32
 800486c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800486e:	e7a0      	b.n	80047b2 <SD_FindSCR+0x22>

08004870 <HAL_SD_MspInit>:
}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop

08004874 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8004874:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8004876:	b4f0      	push	{r4, r5, r6, r7}
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8004878:	f3c3 6283 	ubfx	r2, r3, #26, #4
{
 800487c:	4604      	mov	r4, r0
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800487e:	0f98      	lsrs	r0, r3, #30
 8004880:	7008      	strb	r0, [r1, #0]
  pCSD->Reserved1      = tmp & 0x03U;
 8004882:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8004886:	704a      	strb	r2, [r1, #1]
  pCSD->TAAC = (uint8_t)tmp;
 8004888:	f3c3 4007 	ubfx	r0, r3, #16, #8
  pCSD->NSAC = (uint8_t)tmp;
 800488c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004890:	b2db      	uxtb	r3, r3
  pCSD->Reserved1      = tmp & 0x03U;
 8004892:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004894:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004896:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004898:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800489a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800489c:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800489e:	0112      	lsls	r2, r2, #4
 80048a0:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80048a2:	88cd      	ldrh	r5, [r1, #6]
 80048a4:	f3c3 5003 	ubfx	r0, r3, #20, #4
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80048a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80048ac:	4328      	orrs	r0, r5
 80048ae:	80c8      	strh	r0, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80048b0:	f3c3 4503 	ubfx	r5, r3, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80048b4:	09d0      	lsrs	r0, r2, #7
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80048b6:	720d      	strb	r5, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80048b8:	7248      	strb	r0, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80048ba:	f3c2 1580 	ubfx	r5, r2, #6, #1
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80048be:	f3c2 1040 	ubfx	r0, r2, #5, #1
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80048c2:	728d      	strb	r5, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80048c4:	72c8      	strb	r0, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80048c6:	f3c2 1500 	ubfx	r5, r2, #4, #1
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80048ca:	2000      	movs	r0, #0
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80048cc:	730d      	strb	r5, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80048ce:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80048d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f040 8084 	bne.w	80049e0 <HAL_SD_GetCardCSD+0x16c>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80048d8:	0292      	lsls	r2, r2, #10
 80048da:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80048de:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 80048e0:	6908      	ldr	r0, [r1, #16]
 80048e2:	009a      	lsls	r2, r3, #2
 80048e4:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 80048e8:	4302      	orrs	r2, r0
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80048ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2U;
 80048ec:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80048ee:	6908      	ldr	r0, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80048f0:	0bda      	lsrs	r2, r3, #15
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80048f2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 80048f6:	6108      	str	r0, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80048f8:	f002 0206 	and.w	r2, r2, #6
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80048fc:	f3c3 5542 	ubfx	r5, r3, #21, #3
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004900:	f3c3 4082 	ubfx	r0, r3, #18, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8004904:	f3c3 67c2 	ubfx	r7, r3, #27, #3
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8004908:	f3c3 6602 	ubfx	r6, r3, #24, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800490c:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800490e:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8004910:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004912:	75c8      	strb	r0, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8004914:	760a      	strb	r2, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8004916:	7e0a      	ldrb	r2, [r1, #24]
 8004918:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 800491c:	4302      	orrs	r2, r0
 800491e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004920:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8004922:	7e08      	ldrb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004924:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8004926:	3002      	adds	r0, #2
 8004928:	4082      	lsls	r2, r0
 800492a:	6562      	str	r2, [r4, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800492c:	7a0d      	ldrb	r5, [r1, #8]
 800492e:	2001      	movs	r0, #1
 8004930:	40a8      	lsls	r0, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8004932:	0a45      	lsrs	r5, r0, #9
 8004934:	fb02 f205 	mul.w	r2, r2, r5
    hsd->SdCard.LogBlockSize = 512U;
 8004938:	f44f 7500 	mov.w	r5, #512	; 0x200
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800493c:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
    hsd->SdCard.LogBlockSize = 512U;
 8004940:	6625      	str	r5, [r4, #96]	; 0x60
 8004942:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8004946:	0050      	lsls	r0, r2, #1
 8004948:	f000 007e 	and.w	r0, r0, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800494c:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8004950:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8004952:	7688      	strb	r0, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8004954:	7e8a      	ldrb	r2, [r1, #26]
 8004956:	f3c3 10c0 	ubfx	r0, r3, #7, #1
 800495a:	4302      	orrs	r2, r0
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800495c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8004960:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8004962:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8004964:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004966:	0d9a      	lsrs	r2, r3, #22
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004968:	0fdd      	lsrs	r5, r3, #31
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800496a:	f3c3 7441 	ubfx	r4, r3, #29, #2
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800496e:	f3c3 6082 	ubfx	r0, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004972:	f002 020c 	and.w	r2, r2, #12
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004976:	770d      	strb	r5, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8004978:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800497a:	7788      	strb	r0, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800497c:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800497e:	7fca      	ldrb	r2, [r1, #31]
 8004980:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8004984:	4302      	orrs	r2, r0
 8004986:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004988:	f3c3 5540 	ubfx	r5, r3, #21, #1
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800498c:	f3c3 4400 	ubfx	r4, r3, #16, #1
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8004990:	f3c3 32c0 	ubfx	r2, r3, #15, #1
  pCSD->Reserved3           = 0U;
 8004994:	2000      	movs	r0, #0
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004996:	f881 5020 	strb.w	r5, [r1, #32]
  pCSD->Reserved3           = 0U;
 800499a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800499e:	f3c3 3580 	ubfx	r5, r3, #14, #1
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80049a2:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80049a6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80049aa:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80049ae:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80049b2:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80049b6:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80049ba:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80049be:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC              = (tmp & 0x03U);
 80049c2:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->Reserved4 = 1U;
 80049c6:	2201      	movs	r2, #1
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80049c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80049cc:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80049d0:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80049d4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
}
 80049d8:	bcf0      	pop	{r4, r5, r6, r7}
  pCSD->Reserved4 = 1U;
 80049da:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 80049de:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80049e0:	2801      	cmp	r0, #1
 80049e2:	d00d      	beq.n	8004a00 <HAL_SD_GetCardCSD+0x18c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049ee:	2201      	movs	r2, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80049f6:	4610      	mov	r0, r2
    hsd->State = HAL_SD_STATE_READY;
 80049f8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 80049fc:	bcf0      	pop	{r4, r5, r6, r7}
 80049fe:	4770      	bx	lr
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004a06:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004a08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8004a0a:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004a0c:	0e18      	lsrs	r0, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8004a0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004a12:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8004a14:	6908      	ldr	r0, [r1, #16]
 8004a16:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004a1a:	4302      	orrs	r2, r0
 8004a1c:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8004a1e:	690a      	ldr	r2, [r1, #16]
 8004a20:	3201      	adds	r2, #1
 8004a22:	0292      	lsls	r2, r2, #10
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004a24:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8004a28:	6562      	str	r2, [r4, #84]	; 0x54
 8004a2a:	65e2      	str	r2, [r4, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004a2c:	65a0      	str	r0, [r4, #88]	; 0x58
 8004a2e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004a32:	6620      	str	r0, [r4, #96]	; 0x60
 8004a34:	e787      	b.n	8004946 <HAL_SD_GetCardCSD+0xd2>
 8004a36:	bf00      	nop

08004a38 <HAL_SD_InitCard>:
{
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004a3a:	2500      	movs	r5, #0
{
 8004a3c:	b099      	sub	sp, #100	; 0x64
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a3e:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004a42:	2376      	movs	r3, #118	; 0x76
 8004a44:	930c      	str	r3, [sp, #48]	; 0x30
  SDIO_Init(hsd->Instance, Init);
 8004a46:	ab0a      	add	r3, sp, #40	; 0x28
{
 8004a48:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8004a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a4e:	6827      	ldr	r7, [r4, #0]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a50:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8004a52:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004a56:	e9cd 5507 	strd	r5, r5, [sp, #28]
  __HAL_SD_DISABLE(hsd); 
 8004a5a:	4e74      	ldr	r6, [pc, #464]	; (8004c2c <HAL_SD_InitCard+0x1f4>)
  SDIO_Init(hsd->Instance, Init);
 8004a5c:	ab07      	add	r3, sp, #28
 8004a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a60:	4638      	mov	r0, r7
 8004a62:	f000 fb05 	bl	8005070 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8004a66:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8004a68:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	f000 fb20 	bl	80050b0 <SDIO_PowerState_ON>
  HAL_Delay(2U);
 8004a70:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8004a72:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8004a74:	f7fc ff60 	bl	8001938 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a78:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8004a7a:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a7c:	f000 fbb0 	bl	80051e0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a80:	4605      	mov	r5, r0
 8004a82:	b138      	cbz	r0, 8004a94 <HAL_SD_InitCard+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 8004a84:	2001      	movs	r0, #1
 8004a86:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a8c:	431d      	orrs	r5, r3
 8004a8e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004a90:	b019      	add	sp, #100	; 0x64
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	f000 fbcb 	bl	8005230 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d04c      	beq.n	8004b38 <HAL_SD_InitCard+0x100>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a9e:	64a5      	str	r5, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004aa0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004aa4:	9b06      	ldr	r3, [sp, #24]
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	42ab      	cmp	r3, r5
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004aaa:	f04f 0100 	mov.w	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004aae:	9206      	str	r2, [sp, #24]
 8004ab0:	f000 80b4 	beq.w	8004c1c <HAL_SD_InitCard+0x1e4>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004ab4:	6820      	ldr	r0, [r4, #0]
 8004ab6:	f000 fbf1 	bl	800529c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004aba:	4601      	mov	r1, r0
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f040 80b0 	bne.w	8004c22 <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	f000 fc24 	bl	8005310 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ac8:	4601      	mov	r1, r0
 8004aca:	2800      	cmp	r0, #0
 8004acc:	f040 80a9 	bne.w	8004c22 <HAL_SD_InitCard+0x1ea>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ad0:	6820      	ldr	r0, [r4, #0]
 8004ad2:	f000 faf5 	bl	80050c0 <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	dae4      	bge.n	8004aa4 <HAL_SD_InitCard+0x6c>
    hsd->SdCard.CardType = CARD_SDSC;
 8004ada:	2300      	movs	r3, #0
 8004adc:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8004ade:	2301      	movs	r3, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8004ae0:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8004ae2:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8004ae6:	f000 fae7 	bl	80050b8 <SDIO_GetPowerState>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f000 8093 	beq.w	8004c16 <HAL_SD_InitCard+0x1de>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004af0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	2a03      	cmp	r2, #3
 8004af6:	d141      	bne.n	8004b7c <HAL_SD_InitCard+0x144>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004af8:	4618      	mov	r0, r3
 8004afa:	2104      	movs	r1, #4
 8004afc:	f000 fae0 	bl	80050c0 <SDIO_GetResponse>
 8004b00:	0d00      	lsrs	r0, r0, #20
 8004b02:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004b04:	a90d      	add	r1, sp, #52	; 0x34
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7ff feb4 	bl	8004874 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004b0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	0412      	lsls	r2, r2, #16
 8004b12:	2300      	movs	r3, #0
 8004b14:	f000 fb2a 	bl	800516c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b18:	4605      	mov	r5, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1b2      	bne.n	8004a84 <HAL_SD_InitCard+0x4c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8004b1e:	1d23      	adds	r3, r4, #4
 8004b20:	f854 6b10 	ldr.w	r6, [r4], #16
 8004b24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b30:	f000 fa9e 	bl	8005070 <SDIO_Init>
  return HAL_OK;
 8004b34:	4628      	mov	r0, r5
 8004b36:	e7ab      	b.n	8004a90 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b38:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004b3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004b3e:	9b06      	ldr	r3, [sp, #24]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	42b3      	cmp	r3, r6
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004b44:	f04f 0100 	mov.w	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004b48:	9206      	str	r2, [sp, #24]
 8004b4a:	d067      	beq.n	8004c1c <HAL_SD_InitCard+0x1e4>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	f000 fba5 	bl	800529c <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004b52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b56:	4605      	mov	r5, r0
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d193      	bne.n	8004a84 <HAL_SD_InitCard+0x4c>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	f000 fbd7 	bl	8005310 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b62:	4605      	mov	r5, r0
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b64:	4601      	mov	r1, r0
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d18c      	bne.n	8004a84 <HAL_SD_InitCard+0x4c>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	f000 faa8 	bl	80050c0 <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b70:	0fc3      	lsrs	r3, r0, #31
 8004b72:	d0e4      	beq.n	8004b3e <HAL_SD_InitCard+0x106>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b74:	0042      	lsls	r2, r0, #1
 8004b76:	d5b0      	bpl.n	8004ada <HAL_SD_InitCard+0xa2>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b78:	6463      	str	r3, [r4, #68]	; 0x44
 8004b7a:	e7b0      	b.n	8004ade <HAL_SD_InitCard+0xa6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fc75 	bl	800546c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b82:	4605      	mov	r5, r0
 8004b84:	2800      	cmp	r0, #0
 8004b86:	f47f af7d 	bne.w	8004a84 <HAL_SD_InitCard+0x4c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	f000 fa97 	bl	80050c0 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b92:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b94:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	f000 fa92 	bl	80050c0 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004b9c:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b9e:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	f000 fa8d 	bl	80050c0 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ba6:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ba8:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	f000 fa88 	bl	80050c0 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004bb2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d036      	beq.n	8004c28 <HAL_SD_InitCard+0x1f0>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004bba:	f10d 0116 	add.w	r1, sp, #22
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	f000 fcc6 	bl	8005550 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f47f af5c 	bne.w	8004a84 <HAL_SD_InitCard+0x4c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004bcc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	2a03      	cmp	r2, #3
 8004bd2:	d091      	beq.n	8004af8 <HAL_SD_InitCard+0xc0>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004bd4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8004bd8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bda:	4618      	mov	r0, r3
 8004bdc:	0409      	lsls	r1, r1, #16
 8004bde:	f000 fc7b 	bl	80054d8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be2:	4605      	mov	r5, r0
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f47f af4d 	bne.w	8004a84 <HAL_SD_InitCard+0x4c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bea:	4601      	mov	r1, r0
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	f000 fa67 	bl	80050c0 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bf2:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bf4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bf6:	6820      	ldr	r0, [r4, #0]
 8004bf8:	f000 fa62 	bl	80050c0 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004bfc:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bfe:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c00:	6820      	ldr	r0, [r4, #0]
 8004c02:	f000 fa5d 	bl	80050c0 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c06:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c08:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	f000 fa58 	bl	80050c0 <SDIO_GetResponse>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	6720      	str	r0, [r4, #112]	; 0x70
 8004c14:	e770      	b.n	8004af8 <HAL_SD_InitCard+0xc0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c16:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004c1a:	e733      	b.n	8004a84 <HAL_SD_InitCard+0x4c>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004c1c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004c20:	e730      	b.n	8004a84 <HAL_SD_InitCard+0x4c>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c22:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004c26:	e72d      	b.n	8004a84 <HAL_SD_InitCard+0x4c>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	e765      	b.n	8004af8 <HAL_SD_InitCard+0xc0>
 8004c2c:	422580a0 	.word	0x422580a0

08004c30 <HAL_SD_Init>:
  if(hsd == NULL)
 8004c30:	b1c0      	cbz	r0, 8004c64 <HAL_SD_Init+0x34>
  if(hsd->State == HAL_SD_STATE_RESET)
 8004c32:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8004c36:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8004c38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	b16b      	cbz	r3, 8004c5c <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8004c40:	2303      	movs	r3, #3
 8004c42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff fef6 	bl	8004a38 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c4c:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8004c4e:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c50:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8004c52:	4618      	mov	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 8004c54:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004c56:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8004c5a:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8004c5c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8004c5e:	f7ff fe07 	bl	8004870 <HAL_SD_MspInit>
 8004c62:	e7ed      	b.n	8004c40 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8004c64:	2001      	movs	r0, #1
}
 8004c66:	4770      	bx	lr

08004c68 <HAL_SD_ConfigWideBusOperation>:
{
 8004c68:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004c6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  hsd->State = HAL_SD_STATE_BUSY;
 8004c6c:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004c6e:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 8004c70:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8004c74:	b08a      	sub	sp, #40	; 0x28
 8004c76:	4604      	mov	r4, r0
 8004c78:	6803      	ldr	r3, [r0, #0]
 8004c7a:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004c7c:	d029      	beq.n	8004cd2 <HAL_SD_ConfigWideBusOperation+0x6a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004c7e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004c82:	d026      	beq.n	8004cd2 <HAL_SD_ConfigWideBusOperation+0x6a>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004c84:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004c88:	d052      	beq.n	8004d30 <HAL_SD_ConfigWideBusOperation+0xc8>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	d031      	beq.n	8004cf2 <HAL_SD_ConfigWideBusOperation+0x8a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c8e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c90:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004c94:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004c96:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004c98:	bb15      	cbnz	r5, 8004ce0 <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004c9a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004c9e:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004ca2:	9209      	str	r2, [sp, #36]	; 0x24
    SDIO_Init(hsd->Instance, Init);
 8004ca4:	aa0a      	add	r2, sp, #40	; 0x28
 8004ca6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004caa:	6866      	ldr	r6, [r4, #4]
 8004cac:	9604      	str	r6, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004cae:	68a6      	ldr	r6, [r4, #8]
 8004cb0:	9605      	str	r6, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004cb2:	68e6      	ldr	r6, [r4, #12]
 8004cb4:	9606      	str	r6, [sp, #24]
    SDIO_Init(hsd->Instance, Init);
 8004cb6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004cba:	ae04      	add	r6, sp, #16
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004cc2:	f000 f9d5 	bl	8005070 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004cc6:	2301      	movs	r3, #1
  return HAL_OK;
 8004cc8:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8004cca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004cce:	b00a      	add	sp, #40	; 0x28
 8004cd0:	bd70      	pop	{r4, r5, r6, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cd8:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004cda:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004cdc:	2d00      	cmp	r5, #0
 8004cde:	d0dc      	beq.n	8004c9a <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8004ce0:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ce2:	f240 51ff 	movw	r1, #1535	; 0x5ff
    return HAL_ERROR;
 8004ce6:	4610      	mov	r0, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ce8:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004cea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8004cee:	b00a      	add	sp, #40	; 0x28
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cf2:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0U, 0U};
 8004cf4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cf8:	f000 f9e2 	bl	80050c0 <SDIO_GetResponse>
 8004cfc:	0181      	lsls	r1, r0, #6
 8004cfe:	d420      	bmi.n	8004d42 <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 8004d00:	a904      	add	r1, sp, #16
 8004d02:	4620      	mov	r0, r4
 8004d04:	f7ff fd44 	bl	8004790 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8004d08:	b968      	cbnz	r0, 8004d26 <HAL_SD_ConfigWideBusOperation+0xbe>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d0a:	9a05      	ldr	r2, [sp, #20]
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	03d2      	lsls	r2, r2, #15
 8004d10:	d531      	bpl.n	8004d76 <HAL_SD_ConfigWideBusOperation+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d12:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d14:	4618      	mov	r0, r3
 8004d16:	0409      	lsls	r1, r1, #16
 8004d18:	f000 fac0 	bl	800529c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8004d1c:	b918      	cbnz	r0, 8004d26 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004d1e:	4601      	mov	r1, r0
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	f000 fb2d 	bl	8005380 <SDMMC_CmdBusWidth>
 8004d26:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8004d28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d2a:	4310      	orrs	r0, r2
 8004d2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8004d2e:	e7d4      	b.n	8004cda <HAL_SD_ConfigWideBusOperation+0x72>
  uint32_t scr[2U] = {0U, 0U};
 8004d30:	2200      	movs	r2, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d32:	4618      	mov	r0, r3
 8004d34:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0U, 0U};
 8004d36:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d3a:	f000 f9c1 	bl	80050c0 <SDIO_GetResponse>
 8004d3e:	0185      	lsls	r5, r0, #6
 8004d40:	d503      	bpl.n	8004d4a <HAL_SD_ConfigWideBusOperation+0xe2>
 8004d42:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d48:	e7ee      	b.n	8004d28 <HAL_SD_ConfigWideBusOperation+0xc0>
  errorstate = SD_FindSCR(hsd, scr);
 8004d4a:	a904      	add	r1, sp, #16
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fd1f 	bl	8004790 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d1e7      	bne.n	8004d26 <HAL_SD_ConfigWideBusOperation+0xbe>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d56:	9a05      	ldr	r2, [sp, #20]
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	0350      	lsls	r0, r2, #13
 8004d5c:	d50b      	bpl.n	8004d76 <HAL_SD_ConfigWideBusOperation+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d60:	4618      	mov	r0, r3
 8004d62:	0409      	lsls	r1, r1, #16
 8004d64:	f000 fa9a 	bl	800529c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d1dc      	bne.n	8004d26 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	6820      	ldr	r0, [r4, #0]
 8004d70:	f000 fb06 	bl	8005380 <SDMMC_CmdBusWidth>
 8004d74:	e7d7      	b.n	8004d26 <HAL_SD_ConfigWideBusOperation+0xbe>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d76:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004d7a:	e7d5      	b.n	8004d28 <HAL_SD_ConfigWideBusOperation+0xc0>

08004d7c <HAL_SDRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop

08004d80 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8004d80:	b1e8      	cbz	r0, 8004dbe <HAL_SDRAM_Init+0x3e>
{   
 8004d82:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004d84:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d90:	b183      	cbz	r3, 8004db4 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004d98:	1d21      	adds	r1, r4, #4
 8004d9a:	6820      	ldr	r0, [r4, #0]
 8004d9c:	f000 f840 	bl	8004e20 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004da0:	4629      	mov	r1, r5
 8004da2:	e9d4 0200 	ldrd	r0, r2, [r4]
 8004da6:	f000 f87b 	bl	8004ea0 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8004db0:	2000      	movs	r0, #0
}
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004db4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004db8:	f7ff ffe0 	bl	8004d7c <HAL_SDRAM_MspInit>
 8004dbc:	e7e9      	b.n	8004d92 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8004dbe:	2001      	movs	r0, #1
}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop

08004dc4 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004dc4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004dc6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d010      	beq.n	8004df2 <HAL_SDRAM_SendCommand+0x2e>
 8004dd0:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	f000 f8a8 	bl	8004f30 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004de4:	bf0c      	ite	eq
 8004de6:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004de8:	2301      	movne	r3, #1
 8004dea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004dee:	2000      	movs	r0, #0
}
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8004df2:	4618      	mov	r0, r3
}
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop

08004df8 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004df8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d00c      	beq.n	8004e1c <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8004e02:	b510      	push	{r4, lr}
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e04:	2302      	movs	r3, #2
 8004e06:	4604      	mov	r4, r0
 8004e08:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004e0c:	6800      	ldr	r0, [r0, #0]
 8004e0e:	f000 f8b9 	bl	8004f84 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004e18:	2000      	movs	r0, #0
}
 8004e1a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004e1c:	4618      	mov	r0, r3
}
 8004e1e:	4770      	bx	lr

08004e20 <FMC_SDRAM_Init>:
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004e24:	f8d1 8000 	ldr.w	r8, [r1]
 8004e28:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8004e2a:	f1b8 0f01 	cmp.w	r8, #1
 8004e2e:	e9d1 2307 	ldrd	r2, r3, [r1, #28]
 8004e32:	e9d1 4e01 	ldrd	r4, lr, [r1, #4]
 8004e36:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8004e3a:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8004e3e:	d013      	beq.n	8004e68 <FMC_SDRAM_Init+0x48>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e40:	431a      	orrs	r2, r3
 8004e42:	433a      	orrs	r2, r7
 8004e44:	4322      	orrs	r2, r4
 8004e46:	ea42 030e 	orr.w	r3, r2, lr
 8004e4a:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004e4e:	6802      	ldr	r2, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e50:	4333      	orrs	r3, r6
 8004e52:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e54:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e58:	430b      	orrs	r3, r1
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e5a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e5e:	4313      	orrs	r3, r2
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004e60:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8004e62:	2000      	movs	r0, #0
 8004e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e68:	ea44 040e 	orr.w	r4, r4, lr
 8004e6c:	ea44 040c 	orr.w	r4, r4, ip
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004e70:	f8d0 c000 	ldr.w	ip, [r0]
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004e74:	f8d0 e004 	ldr.w	lr, [r0, #4]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e78:	4334      	orrs	r4, r6
 8004e7a:	432c      	orrs	r4, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e7c:	431a      	orrs	r2, r3
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e7e:	f42e 45ff 	bic.w	r5, lr, #32640	; 0x7f80
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e82:	433a      	orrs	r2, r7
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e84:	ea44 0301 	orr.w	r3, r4, r1
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004e88:	f42c 47f8 	bic.w	r7, ip, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e8c:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e90:	4317      	orrs	r7, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e92:	432b      	orrs	r3, r5
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004e94:	6007      	str	r7, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004e96:	6043      	str	r3, [r0, #4]
}
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9e:	bf00      	nop

08004ea0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
 8004ea8:	694b      	ldr	r3, [r1, #20]
 8004eaa:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004eae:	690c      	ldr	r4, [r1, #16]
 8004eb0:	698f      	ldr	r7, [r1, #24]
 8004eb2:	f8d1 c000 	ldr.w	ip, [r1]
 8004eb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8004eba:	1e79      	subs	r1, r7, #1
 8004ebc:	f103 3eff 	add.w	lr, r3, #4294967295
 8004ec0:	3e01      	subs	r6, #1
 8004ec2:	3d01      	subs	r5, #1
 8004ec4:	3c01      	subs	r4, #1
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004ec6:	2a01      	cmp	r2, #1
 8004ec8:	ea4f 3708 	mov.w	r7, r8, lsl #12
 8004ecc:	ea4f 530e 	mov.w	r3, lr, lsl #20
 8004ed0:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004ed4:	ea4f 2505 	mov.w	r5, r5, lsl #8
 8004ed8:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8004edc:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8004ee0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ee4:	d00e      	beq.n	8004f04 <FMC_SDRAM_Timing_Init+0x64>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004ee6:	433b      	orrs	r3, r7
 8004ee8:	ea43 030c 	orr.w	r3, r3, ip
 8004eec:	4333      	orrs	r3, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004eee:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004ef0:	432b      	orrs	r3, r5
 8004ef2:	4323      	orrs	r3, r4
 8004ef4:	430b      	orrs	r3, r1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004ef6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004efa:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004efc:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8004efe:	2000      	movs	r0, #0
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004f04:	ea46 0205 	orr.w	r2, r6, r5
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004f08:	6885      	ldr	r5, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004f0a:	68c6      	ldr	r6, [r0, #12]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004f0c:	ea42 020c 	orr.w	r2, r2, ip
 8004f10:	4322      	orrs	r2, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004f12:	f425 0470 	bic.w	r4, r5, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004f16:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004f18:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004f1a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004f1e:	f006 4170 	and.w	r1, r6, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004f22:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004f24:	430a      	orrs	r2, r1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004f26:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004f28:	60c2      	str	r2, [r0, #12]
}
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f30 <FMC_SDRAM_SendCommand>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004f30:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004f32:	e9d1 3500 	ldrd	r3, r5, [r1]
{
 8004f36:	4604      	mov	r4, r0
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004f38:	e9d1 1002 	ldrd	r1, r0, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004f3c:	432b      	orrs	r3, r5
{
 8004f3e:	b082      	sub	sp, #8
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004f40:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004f44:	3901      	subs	r1, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004f46:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  __IO uint32_t tmpr = 0U;
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	9101      	str	r1, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004f4e:	9301      	str	r3, [sp, #4]
                    ((Command->ModeRegisterDefinition) << 9U)
                    );
    
  Device->SDCMR = tmpr;
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	6123      	str	r3, [r4, #16]
{
 8004f54:	4615      	mov	r5, r2

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f56:	f7fc fce9 	bl	800192c <HAL_GetTick>
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	1c6b      	adds	r3, r5, #1
 8004f5e:	d105      	bne.n	8004f6c <FMC_SDRAM_SendCommand+0x3c>

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004f60:	69a0      	ldr	r0, [r4, #24]
 8004f62:	f010 0020 	ands.w	r0, r0, #32
 8004f66:	d1fb      	bne.n	8004f60 <FMC_SDRAM_SendCommand+0x30>
      }
    }
  }

  return HAL_OK;
}
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004f6c:	69a0      	ldr	r0, [r4, #24]
 8004f6e:	f010 0020 	ands.w	r0, r0, #32
 8004f72:	d0f9      	beq.n	8004f68 <FMC_SDRAM_SendCommand+0x38>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f74:	b125      	cbz	r5, 8004f80 <FMC_SDRAM_SendCommand+0x50>
 8004f76:	f7fc fcd9 	bl	800192c <HAL_GetTick>
 8004f7a:	1b80      	subs	r0, r0, r6
 8004f7c:	42a8      	cmp	r0, r5
 8004f7e:	d9ed      	bls.n	8004f5c <FMC_SDRAM_SendCommand+0x2c>
        return HAL_TIMEOUT;
 8004f80:	2003      	movs	r0, #3
 8004f82:	e7f1      	b.n	8004f68 <FMC_SDRAM_SendCommand+0x38>

08004f84 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device: Pointer to SDRAM device instance  
  * @param  RefreshRate: The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004f84:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
  
  return HAL_OK;   
}
 8004f86:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1U);
 8004f88:	6953      	ldr	r3, [r2, #20]
 8004f8a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004f8e:	6151      	str	r1, [r2, #20]
}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop

08004f94 <SDMMC_GetCmdResp1.part.2>:
  * @brief  Checks for error conditions for R1 response.
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
 8004f94:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004f96:	f100 0314 	add.w	r3, r0, #20
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004f9a:	f240 51ff 	movw	r1, #1535	; 0x5ff
  __IO uint32_t tmp = 0U;
 8004f9e:	2200      	movs	r2, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004fa0:	6381      	str	r1, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0U;
 8004fa2:	9201      	str	r2, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004fa4:	9301      	str	r3, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8004fa6:	9b01      	ldr	r3, [sp, #4]
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fa8:	4830      	ldr	r0, [pc, #192]	; (800506c <SDMMC_GetCmdResp1.part.2+0xd8>)
  return (*(__IO uint32_t *) tmp);
 8004faa:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fac:	4018      	ands	r0, r3
 8004fae:	b340      	cbz	r0, 8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	db28      	blt.n	8005006 <SDMMC_GetCmdResp1.part.2+0x72>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004fb4:	0059      	lsls	r1, r3, #1
 8004fb6:	d42d      	bmi.n	8005014 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004fb8:	009a      	lsls	r2, r3, #2
 8004fba:	d42e      	bmi.n	800501a <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004fbc:	00d9      	lsls	r1, r3, #3
 8004fbe:	d426      	bmi.n	800500e <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	d42f      	bmi.n	8005024 <SDMMC_GetCmdResp1.part.2+0x90>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004fc4:	0159      	lsls	r1, r3, #5
 8004fc6:	d430      	bmi.n	800502a <SDMMC_GetCmdResp1.part.2+0x96>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004fc8:	01da      	lsls	r2, r3, #7
 8004fca:	d428      	bmi.n	800501e <SDMMC_GetCmdResp1.part.2+0x8a>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004fcc:	0219      	lsls	r1, r3, #8
 8004fce:	d42f      	bmi.n	8005030 <SDMMC_GetCmdResp1.part.2+0x9c>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004fd0:	025a      	lsls	r2, r3, #9
 8004fd2:	d430      	bmi.n	8005036 <SDMMC_GetCmdResp1.part.2+0xa2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004fd4:	0299      	lsls	r1, r3, #10
 8004fd6:	d431      	bmi.n	800503c <SDMMC_GetCmdResp1.part.2+0xa8>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004fd8:	02da      	lsls	r2, r3, #11
 8004fda:	d432      	bmi.n	8005042 <SDMMC_GetCmdResp1.part.2+0xae>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004fdc:	0359      	lsls	r1, r3, #13
 8004fde:	d433      	bmi.n	8005048 <SDMMC_GetCmdResp1.part.2+0xb4>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004fe0:	039a      	lsls	r2, r3, #14
 8004fe2:	d434      	bmi.n	800504e <SDMMC_GetCmdResp1.part.2+0xba>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004fe4:	03d9      	lsls	r1, r3, #15
 8004fe6:	d435      	bmi.n	8005054 <SDMMC_GetCmdResp1.part.2+0xc0>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004fe8:	041a      	lsls	r2, r3, #16
 8004fea:	d436      	bmi.n	800505a <SDMMC_GetCmdResp1.part.2+0xc6>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004fec:	0459      	lsls	r1, r3, #17
 8004fee:	d437      	bmi.n	8005060 <SDMMC_GetCmdResp1.part.2+0xcc>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ff0:	049a      	lsls	r2, r3, #18
 8004ff2:	d438      	bmi.n	8005066 <SDMMC_GetCmdResp1.part.2+0xd2>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004ff4:	f013 0f08 	tst.w	r3, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ff8:	bf14      	ite	ne
 8004ffa:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8004ffe:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  }
}
 8005002:	b002      	add	sp, #8
 8005004:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005006:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
}
 800500a:	b002      	add	sp, #8
 800500c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800500e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005012:	e7f6      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005014:	2040      	movs	r0, #64	; 0x40
}
 8005016:	b002      	add	sp, #8
 8005018:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800501a:	2080      	movs	r0, #128	; 0x80
 800501c:	e7f1      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800501e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005022:	e7ee      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005024:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005028:	e7eb      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800502a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800502e:	e7e8      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005030:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005034:	e7e5      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005036:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800503a:	e7e2      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800503c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005040:	e7df      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_CC_ERR;
 8005042:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005046:	e7dc      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005048:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800504c:	e7d9      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800504e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005052:	e7d6      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005054:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005058:	e7d3      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800505a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800505e:	e7d0      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005060:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005064:	e7cd      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
    return SDMMC_ERROR_ERASE_RESET;
 8005066:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800506a:	e7ca      	b.n	8005002 <SDMMC_GetCmdResp1.part.2+0x6e>
 800506c:	fdffe008 	.word	0xfdffe008

08005070 <SDIO_Init>:
{
 8005070:	b084      	sub	sp, #16
 8005072:	b430      	push	{r4, r5}
 8005074:	ac03      	add	r4, sp, #12
 8005076:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800507a:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 800507c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
             Init.BusWide             |\
 8005080:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
  tmpreg |= (Init.ClockEdge           |\
 8005084:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8005086:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8005088:	432b      	orrs	r3, r5
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800508a:	6842      	ldr	r2, [r0, #4]
             Init.HardwareFlowControl |\
 800508c:	9908      	ldr	r1, [sp, #32]
             Init.BusWide             |\
 800508e:	4323      	orrs	r3, r4
}
 8005090:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005092:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8005096:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005098:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800509c:	4313      	orrs	r3, r2
 800509e:	6043      	str	r3, [r0, #4]
}
 80050a0:	b004      	add	sp, #16
 80050a2:	2000      	movs	r0, #0
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80050a8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80050b0:	2303      	movs	r3, #3
 80050b2:	6003      	str	r3, [r0, #0]
}
 80050b4:	2000      	movs	r0, #0
 80050b6:	4770      	bx	lr

080050b8 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050b8:	6800      	ldr	r0, [r0, #0]
}
 80050ba:	f000 0003 	and.w	r0, r0, #3
 80050be:	4770      	bx	lr

080050c0 <SDIO_GetResponse>:
{
 80050c0:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80050c2:	3014      	adds	r0, #20
 80050c4:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80050ca:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
}  
 80050d0:	b002      	add	sp, #8
 80050d2:	4770      	bx	lr

080050d4 <SDIO_ConfigData>:
{
 80050d4:	b430      	push	{r4, r5}
  SDIOx->DLEN = Data->DataLength;
 80050d6:	e9d1 4200 	ldrd	r4, r2, [r1]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050da:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 80050de:	6244      	str	r4, [r0, #36]	; 0x24
                       Data->TransferDir   |\
 80050e0:	690c      	ldr	r4, [r1, #16]
  SDIOx->DLEN = Data->DataLength;
 80050e2:	6282      	str	r2, [r0, #40]	; 0x28
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80050e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 80050e6:	6949      	ldr	r1, [r1, #20]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050e8:	432b      	orrs	r3, r5
                       Data->TransferDir   |\
 80050ea:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80050ec:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferMode  |\
 80050f0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80050f2:	4313      	orrs	r3, r2
 80050f4:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80050f6:	bc30      	pop	{r4, r5}
 80050f8:	2000      	movs	r0, #0
 80050fa:	4770      	bx	lr

080050fc <SDMMC_CmdBlockLength>:
  SDIOx->ARG = Command->Argument;
 80050fc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050fe:	4b19      	ldr	r3, [pc, #100]	; (8005164 <SDMMC_CmdBlockLength+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005100:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005102:	4919      	ldr	r1, [pc, #100]	; (8005168 <SDMMC_CmdBlockLength+0x6c>)
 8005104:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005106:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800510a:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800510e:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005112:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005114:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005118:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800511c:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800511e:	fb03 f301 	mul.w	r3, r3, r1
 8005122:	e003      	b.n	800512c <SDMMC_CmdBlockLength+0x30>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005124:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005126:	f012 0f45 	tst.w	r2, #69	; 0x45
 800512a:	d105      	bne.n	8005138 <SDMMC_CmdBlockLength+0x3c>
    if (count-- == 0U)
 800512c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005130:	d2f8      	bcs.n	8005124 <SDMMC_CmdBlockLength+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8005132:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005136:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005138:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800513a:	075a      	lsls	r2, r3, #29
 800513c:	d40c      	bmi.n	8005158 <SDMMC_CmdBlockLength+0x5c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800513e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005140:	07db      	lsls	r3, r3, #31
 8005142:	d405      	bmi.n	8005150 <SDMMC_CmdBlockLength+0x54>
  return (uint8_t)(SDIOx->RESPCMD);
 8005144:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b10      	cmp	r3, #16
 800514a:	d009      	beq.n	8005160 <SDMMC_CmdBlockLength+0x64>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800514c:	2001      	movs	r0, #1
}
 800514e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005150:	2301      	movs	r3, #1
 8005152:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005154:	4618      	mov	r0, r3
 8005156:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005158:	2304      	movs	r3, #4
 800515a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800515c:	4618      	mov	r0, r3
 800515e:	4770      	bx	lr
 8005160:	f7ff bf18 	b.w	8004f94 <SDMMC_GetCmdResp1.part.2>
 8005164:	20000060 	.word	0x20000060
 8005168:	10624dd3 	.word	0x10624dd3

0800516c <SDMMC_CmdSelDesel>:
  SDIOx->ARG = Command->Argument;
 800516c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800516e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <SDMMC_CmdSelDesel+0x6c>)
 8005172:	491a      	ldr	r1, [pc, #104]	; (80051dc <SDMMC_CmdSelDesel+0x70>)
 8005174:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005176:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800517a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800517e:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005182:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005186:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005188:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800518c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005190:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005192:	fb03 f301 	mul.w	r3, r3, r1
 8005196:	e003      	b.n	80051a0 <SDMMC_CmdSelDesel+0x34>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005198:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800519a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800519e:	d105      	bne.n	80051ac <SDMMC_CmdSelDesel+0x40>
    if (count-- == 0U)
 80051a0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80051a4:	d2f8      	bcs.n	8005198 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80051a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051aa:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80051ae:	075a      	lsls	r2, r3, #29
 80051b0:	d40c      	bmi.n	80051cc <SDMMC_CmdSelDesel+0x60>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80051b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80051b4:	07db      	lsls	r3, r3, #31
 80051b6:	d405      	bmi.n	80051c4 <SDMMC_CmdSelDesel+0x58>
  return (uint8_t)(SDIOx->RESPCMD);
 80051b8:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b07      	cmp	r3, #7
 80051be:	d009      	beq.n	80051d4 <SDMMC_CmdSelDesel+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051c0:	2001      	movs	r0, #1
}
 80051c2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051c4:	2301      	movs	r3, #1
 80051c6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051c8:	4618      	mov	r0, r3
 80051ca:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051cc:	2304      	movs	r3, #4
 80051ce:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051d0:	4618      	mov	r0, r3
 80051d2:	4770      	bx	lr
 80051d4:	f7ff bede 	b.w	8004f94 <SDMMC_GetCmdResp1.part.2>
 80051d8:	20000060 	.word	0x20000060
 80051dc:	10624dd3 	.word	0x10624dd3

080051e0 <SDMMC_CmdGoIdleState>:
  SDIOx->ARG = Command->Argument;
 80051e0:	2300      	movs	r3, #0
 80051e2:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051e4:	4b10      	ldr	r3, [pc, #64]	; (8005228 <SDMMC_CmdGoIdleState+0x48>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051e6:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051e8:	4910      	ldr	r1, [pc, #64]	; (800522c <SDMMC_CmdGoIdleState+0x4c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051ec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051f0:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051f4:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051f8:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051fe:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005202:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005204:	fb03 f301 	mul.w	r3, r3, r1
 8005208:	e002      	b.n	8005210 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800520a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800520c:	0612      	lsls	r2, r2, #24
 800520e:	d405      	bmi.n	800521c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8005210:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005214:	d2f9      	bcs.n	800520a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005216:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800521a:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800521c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005220:	6383      	str	r3, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005222:	2000      	movs	r0, #0
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000060 	.word	0x20000060
 800522c:	10624dd3 	.word	0x10624dd3

08005230 <SDMMC_CmdOperCond>:
  SDIOx->ARG = Command->Argument;
 8005230:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005234:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005236:	4b17      	ldr	r3, [pc, #92]	; (8005294 <SDMMC_CmdOperCond+0x64>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005238:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800523a:	681b      	ldr	r3, [r3, #0]
{
 800523c:	4601      	mov	r1, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800523e:	4816      	ldr	r0, [pc, #88]	; (8005298 <SDMMC_CmdOperCond+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005240:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005244:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005248:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800524c:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800524e:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005252:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005256:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005258:	fb03 f300 	mul.w	r3, r3, r0
 800525c:	e003      	b.n	8005266 <SDMMC_CmdOperCond+0x36>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800525e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005260:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005264:	d105      	bne.n	8005272 <SDMMC_CmdOperCond+0x42>
    if (count-- == 0U)
 8005266:	f113 33ff 	adds.w	r3, r3, #4294967295
 800526a:	d2f8      	bcs.n	800525e <SDMMC_CmdOperCond+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800526c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005270:	4770      	bx	lr

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005272:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005274:	f010 0004 	ands.w	r0, r0, #4
 8005278:	d108      	bne.n	800528c <SDMMC_CmdOperCond+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800527a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800527c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005280:	d002      	beq.n	8005288 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005282:	2340      	movs	r3, #64	; 0x40
 8005284:	638b      	str	r3, [r1, #56]	; 0x38
 8005286:	4770      	bx	lr
  }
  
  return SDMMC_ERROR_NONE;
 8005288:	4618      	mov	r0, r3
}
 800528a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005290:	2004      	movs	r0, #4
 8005292:	4770      	bx	lr
 8005294:	20000060 	.word	0x20000060
 8005298:	10624dd3 	.word	0x10624dd3

0800529c <SDMMC_CmdAppCommand>:
  SDIOx->ARG = Command->Argument;
 800529c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800529e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <SDMMC_CmdAppCommand+0x6c>)
 80052a2:	491a      	ldr	r1, [pc, #104]	; (800530c <SDMMC_CmdAppCommand+0x70>)
 80052a4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052a6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80052aa:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052ae:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052b2:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052b6:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052b8:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052bc:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052c0:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052c2:	fb03 f301 	mul.w	r3, r3, r1
 80052c6:	e003      	b.n	80052d0 <SDMMC_CmdAppCommand+0x34>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80052c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80052ca:	f012 0f45 	tst.w	r2, #69	; 0x45
 80052ce:	d105      	bne.n	80052dc <SDMMC_CmdAppCommand+0x40>
    if (count-- == 0U)
 80052d0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80052d4:	d2f8      	bcs.n	80052c8 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80052d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80052da:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052de:	075a      	lsls	r2, r3, #29
 80052e0:	d40c      	bmi.n	80052fc <SDMMC_CmdAppCommand+0x60>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052e4:	07db      	lsls	r3, r3, #31
 80052e6:	d405      	bmi.n	80052f4 <SDMMC_CmdAppCommand+0x58>
  return (uint8_t)(SDIOx->RESPCMD);
 80052e8:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b37      	cmp	r3, #55	; 0x37
 80052ee:	d009      	beq.n	8005304 <SDMMC_CmdAppCommand+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052f0:	2001      	movs	r0, #1
}
 80052f2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052f4:	2301      	movs	r3, #1
 80052f6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052f8:	4618      	mov	r0, r3
 80052fa:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052fc:	2304      	movs	r3, #4
 80052fe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005300:	4618      	mov	r0, r3
 8005302:	4770      	bx	lr
 8005304:	f7ff be46 	b.w	8004f94 <SDMMC_GetCmdResp1.part.2>
 8005308:	20000060 	.word	0x20000060
 800530c:	10624dd3 	.word	0x10624dd3

08005310 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005310:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 8005318:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 800531a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800531c:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <SDMMC_CmdAppOperCommand+0x68>)
 8005320:	4916      	ldr	r1, [pc, #88]	; (800537c <SDMMC_CmdAppOperCommand+0x6c>)
 8005322:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005324:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005328:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800532c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005330:	f442 628d 	orr.w	r2, r2, #1128	; 0x468
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005334:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005336:	f042 0201 	orr.w	r2, r2, #1
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800533a:	f241 3388 	movw	r3, #5000	; 0x1388
{
 800533e:	4604      	mov	r4, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005340:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005342:	fb03 f301 	mul.w	r3, r3, r1
 8005346:	e003      	b.n	8005350 <SDMMC_CmdAppOperCommand+0x40>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005348:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800534a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800534e:	d107      	bne.n	8005360 <SDMMC_CmdAppOperCommand+0x50>
    if (count-- == 0U)
 8005350:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005354:	d2f8      	bcs.n	8005348 <SDMMC_CmdAppOperCommand+0x38>
      return SDMMC_ERROR_TIMEOUT;
 8005356:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535e:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005360:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005362:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005366:	bf15      	itete	ne
 8005368:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800536a:	f240 53ff 	movweq	r3, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800536e:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005370:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	20000060 	.word	0x20000060
 800537c:	10624dd3 	.word	0x10624dd3

08005380 <SDMMC_CmdBusWidth>:
  SDIOx->ARG = Command->Argument;
 8005380:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005382:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <SDMMC_CmdBusWidth+0x6c>)
 8005386:	491a      	ldr	r1, [pc, #104]	; (80053f0 <SDMMC_CmdBusWidth+0x70>)
 8005388:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800538a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800538e:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005392:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005396:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800539a:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800539c:	f042 0206 	orr.w	r2, r2, #6
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053a0:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053a4:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053a6:	fb03 f301 	mul.w	r3, r3, r1
 80053aa:	e003      	b.n	80053b4 <SDMMC_CmdBusWidth+0x34>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80053ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80053ae:	f012 0f45 	tst.w	r2, #69	; 0x45
 80053b2:	d105      	bne.n	80053c0 <SDMMC_CmdBusWidth+0x40>
    if (count-- == 0U)
 80053b4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80053b8:	d2f8      	bcs.n	80053ac <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80053ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80053be:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053c2:	075a      	lsls	r2, r3, #29
 80053c4:	d40c      	bmi.n	80053e0 <SDMMC_CmdBusWidth+0x60>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053c8:	07db      	lsls	r3, r3, #31
 80053ca:	d405      	bmi.n	80053d8 <SDMMC_CmdBusWidth+0x58>
  return (uint8_t)(SDIOx->RESPCMD);
 80053cc:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d009      	beq.n	80053e8 <SDMMC_CmdBusWidth+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053d4:	2001      	movs	r0, #1
}
 80053d6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053d8:	2301      	movs	r3, #1
 80053da:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053dc:	4618      	mov	r0, r3
 80053de:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053e0:	2304      	movs	r3, #4
 80053e2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053e4:	4618      	mov	r0, r3
 80053e6:	4770      	bx	lr
 80053e8:	f7ff bdd4 	b.w	8004f94 <SDMMC_GetCmdResp1.part.2>
 80053ec:	20000060 	.word	0x20000060
 80053f0:	10624dd3 	.word	0x10624dd3

080053f4 <SDMMC_CmdSendSCR>:
  SDIOx->ARG = Command->Argument;
 80053f4:	2300      	movs	r3, #0
 80053f6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053f8:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053fa:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <SDMMC_CmdSendSCR+0x70>)
 80053fc:	491a      	ldr	r1, [pc, #104]	; (8005468 <SDMMC_CmdSendSCR+0x74>)
 80053fe:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005400:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005404:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005408:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800540c:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005410:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005412:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005416:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800541a:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800541c:	fb03 f301 	mul.w	r3, r3, r1
 8005420:	e003      	b.n	800542a <SDMMC_CmdSendSCR+0x36>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005422:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005424:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005428:	d105      	bne.n	8005436 <SDMMC_CmdSendSCR+0x42>
    if (count-- == 0U)
 800542a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800542e:	d2f8      	bcs.n	8005422 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8005430:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005434:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005436:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005438:	075a      	lsls	r2, r3, #29
 800543a:	d40c      	bmi.n	8005456 <SDMMC_CmdSendSCR+0x62>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800543c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800543e:	07db      	lsls	r3, r3, #31
 8005440:	d405      	bmi.n	800544e <SDMMC_CmdSendSCR+0x5a>
  return (uint8_t)(SDIOx->RESPCMD);
 8005442:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b33      	cmp	r3, #51	; 0x33
 8005448:	d009      	beq.n	800545e <SDMMC_CmdSendSCR+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800544a:	2001      	movs	r0, #1
}
 800544c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800544e:	2301      	movs	r3, #1
 8005450:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005452:	4618      	mov	r0, r3
 8005454:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005456:	2304      	movs	r3, #4
 8005458:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800545a:	4618      	mov	r0, r3
 800545c:	4770      	bx	lr
 800545e:	f7ff bd99 	b.w	8004f94 <SDMMC_GetCmdResp1.part.2>
 8005462:	bf00      	nop
 8005464:	20000060 	.word	0x20000060
 8005468:	10624dd3 	.word	0x10624dd3

0800546c <SDMMC_CmdSendCID>:
  SDIOx->ARG = Command->Argument;
 800546c:	2300      	movs	r3, #0
 800546e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005470:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005472:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <SDMMC_CmdSendCID+0x64>)
{
 8005474:	4601      	mov	r1, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4816      	ldr	r0, [pc, #88]	; (80054d4 <SDMMC_CmdSendCID+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800547a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800547e:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005482:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005486:	f442 6298 	orr.w	r2, r2, #1216	; 0x4c0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800548a:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800548c:	f042 0202 	orr.w	r2, r2, #2
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005490:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005494:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005496:	fb03 f300 	mul.w	r3, r3, r0
 800549a:	e003      	b.n	80054a4 <SDMMC_CmdSendCID+0x38>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800549c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800549e:	f012 0f45 	tst.w	r2, #69	; 0x45
 80054a2:	d105      	bne.n	80054b0 <SDMMC_CmdSendCID+0x44>
    if (count-- == 0U)
 80054a4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80054a8:	d2f8      	bcs.n	800549c <SDMMC_CmdSendCID+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80054aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80054ae:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80054b2:	075b      	lsls	r3, r3, #29
 80054b4:	d409      	bmi.n	80054ca <SDMMC_CmdSendCID+0x5e>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054b6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80054b8:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054bc:	bf15      	itete	ne
 80054be:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80054c0:	f240 53ff 	movweq	r3, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054c4:	6388      	strne	r0, [r1, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80054c6:	638b      	streq	r3, [r1, #56]	; 0x38
 80054c8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054ca:	2004      	movs	r0, #4
 80054cc:	6388      	str	r0, [r1, #56]	; 0x38
 80054ce:	4770      	bx	lr
 80054d0:	20000060 	.word	0x20000060
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <SDMMC_CmdSendCSD>:
{
 80054d8:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 80054da:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054dc:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <SDMMC_CmdSendCSD+0x70>)
 80054e0:	491a      	ldr	r1, [pc, #104]	; (800554c <SDMMC_CmdSendCSD+0x74>)
 80054e2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054e4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80054e8:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ec:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054f0:	f442 6299 	orr.w	r2, r2, #1224	; 0x4c8
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054f4:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054f6:	f042 0201 	orr.w	r2, r2, #1
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054fa:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80054fe:	4604      	mov	r4, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005500:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005502:	fb03 f301 	mul.w	r3, r3, r1
 8005506:	e003      	b.n	8005510 <SDMMC_CmdSendCSD+0x38>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005508:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800550a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800550e:	d107      	bne.n	8005520 <SDMMC_CmdSendCSD+0x48>
    if (count-- == 0U)
 8005510:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005514:	d2f8      	bcs.n	8005508 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8005516:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800551a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551e:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005522:	075b      	lsls	r3, r3, #29
 8005524:	d40b      	bmi.n	800553e <SDMMC_CmdSendCSD+0x66>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005526:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005528:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800552c:	bf15      	itete	ne
 800552e:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005530:	f240 53ff 	movweq	r3, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005534:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005536:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 8005538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800553c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800553e:	2004      	movs	r0, #4
 8005540:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20000060 	.word	0x20000060
 800554c:	10624dd3 	.word	0x10624dd3

08005550 <SDMMC_CmdSetRelAdd>:
  SDIOx->ARG = Command->Argument;
 8005550:	2300      	movs	r3, #0
{
 8005552:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 8005554:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005556:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <SDMMC_CmdSetRelAdd+0xc0>)
 800555a:	4c2e      	ldr	r4, [pc, #184]	; (8005614 <SDMMC_CmdSetRelAdd+0xc4>)
 800555c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800555e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005562:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005566:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800556a:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800556e:	0a5c      	lsrs	r4, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005570:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005574:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8005578:	b083      	sub	sp, #12
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800557a:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800557c:	fb03 f304 	mul.w	r3, r3, r4
 8005580:	e003      	b.n	800558a <SDMMC_CmdSetRelAdd+0x3a>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005582:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005584:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005588:	d108      	bne.n	800559c <SDMMC_CmdSetRelAdd+0x4c>
    if (count-- == 0U)
 800558a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800558e:	d2f8      	bcs.n	8005582 <SDMMC_CmdSetRelAdd+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8005590:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005594:	b003      	add	sp, #12
 8005596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559a:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800559c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800559e:	075c      	lsls	r4, r3, #29
 80055a0:	d413      	bmi.n	80055ca <SDMMC_CmdSetRelAdd+0x7a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055a4:	f013 0301 	ands.w	r3, r3, #1
 80055a8:	d108      	bne.n	80055bc <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDIOx->RESPCMD);
 80055aa:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	2a03      	cmp	r2, #3
 80055b0:	d012      	beq.n	80055d8 <SDMMC_CmdSetRelAdd+0x88>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055b2:	2001      	movs	r0, #1
}
 80055b4:	b003      	add	sp, #12
 80055b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ba:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055bc:	2301      	movs	r3, #1
 80055be:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055c0:	4618      	mov	r0, r3
}
 80055c2:	b003      	add	sp, #12
 80055c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055ca:	2304      	movs	r3, #4
 80055cc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055ce:	4618      	mov	r0, r3
}
 80055d0:	b003      	add	sp, #12
 80055d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055d6:	4770      	bx	lr
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80055d8:	f100 0214 	add.w	r2, r0, #20
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80055dc:	f240 54ff 	movw	r4, #1535	; 0x5ff
 80055e0:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0U;
 80055e2:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80055e4:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80055ea:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80055ee:	d009      	beq.n	8005604 <SDMMC_CmdSetRelAdd+0xb4>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80055f0:	045a      	lsls	r2, r3, #17
 80055f2:	d40a      	bmi.n	800560a <SDMMC_CmdSetRelAdd+0xba>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80055f8:	bf14      	ite	ne
 80055fa:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80055fe:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005602:	e7c7      	b.n	8005594 <SDMMC_CmdSetRelAdd+0x44>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	800b      	strh	r3, [r1, #0]
 8005608:	e7c4      	b.n	8005594 <SDMMC_CmdSetRelAdd+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800560a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800560e:	e7c1      	b.n	8005594 <SDMMC_CmdSetRelAdd+0x44>
 8005610:	20000060 	.word	0x20000060
 8005614:	10624dd3 	.word	0x10624dd3

08005618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005618:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <MX_GPIO_Init+0x34>)
 800561c:	2100      	movs	r1, #0
 800561e:	9100      	str	r1, [sp, #0]
 8005620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
 8005628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800562a:	f002 0201 	and.w	r2, r2, #1
 800562e:	9200      	str	r2, [sp, #0]
 8005630:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005632:	9101      	str	r1, [sp, #4]
 8005634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	9b01      	ldr	r3, [sp, #4]

}
 8005646:	b002      	add	sp, #8
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800

08005650 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	2000      	movs	r0, #0
 8005656:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <SystemClock_Config+0xb4>)
 8005658:	9000      	str	r0, [sp, #0]
 800565a:	6c11      	ldr	r1, [r2, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800565c:	4b2a      	ldr	r3, [pc, #168]	; (8005708 <SystemClock_Config+0xb8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800565e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005662:	6411      	str	r1, [r2, #64]	; 0x40
 8005664:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005666:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800566a:	9200      	str	r2, [sp, #0]
 800566c:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800566e:	9001      	str	r0, [sp, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800567a:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800567c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005680:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005684:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005686:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 800568c:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLN = 360;
 800568e:	f44f 73b4 	mov.w	r3, #360	; 0x168
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005692:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005694:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005696:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005698:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800569a:	9e01      	ldr	r6, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800569c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800569e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80056a0:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80056a2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 360;
 80056a6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80056a8:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056aa:	f7fe feb1 	bl	8004410 <HAL_RCC_OscConfig>
 80056ae:	b100      	cbz	r0, 80056b2 <SystemClock_Config+0x62>
 80056b0:	e7fe      	b.n	80056b0 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80056b2:	f7fd ffdb 	bl	800366c <HAL_PWREx_EnableOverDrive>
 80056b6:	b100      	cbz	r0, 80056ba <SystemClock_Config+0x6a>
 80056b8:	e7fe      	b.n	80056b8 <SystemClock_Config+0x68>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056ba:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056c2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056c4:	260f      	movs	r6, #15

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056c6:	2105      	movs	r1, #5
 80056c8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056ca:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056cc:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056d2:	f7fe fbbd 	bl	8003e50 <HAL_RCC_ClockConfig>
 80056d6:	4604      	mov	r4, r0
 80056d8:	b100      	cbz	r0, 80056dc <SystemClock_Config+0x8c>
 80056da:	e7fe      	b.n	80056da <SystemClock_Config+0x8a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80056dc:	f7fe fc70 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 80056e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80056e8:	f7fc f98c 	bl	8001a04 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80056ec:	4628      	mov	r0, r5
 80056ee:	f7fc f9a3 	bl	8001a38 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80056f2:	4622      	mov	r2, r4
 80056f4:	4621      	mov	r1, r4
 80056f6:	f04f 30ff 	mov.w	r0, #4294967295
 80056fa:	f7fc f941 	bl	8001980 <HAL_NVIC_SetPriority>
}
 80056fe:	b014      	add	sp, #80	; 0x50
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800
 8005708:	40007000 	.word	0x40007000

0800570c <main>:
{
 800570c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800570e:	f7fc f8eb 	bl	80018e8 <HAL_Init>
  SystemClock_Config();
 8005712:	f7ff ff9d 	bl	8005650 <SystemClock_Config>
  MX_GPIO_Init();
 8005716:	f7ff ff7f 	bl	8005618 <MX_GPIO_Init>
  BSP_EEPROM_Init();
 800571a:	f7fb f937 	bl	800098c <BSP_EEPROM_Init>
  BSP_QSPI_Init();
 800571e:	f7fb fd3b 	bl	8001198 <BSP_QSPI_Init>
  BSP_SDRAM_Init();
 8005722:	f7fc f815 	bl	8001750 <BSP_SDRAM_Init>
  BSP_SD_Init();
 8005726:	f7fb fef5 	bl	8001514 <BSP_SD_Init>
  BSP_LCD_Init();
 800572a:	f7fb fccf 	bl	80010cc <BSP_LCD_Init>
  BSP_TS_Init(800,480);
 800572e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005732:	f44f 7048 	mov.w	r0, #800	; 0x320
 8005736:	f7fc f891 	bl	800185c <BSP_TS_Init>
  BSP_LCD_LayerDefaultInit(0, 0xC0000000);
 800573a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800573e:	2000      	movs	r0, #0
 8005740:	f7fb f93e 	bl	80009c0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8005744:	2000      	movs	r0, #0
 8005746:	f7fb f971 	bl	8000a2c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800574a:	f7fb fb3b 	bl	8000dc4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	f7fb f98f 	bl	8000a74 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8005756:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800575a:	f7fb f977 	bl	8000a4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800575e:	f04f 30ff 	mov.w	r0, #4294967295
 8005762:	f7fb f969 	bl	8000a38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(myfont);
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <main+0xa4>)
	  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Hello World", CENTER_MODE);
 8005768:	4e12      	ldr	r6, [pc, #72]	; (80057b4 <main+0xa8>)
  BSP_LCD_SetFont(myfont);
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	f7fb f978 	bl	8000a60 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Hello World", CENTER_MODE);
 8005770:	2100      	movs	r1, #0
 8005772:	4608      	mov	r0, r1
 8005774:	2301      	movs	r3, #1
 8005776:	4632      	mov	r2, r6
 8005778:	f7fb fa34 	bl	8000be4 <BSP_LCD_DisplayStringAt>
 800577c:	4d0e      	ldr	r5, [pc, #56]	; (80057b8 <main+0xac>)
	  for(uint r=1;r<120;r+=1){
 800577e:	2401      	movs	r4, #1
	BSP_LCD_SetTextColor(0xff000000+r*1398);
 8005780:	4628      	mov	r0, r5
 8005782:	f7fb f959 	bl	8000a38 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawCircle(120, 160, r);
 8005786:	b2a2      	uxth	r2, r4
 8005788:	21a0      	movs	r1, #160	; 0xa0
 800578a:	2078      	movs	r0, #120	; 0x78
 800578c:	f7fb fa7e 	bl	8000c8c <BSP_LCD_DrawCircle>
	  for(uint r=1;r<120;r+=1){
 8005790:	3401      	adds	r4, #1
	  HAL_Delay(5);
 8005792:	2005      	movs	r0, #5
 8005794:	f7fc f8d0 	bl	8001938 <HAL_Delay>
	  for(uint r=1;r<120;r+=1){
 8005798:	2c78      	cmp	r4, #120	; 0x78
 800579a:	f205 5576 	addw	r5, r5, #1398	; 0x576
 800579e:	d1ef      	bne.n	8005780 <main+0x74>
	  HAL_Delay(100);
 80057a0:	2064      	movs	r0, #100	; 0x64
 80057a2:	f7fc f8c9 	bl	8001938 <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80057a6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80057aa:	f7fb f963 	bl	8000a74 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Hello World", CENTER_MODE);
 80057ae:	e7df      	b.n	8005770 <main+0x64>
 80057b0:	2000005c 	.word	0x2000005c
 80057b4:	08009848 	.word	0x08009848
 80057b8:	ff000576 	.word	0xff000576

080057bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057be:	2003      	movs	r0, #3
 80057c0:	f7fc f8cc 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80057c4:	2200      	movs	r2, #0
 80057c6:	4611      	mov	r1, r2
 80057c8:	f06f 000b 	mvn.w	r0, #11
 80057cc:	f7fc f8d8 	bl	8001980 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80057d0:	2200      	movs	r2, #0
 80057d2:	4611      	mov	r1, r2
 80057d4:	f06f 000a 	mvn.w	r0, #10
 80057d8:	f7fc f8d2 	bl	8001980 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80057dc:	2200      	movs	r2, #0
 80057de:	4611      	mov	r1, r2
 80057e0:	f06f 0009 	mvn.w	r0, #9
 80057e4:	f7fc f8cc 	bl	8001980 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80057e8:	2200      	movs	r2, #0
 80057ea:	4611      	mov	r1, r2
 80057ec:	f06f 0004 	mvn.w	r0, #4
 80057f0:	f7fc f8c6 	bl	8001980 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80057f4:	2200      	movs	r2, #0
 80057f6:	4611      	mov	r1, r2
 80057f8:	f06f 0003 	mvn.w	r0, #3
 80057fc:	f7fc f8c0 	bl	8001980 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005800:	2200      	movs	r2, #0
 8005802:	4611      	mov	r1, r2
 8005804:	f06f 0001 	mvn.w	r0, #1
 8005808:	f7fc f8ba 	bl	8001980 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800580c:	2200      	movs	r2, #0
 800580e:	4611      	mov	r1, r2
 8005810:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005818:	f7fc b8b2 	b.w	8001980 <HAL_NVIC_SetPriority>

0800581c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop

08005820 <PendSV_Handler>:
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop

08005824 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005826:	f7fc f879 	bl	800191c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800582a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800582e:	f7fc b911 	b.w	8001a54 <HAL_SYSTICK_IRQHandler>
 8005832:	bf00      	nop

08005834 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005834:	4910      	ldr	r1, [pc, #64]	; (8005878 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005838:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800583c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8005840:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005842:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005846:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005848:	4c0d      	ldr	r4, [pc, #52]	; (8005880 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 800584a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005852:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800585a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800585e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005860:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005862:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005864:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800586c:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800586e:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005870:	608c      	str	r4, [r1, #8]
#endif
}
 8005872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00
 800587c:	40023800 	.word	0x40023800
 8005880:	24003010 	.word	0x24003010

08005884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005888:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800588a:	e003      	b.n	8005894 <LoopCopyDataInit>

0800588c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800588c:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800588e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005890:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005892:	3104      	adds	r1, #4

08005894 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005894:	480b      	ldr	r0, [pc, #44]	; (80058c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005898:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800589a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800589c:	d3f6      	bcc.n	800588c <CopyDataInit>
  ldr  r2, =_sbss
 800589e:	4a0b      	ldr	r2, [pc, #44]	; (80058cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058a0:	e002      	b.n	80058a8 <LoopFillZerobss>

080058a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058a4:	f842 3b04 	str.w	r3, [r2], #4

080058a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058ac:	d3f9      	bcc.n	80058a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80058ae:	f7ff ffc1 	bl	8005834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058b2:	f000 f811 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058b6:	f7ff ff29 	bl	800570c <main>
  bx  lr    
 80058ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80058bc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80058c0:	0800985c 	.word	0x0800985c
  ldr  r0, =_sdata
 80058c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80058c8:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 80058cc:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 80058d0:	2000068c 	.word	0x2000068c

080058d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058d4:	e7fe      	b.n	80058d4 <ADC_IRQHandler>
	...

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4e0d      	ldr	r6, [pc, #52]	; (8005910 <__libc_init_array+0x38>)
 80058dc:	4c0d      	ldr	r4, [pc, #52]	; (8005914 <__libc_init_array+0x3c>)
 80058de:	1ba4      	subs	r4, r4, r6
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	2500      	movs	r5, #0
 80058e4:	42a5      	cmp	r5, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	4e0b      	ldr	r6, [pc, #44]	; (8005918 <__libc_init_array+0x40>)
 80058ea:	4c0c      	ldr	r4, [pc, #48]	; (800591c <__libc_init_array+0x44>)
 80058ec:	f000 f818 	bl	8005920 <_init>
 80058f0:	1ba4      	subs	r4, r4, r6
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	2500      	movs	r5, #0
 80058f6:	42a5      	cmp	r5, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005900:	4798      	blx	r3
 8005902:	3501      	adds	r5, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800590a:	4798      	blx	r3
 800590c:	3501      	adds	r5, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	08009854 	.word	0x08009854
 8005914:	08009854 	.word	0x08009854
 8005918:	08009854 	.word	0x08009854
 800591c:	08009858 	.word	0x08009858

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
